
forthewin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000330  00800200  00001c60  00001cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000072e  00800530  00800530  00002024  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  00005420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00005dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001771  00000000  00000000  00005e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c7  00000000  00000000  00007601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000921  00000000  00000000  000079c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  000082ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091d  00000000  00000000  00008848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000125b  00000000  00000000  00009165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_5>
      18:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z9port_initv+0x18>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	15 e0       	ldi	r17, 0x05	; 5
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e0 e6       	ldi	r30, 0x60	; 96
     17e:	fc e1       	ldi	r31, 0x1C	; 28
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a0 33       	cpi	r26, 0x30	; 48
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	1c e0       	ldi	r17, 0x0C	; 12
     192:	a0 e3       	ldi	r26, 0x30	; 48
     194:	b5 e0       	ldi	r27, 0x05	; 5
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ae 35       	cpi	r26, 0x5E	; 94
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 fc 07 	call	0xff8	; 0xff8 <main>
     1a4:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_Z12lcd_set_4bitv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <_Z12lcd_set_4bitv+0x4>
     1b4:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	ef ef       	ldi	r30, 0xFF	; 255
     1c2:	f7 e4       	ldi	r31, 0x47	; 71
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <_Z12lcd_set_4bitv+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_Z12lcd_set_4bitv+0x1e>
     1ca:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	fe e0       	ldi	r31, 0x0E	; 14
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_Z12lcd_set_4bitv+0x26>
     1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	ef ef       	ldi	r30, 0xFF	; 255
     1e2:	f7 e4       	ldi	r31, 0x47	; 71
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_Z12lcd_set_4bitv+0x38>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_Z12lcd_set_4bitv+0x3e>
     1ea:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8
     1ee:	e6 e6       	ldi	r30, 0x66	; 102
     1f0:	fe e0       	ldi	r31, 0x0E	; 14
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_Z12lcd_set_4bitv+0x46>
     1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <_Z12lcd_set_4bitv+0x58>
     208:	00 c0       	rjmp	.+0      	; 0x20a <_Z12lcd_set_4bitv+0x5e>
     20a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	e6 e6       	ldi	r30, 0x66	; 102
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <_Z12lcd_set_4bitv+0x66>
     216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <_Z12lcd_set_4bitv+0x7a>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <_Z12lcd_set_4bitv+0x80>
     22c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22e:	42 98       	cbi	0x08, 2	; 8

	
}
     230:	08 95       	ret

00000232 <_Z14lcd_wr_commandh>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     238:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <_Z14lcd_wr_commandh+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <_Z14lcd_wr_commandh+0x20>
     252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <_Z14lcd_wr_commandh+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <_Z14lcd_wr_commandh+0x44>
     276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     278:	42 98       	cbi	0x08, 2	; 8
}
     27a:	08 95       	ret

0000027c <_Z8lcd_initv>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     27c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z12lcd_set_4bitv>
     280:	86 e6       	ldi	r24, 0x66	; 102
     282:	9e e0       	ldi	r25, 0x0E	; 14
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <_Z8lcd_initv+0x8>
     288:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x01);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x06);
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x0E);
     29c:	8e e0       	ldi	r24, 0x0E	; 14
     29e:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x80);
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
		
}
     2a8:	08 95       	ret

000002aa <_Z11lcd_wr_charc>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2aa:	98 b1       	in	r25, 0x08	; 8
     2ac:	9f 70       	andi	r25, 0x0F	; 15
     2ae:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2b0:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2b2:	28 2f       	mov	r18, r24
     2b4:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b6:	92 2b       	or	r25, r18
     2b8:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ba:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2bc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2be:	42 9a       	sbi	0x08, 2	; 8
     2c0:	ef ef       	ldi	r30, 0xFF	; 255
     2c2:	f7 e4       	ldi	r31, 0x47	; 71
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <_Z11lcd_wr_charc+0x1a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <_Z11lcd_wr_charc+0x20>
     2ca:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2cc:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2ce:	98 b1       	in	r25, 0x08	; 8
     2d0:	9f 70       	andi	r25, 0x0F	; 15
     2d2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2d4:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2d6:	82 95       	swap	r24
     2d8:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2da:	89 2b       	or	r24, r25
     2dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2de:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2e0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2e2:	42 9a       	sbi	0x08, 2	; 8
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	97 e4       	ldi	r25, 0x47	; 71
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <_Z11lcd_wr_charc+0x3e>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <_Z11lcd_wr_charc+0x44>
     2ee:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2f0:	42 98       	cbi	0x08, 2	; 8
}
     2f2:	08 95       	ret

000002f4 <_Z8lcd_homev>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     2f4:	80 e8       	ldi	r24, 0x80	; 128
     2f6:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
}
     2fa:	08 95       	ret

000002fc <_Z10lcd_stringPc>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
	while(*str != '\0')
     302:	88 81       	ld	r24, Y
     304:	88 23       	and	r24, r24
     306:	31 f0       	breq	.+12     	; 0x314 <_Z10lcd_stringPc+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     308:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     30a:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     30e:	89 91       	ld	r24, Y+
     310:	88 23       	and	r24, r24
     312:	d9 f7       	brne	.-10     	; 0x30a <_Z10lcd_stringPc+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <_Z10lcd_cursorcc>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	79 f0       	breq	.+30     	; 0x33c <_Z10lcd_cursorcc+0x22>
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	18 f4       	brcc	.+6      	; 0x328 <_Z10lcd_cursorcc+0xe>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	c9 f4       	brne	.+50     	; 0x358 <_Z10lcd_cursorcc+0x3e>
     326:	05 c0       	rjmp	.+10     	; 0x332 <_Z10lcd_cursorcc+0x18>
     328:	83 30       	cpi	r24, 0x03	; 3
     32a:	69 f0       	breq	.+26     	; 0x346 <_Z10lcd_cursorcc+0x2c>
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	a1 f4       	brne	.+40     	; 0x358 <_Z10lcd_cursorcc+0x3e>
     330:	0f c0       	rjmp	.+30     	; 0x350 <_Z10lcd_cursorcc+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     332:	86 2f       	mov	r24, r22
     334:	81 58       	subi	r24, 0x81	; 129
     336:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     33a:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     33c:	86 2f       	mov	r24, r22
     33e:	81 54       	subi	r24, 0x41	; 65
     340:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     344:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     346:	86 2f       	mov	r24, r22
     348:	8d 56       	subi	r24, 0x6D	; 109
     34a:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     34e:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     350:	86 2f       	mov	r24, r22
     352:	8d 52       	subi	r24, 0x2D	; 45
     354:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     358:	08 95       	ret

0000035a <_Z9lcd_printccji>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	8a 01       	movw	r16, r20
     364:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <_Z9lcd_printccji+0x14>
     36a:	66 23       	and	r22, r22
     36c:	19 f4       	brne	.+6      	; 0x374 <_Z9lcd_printccji+0x1a>
	{
		lcd_home();
     36e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z8lcd_homev>
     372:	02 c0       	rjmp	.+4      	; 0x378 <_Z9lcd_printccji+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     374:	0e 94 8d 01 	call	0x31a	; 0x31a <_Z10lcd_cursorcc>
	}
	if(digits==5 || flag==1)
     378:	c5 30       	cpi	r28, 0x05	; 5
     37a:	d1 05       	cpc	r29, r1
     37c:	71 f4       	brne	.+28     	; 0x39a <_Z9lcd_printccji+0x40>
	{
		million=value/10000+48;
     37e:	c8 01       	movw	r24, r16
     380:	60 e1       	ldi	r22, 0x10	; 16
     382:	77 e2       	ldi	r23, 0x27	; 39
     384:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
     388:	cb 01       	movw	r24, r22
     38a:	c0 96       	adiw	r24, 0x30	; 48
     38c:	90 93 53 0c 	sts	0x0C53, r25
     390:	80 93 52 0c 	sts	0x0C52, r24
		lcd_wr_char(million);
     394:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <_Z9lcd_printccji+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     39a:	c4 30       	cpi	r28, 0x04	; 4
     39c:	d1 05       	cpc	r29, r1
     39e:	b9 f4       	brne	.+46     	; 0x3ce <_Z9lcd_printccji+0x74>
	{
		temp = value/1000;
     3a0:	c8 01       	movw	r24, r16
     3a2:	68 ee       	ldi	r22, 0xE8	; 232
     3a4:	73 e0       	ldi	r23, 0x03	; 3
     3a6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
     3aa:	cb 01       	movw	r24, r22
     3ac:	70 93 5d 0c 	sts	0x0C5D, r23
     3b0:	60 93 5c 0c 	sts	0x0C5C, r22
		thousand = temp%10 + 48;
     3b4:	6a e0       	ldi	r22, 0x0A	; 10
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
     3bc:	c0 96       	adiw	r24, 0x30	; 48
     3be:	90 93 55 0c 	sts	0x0C55, r25
     3c2:	80 93 54 0c 	sts	0x0C54, r24
		lcd_wr_char(thousand);
     3c6:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
		flag=1;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <_Z9lcd_printccji+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3d0:	c3 30       	cpi	r28, 0x03	; 3
     3d2:	d1 05       	cpc	r29, r1
     3d4:	11 f0       	breq	.+4      	; 0x3da <_Z9lcd_printccji+0x80>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	b1 f4       	brne	.+44     	; 0x406 <_Z9lcd_printccji+0xac>
	{
		temp = value/100;
     3da:	c8 01       	movw	r24, r16
     3dc:	64 e6       	ldi	r22, 0x64	; 100
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
     3e4:	cb 01       	movw	r24, r22
     3e6:	70 93 5d 0c 	sts	0x0C5D, r23
     3ea:	60 93 5c 0c 	sts	0x0C5C, r22
		hundred = temp%10 + 48;
     3ee:	6a e0       	ldi	r22, 0x0A	; 10
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
     3f6:	c0 96       	adiw	r24, 0x30	; 48
     3f8:	90 93 57 0c 	sts	0x0C57, r25
     3fc:	80 93 56 0c 	sts	0x0C56, r24
		lcd_wr_char(hundred);
     400:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
		flag=1;
     404:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     406:	c2 30       	cpi	r28, 0x02	; 2
     408:	d1 05       	cpc	r29, r1
     40a:	11 f0       	breq	.+4      	; 0x410 <_Z9lcd_printccji+0xb6>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	b1 f4       	brne	.+44     	; 0x43c <_Z9lcd_printccji+0xe2>
	{
		temp = value/10;
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	c8 01       	movw	r24, r16
     416:	b9 01       	movw	r22, r18
     418:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
     41c:	cb 01       	movw	r24, r22
     41e:	70 93 5d 0c 	sts	0x0C5D, r23
     422:	60 93 5c 0c 	sts	0x0C5C, r22
		tens = temp%10 + 48;
     426:	b9 01       	movw	r22, r18
     428:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
     42c:	c0 96       	adiw	r24, 0x30	; 48
     42e:	90 93 59 0c 	sts	0x0C59, r25
     432:	80 93 58 0c 	sts	0x0C58, r24
		lcd_wr_char(tens);
     436:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
		flag=1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     43c:	c1 30       	cpi	r28, 0x01	; 1
     43e:	d1 05       	cpc	r29, r1
     440:	11 f0       	breq	.+4      	; 0x446 <_Z9lcd_printccji+0xec>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	61 f4       	brne	.+24     	; 0x45e <_Z9lcd_printccji+0x104>
	{
		unit = value%10 + 48;
     446:	c8 01       	movw	r24, r16
     448:	6a e0       	ldi	r22, 0x0A	; 10
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
     450:	c0 96       	adiw	r24, 0x30	; 48
     452:	90 93 5b 0c 	sts	0x0C5B, r25
     456:	80 93 5a 0c 	sts	0x0C5A, r24
		lcd_wr_char(unit);
     45a:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
	}
	if(digits>5)
     45e:	c6 30       	cpi	r28, 0x06	; 6
     460:	d1 05       	cpc	r29, r1
     462:	1c f0       	brlt	.+6      	; 0x46a <_Z9lcd_printccji+0x110>
	{
		lcd_wr_char('E');
     464:	85 e4       	ldi	r24, 0x45	; 69
     466:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
	}
	
}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <_Z3remi>:
     unsigned int length;
      node_label label;
   }state[MAX_NODES];

void rem(int b)  //removing path that has black debris
{
     474:	9c 01       	movw	r18, r24
     476:	e2 ea       	ldi	r30, 0xA2	; 162
     478:	f2 e0       	ldi	r31, 0x02	; 2
     unsigned int predecessor;
     unsigned int length;
      node_label label;
   }state[MAX_NODES];

void rem(int b)  //removing path that has black debris
     47a:	4e e5       	ldi	r20, 0x5E	; 94
     47c:	55 e0       	ldi	r21, 0x05	; 5
     47e:	df 01       	movw	r26, r30
{
    for(int i=0;i<175;i++)
    {
        if(dist[i][0]==b||dist[i][1]==b)
     480:	80 81       	ld	r24, Z
     482:	91 81       	ldd	r25, Z+1	; 0x01
     484:	82 17       	cp	r24, r18
     486:	93 07       	cpc	r25, r19
     488:	29 f0       	breq	.+10     	; 0x494 <_Z3remi+0x20>
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	93 81       	ldd	r25, Z+3	; 0x03
     48e:	82 17       	cp	r24, r18
     490:	93 07       	cpc	r25, r19
     492:	39 f4       	brne	.+14     	; 0x4a2 <_Z3remi+0x2e>
        {
            //cout<<"\nREMOVED="<<i<<" "<<dist[i][0]<< " "<<dist[i][1];
            dist[i][0]=0;
     494:	11 96       	adiw	r26, 0x01	; 1
     496:	1c 92       	st	X, r1
     498:	1e 92       	st	-X, r1
            dist[i][1]=0;
     49a:	13 96       	adiw	r26, 0x03	; 3
     49c:	1c 92       	st	X, r1
     49e:	1e 92       	st	-X, r1
     4a0:	12 97       	sbiw	r26, 0x02	; 2
     4a2:	34 96       	adiw	r30, 0x04	; 4
      node_label label;
   }state[MAX_NODES];

void rem(int b)  //removing path that has black debris
{
    for(int i=0;i<175;i++)
     4a4:	e4 17       	cp	r30, r20
     4a6:	f5 07       	cpc	r31, r21
     4a8:	51 f7       	brne	.-44     	; 0x47e <_Z3remi+0xa>
            dist[i][1]=0;
        }


    }
}
     4aa:	08 95       	ret

000004ac <_Z13shortest_pathjj>:
void shortest_path(unsigned int s,unsigned int t)  // shortest path function to find path between start to destination
{
     4ac:	2f 92       	push	r2
     4ae:	3f 92       	push	r3
     4b0:	4f 92       	push	r4
     4b2:	5f 92       	push	r5
     4b4:	6f 92       	push	r6
     4b6:	7f 92       	push	r7
     4b8:	8f 92       	push	r8
     4ba:	9f 92       	push	r9
     4bc:	af 92       	push	r10
     4be:	bf 92       	push	r11
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	28 97       	sbiw	r28, 0x08	; 8
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	1c 01       	movw	r2, r24
     4e2:	4b 01       	movw	r8, r22

   unsigned int f=0,part;
   unsigned int i,k,min;
   struct state *p;
   for(p=&state[0];p<&state[n];p++)
     4e4:	80 91 2e 05 	lds	r24, 0x052E
     4e8:	90 91 2f 05 	lds	r25, 0x052F
     4ec:	9c 01       	movw	r18, r24
     4ee:	22 0f       	add	r18, r18
     4f0:	33 1f       	adc	r19, r19
     4f2:	22 0f       	add	r18, r18
     4f4:	33 1f       	adc	r19, r19
     4f6:	82 0f       	add	r24, r18
     4f8:	93 1f       	adc	r25, r19
     4fa:	88 5b       	subi	r24, 0xB8	; 184
     4fc:	9a 4f       	sbci	r25, 0xFA	; 250
     4fe:	25 e0       	ldi	r18, 0x05	; 5
     500:	88 34       	cpi	r24, 0x48	; 72
     502:	92 07       	cpc	r25, r18
     504:	a1 f0       	breq	.+40     	; 0x52e <_Z13shortest_pathjj+0x82>
     506:	98 f0       	brcs	.+38     	; 0x52e <_Z13shortest_pathjj+0x82>
     508:	ac e4       	ldi	r26, 0x4C	; 76
     50a:	b5 e0       	ldi	r27, 0x05	; 5
     50c:	fd 01       	movw	r30, r26
     50e:	34 97       	sbiw	r30, 0x04	; 4
   {
		p->predecessor=-1;
     510:	2f ef       	ldi	r18, 0xFF	; 255
     512:	3f ef       	ldi	r19, 0xFF	; 255
		p->length=INFINITE;
     514:	4f e0       	ldi	r20, 0x0F	; 15
     516:	57 e2       	ldi	r21, 0x27	; 39
		p->label=tentative;
     518:	61 e0       	ldi	r22, 0x01	; 1
   unsigned int f=0,part;
   unsigned int i,k,min;
   struct state *p;
   for(p=&state[0];p<&state[n];p++)
   {
		p->predecessor=-1;
     51a:	31 83       	std	Z+1, r19	; 0x01
     51c:	20 83       	st	Z, r18
		p->length=INFINITE;
     51e:	53 83       	std	Z+3, r21	; 0x03
     520:	42 83       	std	Z+2, r20	; 0x02
		p->label=tentative;
     522:	6c 93       	st	X, r22
{

   unsigned int f=0,part;
   unsigned int i,k,min;
   struct state *p;
   for(p=&state[0];p<&state[n];p++)
     524:	35 96       	adiw	r30, 0x05	; 5
     526:	15 96       	adiw	r26, 0x05	; 5
     528:	e8 17       	cp	r30, r24
     52a:	f9 07       	cpc	r31, r25
     52c:	b0 f3       	brcs	.-20     	; 0x51a <_Z13shortest_pathjj+0x6e>
   {
		p->predecessor=-1;
		p->length=INFINITE;
		p->label=tentative;
   }
   state[t].length=0;
     52e:	f4 01       	movw	r30, r8
     530:	ee 0f       	add	r30, r30
     532:	ff 1f       	adc	r31, r31
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	e8 0d       	add	r30, r8
     53a:	f9 1d       	adc	r31, r9
     53c:	e8 5b       	subi	r30, 0xB8	; 184
     53e:	fa 4f       	sbci	r31, 0xFA	; 250
     540:	13 82       	std	Z+3, r1	; 0x03
     542:	12 82       	std	Z+2, r1	; 0x02
   state[t].label=permanent;
     544:	14 82       	std	Z+4, r1	; 0x04
   k=t;

   do
   {
	   //lcd_string("do started");
		for(i=0;i<n;i++)
     546:	c0 90 2e 05 	lds	r12, 0x052E
     54a:	d0 90 2f 05 	lds	r13, 0x052F
		p->length=INFINITE;
		p->label=tentative;
   }
   state[t].length=0;
   state[t].label=permanent;
   k=t;
     54e:	a4 01       	movw	r20, r8

   do
   {
	   //lcd_string("do started");
		for(i=0;i<n;i++)
     550:	66 24       	eor	r6, r6
     552:	77 24       	eor	r7, r7
     554:	0f 2e       	mov	r0, r31
     556:	fc e4       	ldi	r31, 0x4C	; 76
     558:	4f 2e       	mov	r4, r31
     55a:	f5 e0       	ldi	r31, 0x05	; 5
     55c:	5f 2e       	mov	r5, r31
     55e:	f0 2d       	mov	r31, r0
     560:	c2 01       	movw	r24, r4
     562:	04 97       	sbiw	r24, 0x04	; 4
     564:	9c 83       	std	Y+4, r25	; 0x04
     566:	8b 83       	std	Y+3, r24	; 0x03
     568:	4d 82       	std	Y+5, r4	; 0x05
     56a:	5e 82       	std	Y+6, r5	; 0x06
        }


    }
}
void shortest_path(unsigned int s,unsigned int t)  // shortest path function to find path between start to destination
     56c:	6e e2       	ldi	r22, 0x2E	; 46
     56e:	75 e0       	ldi	r23, 0x05	; 5
   k=t;

   do
   {
	   //lcd_string("do started");
		for(i=0;i<n;i++)
     570:	0f 2e       	mov	r0, r31
     572:	f2 ea       	ldi	r31, 0xA2	; 162
     574:	af 2e       	mov	r10, r31
     576:	f2 e0       	ldi	r31, 0x02	; 2
     578:	bf 2e       	mov	r11, r31
     57a:	f0 2d       	mov	r31, r0
     57c:	c1 14       	cp	r12, r1
     57e:	d1 04       	cpc	r13, r1
     580:	09 f4       	brne	.+2      	; 0x584 <_Z13shortest_pathjj+0xd8>
     582:	6e c0       	rjmp	.+220    	; 0x660 <_Z13shortest_pathjj+0x1b4>
     584:	f2 01       	movw	r30, r4
     586:	eb 80       	ldd	r14, Y+3	; 0x03
     588:	fc 80       	ldd	r15, Y+4	; 0x04
     58a:	0d 81       	ldd	r16, Y+5	; 0x05
     58c:	1e 81       	ldd	r17, Y+6	; 0x06
     58e:	d3 01       	movw	r26, r6
			}
			//lcd_string("break");

			 if(f==1 && state[i].label==tentative)
			{
				if(state[k].length+1<state[i].length)
     590:	ca 01       	movw	r24, r20
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	84 0f       	add	r24, r20
     59c:	95 1f       	adc	r25, r21
     59e:	88 5b       	subi	r24, 0xB8	; 184
     5a0:	9a 4f       	sbci	r25, 0xFA	; 250
     5a2:	9c 01       	movw	r18, r24
     5a4:	2e 5f       	subi	r18, 0xFE	; 254
     5a6:	3f 4f       	sbci	r19, 0xFF	; 255
     5a8:	3a 83       	std	Y+2, r19	; 0x02
     5aa:	29 83       	std	Y+1, r18	; 0x01
     5ac:	18 87       	std	Y+8, r17	; 0x08
     5ae:	0f 83       	std	Y+7, r16	; 0x07
     5b0:	87 01       	movw	r16, r14
     5b2:	7f 01       	movw	r14, r30
     5b4:	38 c0       	rjmp	.+112    	; 0x626 <_Z13shortest_pathjj+0x17a>
		{
			f=0;
			for(part=0;part<163;part++)
			{

				if((dist[part][0]==k)&&(dist[part][1]==i))
     5b6:	80 81       	ld	r24, Z
     5b8:	91 81       	ldd	r25, Z+1	; 0x01
     5ba:	84 17       	cp	r24, r20
     5bc:	95 07       	cpc	r25, r21
     5be:	29 f4       	brne	.+10     	; 0x5ca <_Z13shortest_pathjj+0x11e>
     5c0:	82 81       	ldd	r24, Z+2	; 0x02
     5c2:	93 81       	ldd	r25, Z+3	; 0x03
     5c4:	8a 17       	cp	r24, r26
     5c6:	9b 07       	cpc	r25, r27
     5c8:	39 f0       	breq	.+14     	; 0x5d8 <_Z13shortest_pathjj+0x12c>
     5ca:	34 96       	adiw	r30, 0x04	; 4
   {
	   //lcd_string("do started");
		for(i=0;i<n;i++)
		{
			f=0;
			for(part=0;part<163;part++)
     5cc:	e6 17       	cp	r30, r22
     5ce:	f7 07       	cpc	r31, r23
     5d0:	91 f7       	brne	.-28     	; 0x5b6 <_Z13shortest_pathjj+0x10a>
     5d2:	38 87       	std	Y+8, r19	; 0x08
     5d4:	2f 83       	std	Y+7, r18	; 0x07
     5d6:	1b c0       	rjmp	.+54     	; 0x60e <_Z13shortest_pathjj+0x162>
     5d8:	38 87       	std	Y+8, r19	; 0x08
     5da:	2f 83       	std	Y+7, r18	; 0x07

				}
			}
			//lcd_string("break");

			 if(f==1 && state[i].label==tentative)
     5dc:	f9 01       	movw	r30, r18
     5de:	80 81       	ld	r24, Z
     5e0:	81 30       	cpi	r24, 0x01	; 1
     5e2:	a9 f4       	brne	.+42     	; 0x60e <_Z13shortest_pathjj+0x162>
			{
				if(state[k].length+1<state[i].length)
     5e4:	e9 81       	ldd	r30, Y+1	; 0x01
     5e6:	fa 81       	ldd	r31, Y+2	; 0x02
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	f8 01       	movw	r30, r16
     5f0:	22 81       	ldd	r18, Z+2	; 0x02
     5f2:	33 81       	ldd	r19, Z+3	; 0x03
     5f4:	82 17       	cp	r24, r18
     5f6:	93 07       	cpc	r25, r19
     5f8:	50 f4       	brcc	.+20     	; 0x60e <_Z13shortest_pathjj+0x162>
				{
					state[i].predecessor=k;
     5fa:	51 83       	std	Z+1, r21	; 0x01
     5fc:	40 83       	st	Z, r20
					state[i].length=state[k].length+1;
     5fe:	e9 81       	ldd	r30, Y+1	; 0x01
     600:	fa 81       	ldd	r31, Y+2	; 0x02
     602:	80 81       	ld	r24, Z
     604:	91 81       	ldd	r25, Z+1	; 0x01
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	f8 01       	movw	r30, r16
     60a:	93 83       	std	Z+3, r25	; 0x03
     60c:	82 83       	std	Z+2, r24	; 0x02
   k=t;

   do
   {
	   //lcd_string("do started");
		for(i=0;i<n;i++)
     60e:	11 96       	adiw	r26, 0x01	; 1
     610:	2f 81       	ldd	r18, Y+7	; 0x07
     612:	38 85       	ldd	r19, Y+8	; 0x08
     614:	2b 5f       	subi	r18, 0xFB	; 251
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	38 87       	std	Y+8, r19	; 0x08
     61a:	2f 83       	std	Y+7, r18	; 0x07
     61c:	0b 5f       	subi	r16, 0xFB	; 251
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
     620:	ac 15       	cp	r26, r12
     622:	bd 05       	cpc	r27, r13
     624:	20 f4       	brcc	.+8      	; 0x62e <_Z13shortest_pathjj+0x182>
     626:	f5 01       	movw	r30, r10
     628:	2f 81       	ldd	r18, Y+7	; 0x07
     62a:	38 85       	ldd	r19, Y+8	; 0x08
     62c:	c4 cf       	rjmp	.-120    	; 0x5b6 <_Z13shortest_pathjj+0x10a>
     62e:	af e0       	ldi	r26, 0x0F	; 15
     630:	b7 e2       	ldi	r27, 0x27	; 39
     632:	a3 01       	movw	r20, r6
     634:	93 01       	movw	r18, r6
     636:	87 01       	movw	r16, r14
		}
		//lcd_string("to");
		k=0;min=INFINITE;
		for(i=0;i<n;i++)
		{
			if(state[i].label==tentative && state[i].length<min)
     638:	f8 01       	movw	r30, r16
     63a:	80 81       	ld	r24, Z
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	41 f4       	brne	.+16     	; 0x650 <_Z13shortest_pathjj+0x1a4>
        }


    }
}
void shortest_path(unsigned int s,unsigned int t)  // shortest path function to find path between start to destination
     640:	32 97       	sbiw	r30, 0x02	; 2
		}
		//lcd_string("to");
		k=0;min=INFINITE;
		for(i=0;i<n;i++)
		{
			if(state[i].label==tentative && state[i].length<min)
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	8a 17       	cp	r24, r26
     648:	9b 07       	cpc	r25, r27
     64a:	10 f4       	brcc	.+4      	; 0x650 <_Z13shortest_pathjj+0x1a4>
			{
				min=state[i].length;
     64c:	dc 01       	movw	r26, r24
		}
		//lcd_string("to");
		k=0;min=INFINITE;
		for(i=0;i<n;i++)
		{
			if(state[i].label==tentative && state[i].length<min)
     64e:	a9 01       	movw	r20, r18
				}
		    }
		}
		//lcd_string("to");
		k=0;min=INFINITE;
		for(i=0;i<n;i++)
     650:	2f 5f       	subi	r18, 0xFF	; 255
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	0b 5f       	subi	r16, 0xFB	; 251
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	2c 15       	cp	r18, r12
     65a:	3d 05       	cpc	r19, r13
     65c:	69 f7       	brne	.-38     	; 0x638 <_Z13shortest_pathjj+0x18c>
     65e:	01 c0       	rjmp	.+2      	; 0x662 <_Z13shortest_pathjj+0x1b6>
   k=t;

   do
   {
	   //lcd_string("do started");
		for(i=0;i<n;i++)
     660:	a3 01       	movw	r20, r6
				min=state[i].length;
				k=i;
			}

		}
		state[k].label=permanent;
     662:	ca 01       	movw	r24, r20
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	84 0f       	add	r24, r20
     66e:	95 1f       	adc	r25, r21
     670:	88 5b       	subi	r24, 0xB8	; 184
     672:	9a 4f       	sbci	r25, 0xFA	; 250
     674:	dc 01       	movw	r26, r24
     676:	14 96       	adiw	r26, 0x04	; 4
     678:	1c 92       	st	X, r1
     67a:	14 97       	sbiw	r26, 0x04	; 4
   }
   state[t].length=0;
   state[t].label=permanent;
   k=t;

   do
     67c:	42 15       	cp	r20, r2
     67e:	53 05       	cpc	r21, r3
     680:	09 f0       	breq	.+2      	; 0x684 <_Z13shortest_pathjj+0x1d8>
     682:	7c cf       	rjmp	.-264    	; 0x57c <_Z13shortest_pathjj+0xd0>
     684:	0f 2e       	mov	r0, r31
     686:	f2 ec       	ldi	r31, 0xC2	; 194
     688:	cf 2e       	mov	r12, r31
     68a:	fa e0       	ldi	r31, 0x0A	; 10
     68c:	df 2e       	mov	r13, r31
     68e:	f0 2d       	mov	r31, r0
     690:	f6 01       	movw	r30, r12
     692:	91 01       	movw	r18, r2
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	50 e0       	ldi	r21, 0x00	; 0
   i=0;k=s;
   do
   {
		path[i++]=k;

		k=state[k].predecessor;
     698:	08 e4       	ldi	r16, 0x48	; 72
     69a:	15 e0       	ldi	r17, 0x05	; 5
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <_Z13shortest_pathjj+0x1f4>
   }while(k!=s);

   i=0;k=s;
   do
   {
		path[i++]=k;
     69e:	ab 01       	movw	r20, r22
     6a0:	21 93       	st	Z+, r18
     6a2:	31 93       	st	Z+, r19
     6a4:	ba 01       	movw	r22, r20
     6a6:	6f 5f       	subi	r22, 0xFF	; 255
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255

		k=state[k].predecessor;
     6aa:	c9 01       	movw	r24, r18
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	82 0f       	add	r24, r18
     6b6:	93 1f       	adc	r25, r19
     6b8:	80 0f       	add	r24, r16
     6ba:	91 1f       	adc	r25, r17
     6bc:	dc 01       	movw	r26, r24
     6be:	2d 91       	ld	r18, X+
     6c0:	3c 91       	ld	r19, X
     6c2:	11 97       	sbiw	r26, 0x01	; 1
		}
		state[k].label=permanent;
   }while(k!=s);

   i=0;k=s;
   do
     6c4:	82 16       	cp	r8, r18
     6c6:	93 06       	cpc	r9, r19
     6c8:	51 f7       	brne	.-44     	; 0x69e <_Z13shortest_pathjj+0x1f2>
   {
		path[i++]=k;

		k=state[k].predecessor;
   }while(k!=t);
   path[i++]=t;
     6ca:	fb 01       	movw	r30, r22
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ee 53       	subi	r30, 0x3E	; 62
     6d2:	f5 4f       	sbci	r31, 0xF5	; 245
     6d4:	91 82       	std	Z+1, r9	; 0x01
     6d6:	80 82       	st	Z, r8
     6d8:	ca 01       	movw	r24, r20
     6da:	02 96       	adiw	r24, 0x02	; 2
   tot=i;
     6dc:	90 93 31 09 	sts	0x0931, r25
     6e0:	80 93 30 09 	sts	0x0930, r24
   for(unsigned int j=0;j<tot-1;j++)
     6e4:	bf ef       	ldi	r27, 0xFF	; 255
     6e6:	4f 3f       	cpi	r20, 0xFF	; 255
     6e8:	5b 07       	cpc	r21, r27
     6ea:	79 f0       	breq	.+30     	; 0x70a <_Z13shortest_pathjj+0x25e>
     6ec:	a2 e3       	ldi	r26, 0x32	; 50
     6ee:	b9 e0       	ldi	r27, 0x09	; 9
        }


    }
}
void shortest_path(unsigned int s,unsigned int t)  // shortest path function to find path between start to destination
     6f0:	ca 01       	movw	r24, r20
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	8c 53       	subi	r24, 0x3C	; 60
     6f8:	95 4f       	sbci	r25, 0xF5	; 245
     6fa:	f6 01       	movw	r30, r12
   }while(k!=t);
   path[i++]=t;
   tot=i;
   for(unsigned int j=0;j<tot-1;j++)
	{
		original[j]=path[j];
     6fc:	21 91       	ld	r18, Z+
     6fe:	31 91       	ld	r19, Z+
     700:	2d 93       	st	X+, r18
     702:	3d 93       	st	X+, r19

		k=state[k].predecessor;
   }while(k!=t);
   path[i++]=t;
   tot=i;
   for(unsigned int j=0;j<tot-1;j++)
     704:	e8 17       	cp	r30, r24
     706:	f9 07       	cpc	r31, r25
     708:	c9 f7       	brne	.-14     	; 0x6fc <_Z13shortest_pathjj+0x250>
	{
		original[j]=path[j];
	}
	for(unsigned int j=0;j<tot-1;j++)  // deciding direction of travel for each black marker
     70a:	60 90 30 09 	lds	r6, 0x0930
     70e:	70 90 31 09 	lds	r7, 0x0931
        }


    }
}
void shortest_path(unsigned int s,unsigned int t)  // shortest path function to find path between start to destination
     712:	c3 01       	movw	r24, r6
     714:	88 0f       	add	r24, r24
     716:	99 1f       	adc	r25, r25
     718:	0f 2e       	mov	r0, r31
     71a:	f0 ec       	ldi	r31, 0xC0	; 192
     71c:	8f 2e       	mov	r8, r31
     71e:	fa e0       	ldi	r31, 0x0A	; 10
     720:	9f 2e       	mov	r9, r31
     722:	f0 2d       	mov	r31, r0
     724:	88 0e       	add	r8, r24
     726:	99 1e       	adc	r9, r25
     728:	76 01       	movw	r14, r12
	{
		original[j]=path[j];
	}
	for(unsigned int j=0;j<tot-1;j++)  // deciding direction of travel for each black marker
	{
		if((path[j]/10==path[j+1]/10)&&(path[j]<path[j+1]))
     72a:	0f 2e       	mov	r0, r31
     72c:	fa e0       	ldi	r31, 0x0A	; 10
     72e:	af 2e       	mov	r10, r31
     730:	bb 24       	eor	r11, r11
     732:	f0 2d       	mov	r31, r0
		else if((path[j]/10==path[j+1]/10)&&(path[j]>path[j+1]))
		path[j]='N';
		else if(path[j]>path[j+1])
		path[j]='W';
		else if(path[j]<path[j+1])
		path[j]='E';
     734:	0f 2e       	mov	r0, r31
     736:	f5 e4       	ldi	r31, 0x45	; 69
     738:	4f 2e       	mov	r4, r31
     73a:	55 24       	eor	r5, r5
     73c:	f0 2d       	mov	r31, r0
		if((path[j]/10==path[j+1]/10)&&(path[j]<path[j+1]))
		path[j]='S';
		else if((path[j]/10==path[j+1]/10)&&(path[j]>path[j+1]))
		path[j]='N';
		else if(path[j]>path[j+1])
		path[j]='W';
     73e:	0f 2e       	mov	r0, r31
     740:	f7 e5       	ldi	r31, 0x57	; 87
     742:	2f 2e       	mov	r2, r31
     744:	33 24       	eor	r3, r3
     746:	f0 2d       	mov	r31, r0
     748:	3b c0       	rjmp	.+118    	; 0x7c0 <_Z13shortest_pathjj+0x314>
	{
		original[j]=path[j];
	}
	for(unsigned int j=0;j<tot-1;j++)  // deciding direction of travel for each black marker
	{
		if((path[j]/10==path[j+1]/10)&&(path[j]<path[j+1]))
     74a:	f7 01       	movw	r30, r14
     74c:	20 81       	ld	r18, Z
     74e:	31 81       	ldd	r19, Z+1	; 0x01
     750:	02 80       	ldd	r0, Z+2	; 0x02
     752:	f3 81       	ldd	r31, Z+3	; 0x03
     754:	e0 2d       	mov	r30, r0
     756:	c9 01       	movw	r24, r18
     758:	b5 01       	movw	r22, r10
     75a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__divmodhi4>
     75e:	7a 83       	std	Y+2, r23	; 0x02
     760:	69 83       	std	Y+1, r22	; 0x01
     762:	cf 01       	movw	r24, r30
     764:	b5 01       	movw	r22, r10
     766:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__divmodhi4>
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	86 17       	cp	r24, r22
     770:	97 07       	cpc	r25, r23
     772:	a1 f4       	brne	.+40     	; 0x79c <_Z13shortest_pathjj+0x2f0>
     774:	2e 17       	cp	r18, r30
     776:	3f 07       	cpc	r19, r31
     778:	3c f4       	brge	.+14     	; 0x788 <_Z13shortest_pathjj+0x2dc>
		path[j]='S';
     77a:	e3 e5       	ldi	r30, 0x53	; 83
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	d7 01       	movw	r26, r14
     780:	11 96       	adiw	r26, 0x01	; 1
     782:	fc 93       	st	X, r31
     784:	ee 93       	st	-X, r30
     786:	18 c0       	rjmp	.+48     	; 0x7b8 <_Z13shortest_pathjj+0x30c>
		else if((path[j]/10==path[j+1]/10)&&(path[j]>path[j+1]))
     788:	e2 17       	cp	r30, r18
     78a:	f3 07       	cpc	r31, r19
     78c:	ac f4       	brge	.+42     	; 0x7b8 <_Z13shortest_pathjj+0x30c>
		path[j]='N';
     78e:	ee e4       	ldi	r30, 0x4E	; 78
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	d7 01       	movw	r26, r14
     794:	11 96       	adiw	r26, 0x01	; 1
     796:	fc 93       	st	X, r31
     798:	ee 93       	st	-X, r30
     79a:	0e c0       	rjmp	.+28     	; 0x7b8 <_Z13shortest_pathjj+0x30c>
		else if(path[j]>path[j+1])
     79c:	e2 17       	cp	r30, r18
     79e:	f3 07       	cpc	r31, r19
     7a0:	2c f4       	brge	.+10     	; 0x7ac <_Z13shortest_pathjj+0x300>
		path[j]='W';
     7a2:	d7 01       	movw	r26, r14
     7a4:	11 96       	adiw	r26, 0x01	; 1
     7a6:	3c 92       	st	X, r3
     7a8:	2e 92       	st	-X, r2
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <_Z13shortest_pathjj+0x30c>
		else if(path[j]<path[j+1])
     7ac:	2e 17       	cp	r18, r30
     7ae:	3f 07       	cpc	r19, r31
     7b0:	1c f4       	brge	.+6      	; 0x7b8 <_Z13shortest_pathjj+0x30c>
		path[j]='E';
     7b2:	f7 01       	movw	r30, r14
     7b4:	51 82       	std	Z+1, r5	; 0x01
     7b6:	40 82       	st	Z, r4
     7b8:	22 e0       	ldi	r18, 0x02	; 2
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	e2 0e       	add	r14, r18
     7be:	f3 1e       	adc	r15, r19
   tot=i;
   for(unsigned int j=0;j<tot-1;j++)
	{
		original[j]=path[j];
	}
	for(unsigned int j=0;j<tot-1;j++)  // deciding direction of travel for each black marker
     7c0:	e8 14       	cp	r14, r8
     7c2:	f9 04       	cpc	r15, r9
     7c4:	11 f6       	brne	.-124    	; 0x74a <_Z13shortest_pathjj+0x29e>
		path[j]='W';
		else if(path[j]<path[j+1])
		path[j]='E';

	}
	for(unsigned int j=0;j<tot-1;j++)
     7c6:	31 e0       	ldi	r19, 0x01	; 1
     7c8:	63 16       	cp	r6, r19
     7ca:	71 04       	cpc	r7, r1
     7cc:	e9 f1       	breq	.+122    	; 0x848 <_Z13shortest_pathjj+0x39c>
     7ce:	f6 01       	movw	r30, r12
		if((char)path[j]=='E')
		path[j]=1;
		if((char)path[j]=='S')
		path[j]=2;
		if((char)path[j]=='W')
		path[j]=3;
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	90 e0       	ldi	r25, 0x00	; 0
		if((char)path[j]=='N')
		path[j]=0;
		if((char)path[j]=='E')
		path[j]=1;
		if((char)path[j]=='S')
		path[j]=2;
     7d4:	22 e0       	ldi	r18, 0x02	; 2
     7d6:	30 e0       	ldi	r19, 0x00	; 0
	for(unsigned int j=0;j<tot-1;j++)
	{
		if((char)path[j]=='N')
		path[j]=0;
		if((char)path[j]=='E')
		path[j]=1;
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	50 e0       	ldi	r21, 0x00	; 0
        }


    }
}
void shortest_path(unsigned int s,unsigned int t)  // shortest path function to find path between start to destination
     7dc:	df 01       	movw	r26, r30
		path[j]='E';

	}
	for(unsigned int j=0;j<tot-1;j++)
	{
		if((char)path[j]=='N')
     7de:	60 81       	ld	r22, Z
     7e0:	6e 34       	cpi	r22, 0x4E	; 78
     7e2:	19 f4       	brne	.+6      	; 0x7ea <_Z13shortest_pathjj+0x33e>
		path[j]=0;
     7e4:	11 82       	std	Z+1, r1	; 0x01
     7e6:	10 82       	st	Z, r1
     7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <_Z13shortest_pathjj+0x34a>
		if((char)path[j]=='E')
     7ea:	60 81       	ld	r22, Z
     7ec:	65 34       	cpi	r22, 0x45	; 69
     7ee:	19 f4       	brne	.+6      	; 0x7f6 <_Z13shortest_pathjj+0x34a>
		path[j]=1;
     7f0:	51 83       	std	Z+1, r21	; 0x01
     7f2:	40 83       	st	Z, r20
     7f4:	07 c0       	rjmp	.+14     	; 0x804 <_Z13shortest_pathjj+0x358>
		if((char)path[j]=='S')
     7f6:	6c 91       	ld	r22, X
     7f8:	63 35       	cpi	r22, 0x53	; 83
     7fa:	21 f4       	brne	.+8      	; 0x804 <_Z13shortest_pathjj+0x358>
		path[j]=2;
     7fc:	11 96       	adiw	r26, 0x01	; 1
     7fe:	3c 93       	st	X, r19
     800:	2e 93       	st	-X, r18
     802:	06 c0       	rjmp	.+12     	; 0x810 <_Z13shortest_pathjj+0x364>
		if((char)path[j]=='W')
     804:	6c 91       	ld	r22, X
     806:	67 35       	cpi	r22, 0x57	; 87
     808:	19 f4       	brne	.+6      	; 0x810 <_Z13shortest_pathjj+0x364>
		path[j]=3;
     80a:	11 96       	adiw	r26, 0x01	; 1
     80c:	9c 93       	st	X, r25
     80e:	8e 93       	st	-X, r24
     810:	32 96       	adiw	r30, 0x02	; 2
		path[j]='W';
		else if(path[j]<path[j+1])
		path[j]='E';

	}
	for(unsigned int j=0;j<tot-1;j++)
     812:	e8 15       	cp	r30, r8
     814:	f9 05       	cpc	r31, r9
     816:	11 f7       	brne	.-60     	; 0x7dc <_Z13shortest_pathjj+0x330>
     818:	f6 01       	movw	r30, r12
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
	int temp=0;
	for(unsigned int j=0;j<tot-1;j++)   // deciding angle to rotate to travel for each black marker
	{
		temp=current;
		current=path[j];
		path[j]=(path[j]-temp)*90;
     81e:	6a e5       	ldi	r22, 0x5A	; 90
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	01 c0       	rjmp	.+2      	; 0x826 <_Z13shortest_pathjj+0x37a>
	int current =0;
	int temp=0;
	for(unsigned int j=0;j<tot-1;j++)   // deciding angle to rotate to travel for each black marker
	{
		temp=current;
		current=path[j];
     824:	ca 01       	movw	r24, r20
     826:	40 81       	ld	r20, Z
     828:	51 81       	ldd	r21, Z+1	; 0x01
		path[j]=(path[j]-temp)*90;
     82a:	da 01       	movw	r26, r20
     82c:	a8 1b       	sub	r26, r24
     82e:	b9 0b       	sbc	r27, r25
     830:	a6 9f       	mul	r26, r22
     832:	90 01       	movw	r18, r0
     834:	a7 9f       	mul	r26, r23
     836:	30 0d       	add	r19, r0
     838:	b6 9f       	mul	r27, r22
     83a:	30 0d       	add	r19, r0
     83c:	11 24       	eor	r1, r1
     83e:	21 93       	st	Z+, r18
     840:	31 93       	st	Z+, r19
		path[j]=3;
	}

	int current =0;
	int temp=0;
	for(unsigned int j=0;j<tot-1;j++)   // deciding angle to rotate to travel for each black marker
     842:	e8 15       	cp	r30, r8
     844:	f9 05       	cpc	r31, r9
     846:	71 f7       	brne	.-36     	; 0x824 <_Z13shortest_pathjj+0x378>
		temp=current;
		current=path[j];
		path[j]=(path[j]-temp)*90;
		//cout<<path[j]<<" ";
	}
	for(unsigned int j=0;j<tot-1;j++)    // deciding movement(forward,left,right,back) of travel for each black marker
     848:	40 91 30 09 	lds	r20, 0x0930
     84c:	50 91 31 09 	lds	r21, 0x0931
     850:	41 30       	cpi	r20, 0x01	; 1
     852:	51 05       	cpc	r21, r1
     854:	c1 f1       	breq	.+112    	; 0x8c6 <_Z13shortest_pathjj+0x41a>
     856:	41 50       	subi	r20, 0x01	; 1
     858:	50 40       	sbci	r21, 0x00	; 0
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(path[j]==90||path[j]==-270)
		{
			path[j]=3;
     85e:	63 e0       	ldi	r22, 0x03	; 3
     860:	70 e0       	ldi	r23, 0x00	; 0
		}
		else if(path[j]==270||path[j]==-90)
		{
			path[j]=1;
     862:	aa 24       	eor	r10, r10
     864:	bb 24       	eor	r11, r11
     866:	a3 94       	inc	r10
		{
			path[j]=4;
		}
		else
		{
			path[j]=2;
     868:	88 24       	eor	r8, r8
     86a:	99 24       	eor	r9, r9
     86c:	68 94       	set
     86e:	81 f8       	bld	r8, 1
		{
			path[j]=1;
		}
		else if(path[j]==0)
		{
			path[j]=4;
     870:	04 e0       	ldi	r16, 0x04	; 4
     872:	10 e0       	ldi	r17, 0x00	; 0
     874:	7a 01       	movw	r14, r20
     876:	a9 01       	movw	r20, r18
     878:	96 01       	movw	r18, r12
        }


    }
}
void shortest_path(unsigned int s,unsigned int t)  // shortest path function to find path between start to destination
     87a:	f9 01       	movw	r30, r18
		path[j]=(path[j]-temp)*90;
		//cout<<path[j]<<" ";
	}
	for(unsigned int j=0;j<tot-1;j++)    // deciding movement(forward,left,right,back) of travel for each black marker
	{
		if(path[j]==90||path[j]==-270)
     87c:	80 81       	ld	r24, Z
     87e:	91 81       	ldd	r25, Z+1	; 0x01
     880:	8a 35       	cpi	r24, 0x5A	; 90
     882:	91 05       	cpc	r25, r1
     884:	21 f0       	breq	.+8      	; 0x88e <_Z13shortest_pathjj+0x3e2>
     886:	be ef       	ldi	r27, 0xFE	; 254
     888:	82 3f       	cpi	r24, 0xF2	; 242
     88a:	9b 07       	cpc	r25, r27
     88c:	19 f4       	brne	.+6      	; 0x894 <_Z13shortest_pathjj+0x3e8>
		{
			path[j]=3;
     88e:	71 83       	std	Z+1, r23	; 0x01
     890:	60 83       	st	Z, r22
     892:	12 c0       	rjmp	.+36     	; 0x8b8 <_Z13shortest_pathjj+0x40c>
		}
		else if(path[j]==270||path[j]==-90)
     894:	a1 e0       	ldi	r26, 0x01	; 1
     896:	8e 30       	cpi	r24, 0x0E	; 14
     898:	9a 07       	cpc	r25, r26
     89a:	21 f0       	breq	.+8      	; 0x8a4 <_Z13shortest_pathjj+0x3f8>
     89c:	bf ef       	ldi	r27, 0xFF	; 255
     89e:	86 3a       	cpi	r24, 0xA6	; 166
     8a0:	9b 07       	cpc	r25, r27
     8a2:	19 f4       	brne	.+6      	; 0x8aa <_Z13shortest_pathjj+0x3fe>
		{
			path[j]=1;
     8a4:	b1 82       	std	Z+1, r11	; 0x01
     8a6:	a0 82       	st	Z, r10
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <_Z13shortest_pathjj+0x40c>
		}
		else if(path[j]==0)
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	19 f4       	brne	.+6      	; 0x8b4 <_Z13shortest_pathjj+0x408>
		{
			path[j]=4;
     8ae:	11 83       	std	Z+1, r17	; 0x01
     8b0:	00 83       	st	Z, r16
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <_Z13shortest_pathjj+0x40c>
		}
		else
		{
			path[j]=2;
     8b4:	91 82       	std	Z+1, r9	; 0x01
     8b6:	80 82       	st	Z, r8
		temp=current;
		current=path[j];
		path[j]=(path[j]-temp)*90;
		//cout<<path[j]<<" ";
	}
	for(unsigned int j=0;j<tot-1;j++)    // deciding movement(forward,left,right,back) of travel for each black marker
     8b8:	4f 5f       	subi	r20, 0xFF	; 255
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	2e 5f       	subi	r18, 0xFE	; 254
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	4e 15       	cp	r20, r14
     8c2:	5f 05       	cpc	r21, r15
     8c4:	d0 f2       	brcs	.-76     	; 0x87a <_Z13shortest_pathjj+0x3ce>
		{
			path[j]=2;
		}
	}

}
     8c6:	28 96       	adiw	r28, 0x08	; 8
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	7f 90       	pop	r7
     8ec:	6f 90       	pop	r6
     8ee:	5f 90       	pop	r5
     8f0:	4f 90       	pop	r4
     8f2:	3f 90       	pop	r3
     8f4:	2f 90       	pop	r2
     8f6:	08 95       	ret

000008f8 <_Z17motion_pin_configv>:
unsigned char Right_white_line = 0;

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     8f8:	81 b1       	in	r24, 0x01	; 1
     8fa:	8f 60       	ori	r24, 0x0F	; 15
     8fc:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     8fe:	82 b1       	in	r24, 0x02	; 2
     900:	80 7f       	andi	r24, 0xF0	; 240
     902:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     904:	ea e0       	ldi	r30, 0x0A	; 10
     906:	f1 e0       	ldi	r31, 0x01	; 1
     908:	80 81       	ld	r24, Z
     90a:	88 61       	ori	r24, 0x18	; 24
     90c:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     90e:	eb e0       	ldi	r30, 0x0B	; 11
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	80 81       	ld	r24, Z
     914:	88 61       	ori	r24, 0x18	; 24
     916:	80 83       	st	Z, r24
}
     918:	08 95       	ret

0000091a <_Z15lcd_port_configv>:
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     91a:	87 b1       	in	r24, 0x07	; 7
     91c:	87 6f       	ori	r24, 0xF7	; 247
     91e:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     920:	88 b1       	in	r24, 0x08	; 8
     922:	80 78       	andi	r24, 0x80	; 128
     924:	88 b9       	out	0x08, r24	; 8
}
     926:	08 95       	ret

00000928 <_Z14adc_pin_configv>:

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00;
     928:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     92a:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
     92c:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
     930:	10 92 08 01 	sts	0x0108, r1
}
     934:	08 95       	ret

00000936 <_Z23left_encoder_pin_configv>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     936:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     938:	74 9a       	sbi	0x0e, 4	; 14
}
     93a:	08 95       	ret

0000093c <_Z24right_encoder_pin_configv>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     93c:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     93e:	75 9a       	sbi	0x0e, 5	; 14
}
     940:	08 95       	ret

00000942 <_Z17buzzer_pin_configv>:
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     942:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     944:	43 98       	cbi	0x08, 3	; 8
}
     946:	08 95       	ret

00000948 <_Z9port_initv>:

//Function to initialize ports
void port_init()
{
	motion_pin_config(); //robot motion pins config
     948:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_Z17motion_pin_configv>
	left_encoder_pin_config(); //left encoder pin config
     94c:	0e 94 9b 04 	call	0x936	; 0x936 <_Z23left_encoder_pin_configv>
	right_encoder_pin_config(); //right encoder pin config
     950:	0e 94 9e 04 	call	0x93c	; 0x93c <_Z24right_encoder_pin_configv>
	lcd_port_config();
     954:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z15lcd_port_configv>
	adc_pin_config();
     958:	0e 94 94 04 	call	0x928	; 0x928 <_Z14adc_pin_configv>
	buzzer_pin_config();
     95c:	0e 94 a1 04 	call	0x942	; 0x942 <_Z17buzzer_pin_configv>
}
     960:	08 95       	ret

00000962 <_Z11timer5_initv>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     962:	e1 e2       	ldi	r30, 0x21	; 33
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     974:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     978:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     97c:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     980:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     984:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     988:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     98c:	89 ea       	ldi	r24, 0xA9	; 169
     98e:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     992:	8b e0       	ldi	r24, 0x0B	; 11
     994:	80 83       	st	Z, r24
}
     996:	08 95       	ret

00000998 <_Z8adc_initv>:

void adc_init()
{
	ADCSRA = 0x00;
     998:	ea e7       	ldi	r30, 0x7A	; 122
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     99e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     9a2:	80 e2       	ldi	r24, 0x20	; 32
     9a4:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     9a8:	80 e8       	ldi	r24, 0x80	; 128
     9aa:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     9ac:	86 e8       	ldi	r24, 0x86	; 134
     9ae:	80 83       	st	Z, r24
}
     9b0:	08 95       	ret

000009b2 <_Z14ADC_Conversionh>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
     9b2:	88 30       	cpi	r24, 0x08	; 8
     9b4:	18 f0       	brcs	.+6      	; 0x9bc <_Z14ADC_Conversionh+0xa>
	{
		ADCSRB = 0x08;
     9b6:	98 e0       	ldi	r25, 0x08	; 8
     9b8:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
     9bc:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
     9be:	80 62       	ori	r24, 0x20	; 32
     9c0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     9c4:	ea e7       	ldi	r30, 0x7A	; 122
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	80 64       	ori	r24, 0x40	; 64
     9cc:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     9ce:	80 81       	ld	r24, Z
     9d0:	84 ff       	sbrs	r24, 4
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <_Z14ADC_Conversionh+0x1c>
	a=ADCH;
     9d4:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     9d8:	ea e7       	ldi	r30, 0x7A	; 122
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	90 81       	ld	r25, Z
     9de:	90 61       	ori	r25, 0x10	; 16
     9e0:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     9e2:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     9e6:	08 95       	ret

000009e8 <_Z12print_sensorcch>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	d8 2f       	mov	r29, r24
     9ee:	c6 2f       	mov	r28, r22
     9f0:	84 2f       	mov	r24, r20

	ADC_Value = ADC_Conversion(channel);
     9f2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z14ADC_Conversionh>
     9f6:	48 2f       	mov	r20, r24
     9f8:	80 93 3a 05 	sts	0x053A, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     9fc:	8d 2f       	mov	r24, r29
     9fe:	6c 2f       	mov	r22, r28
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	23 e0       	ldi	r18, 0x03	; 3
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <_Z36left_position_encoder_interrupt_initv>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     a10:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     a12:	ea e6       	ldi	r30, 0x6A	; 106
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	82 60       	ori	r24, 0x02	; 2
     a1a:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     a1c:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     a1e:	78 94       	sei
}
     a20:	08 95       	ret

00000a22 <_Z37right_position_encoder_interrupt_initv>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     a22:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     a24:	ea e6       	ldi	r30, 0x6A	; 106
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	88 60       	ori	r24, 0x08	; 8
     a2c:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     a2e:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     a30:	78 94       	sei
}
     a32:	08 95       	ret

00000a34 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     a34:	1f 92       	push	r1
     a36:	0f 92       	push	r0
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	0f 92       	push	r0
     a3c:	11 24       	eor	r1, r1
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     a46:	80 91 40 05 	lds	r24, 0x0540
     a4a:	90 91 41 05 	lds	r25, 0x0541
     a4e:	a0 91 42 05 	lds	r26, 0x0542
     a52:	b0 91 43 05 	lds	r27, 0x0543
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	a1 1d       	adc	r26, r1
     a5a:	b1 1d       	adc	r27, r1
     a5c:	80 93 40 05 	sts	0x0540, r24
     a60:	90 93 41 05 	sts	0x0541, r25
     a64:	a0 93 42 05 	sts	0x0542, r26
     a68:	b0 93 43 05 	sts	0x0543, r27
}
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	8f 93       	push	r24
     a8a:	9f 93       	push	r25
     a8c:	af 93       	push	r26
     a8e:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     a90:	80 91 44 05 	lds	r24, 0x0544
     a94:	90 91 45 05 	lds	r25, 0x0545
     a98:	a0 91 46 05 	lds	r26, 0x0546
     a9c:	b0 91 47 05 	lds	r27, 0x0547
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	a1 1d       	adc	r26, r1
     aa4:	b1 1d       	adc	r27, r1
     aa6:	80 93 44 05 	sts	0x0544, r24
     aaa:	90 93 45 05 	sts	0x0545, r25
     aae:	a0 93 46 05 	sts	0x0546, r26
     ab2:	b0 93 47 05 	sts	0x0547, r27
}
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <_Z8velocityhh>:
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ac8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     acc:	60 93 2a 01 	sts	0x012A, r22
}
     ad0:	08 95       	ret

00000ad2 <_Z10motion_seth>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     ad2:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ad4:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
     ad6:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ad8:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
     ada:	92 b9       	out	0x02, r25	; 2
}
     adc:	08 95       	ret

00000ade <_Z9buzzer_onv>:
void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     ade:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     ae0:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     ae2:	88 b9       	out	0x08, r24	; 8
}
     ae4:	08 95       	ret

00000ae6 <_Z10buzzer_offv>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     ae6:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     ae8:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     aea:	88 b9       	out	0x08, r24	; 8
}
     aec:	08 95       	ret

00000aee <_Z7forwardv>:

void forward (void) //both wheels forward
{
	motion_set(0x06);
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10motion_seth>
}
     af4:	08 95       	ret

00000af6 <_Z4backv>:

void back (void) //both wheels backward
{
	motion_set(0x09);
     af6:	89 e0       	ldi	r24, 0x09	; 9
     af8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10motion_seth>
}
     afc:	08 95       	ret

00000afe <_Z4leftv>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
     afe:	85 e0       	ldi	r24, 0x05	; 5
     b00:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10motion_seth>
}
     b04:	08 95       	ret

00000b06 <_Z5rightv>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
     b06:	8a e0       	ldi	r24, 0x0A	; 10
     b08:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10motion_seth>
}
     b0c:	08 95       	ret

00000b0e <_Z9soft_leftv>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10motion_seth>
}
     b14:	08 95       	ret

00000b16 <_Z10soft_rightv>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10motion_seth>
}
     b1c:	08 95       	ret

00000b1e <_Z11soft_left_2v>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10motion_seth>
}
     b24:	08 95       	ret

00000b26 <_Z12soft_right_2v>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     b26:	88 e0       	ldi	r24, 0x08	; 8
     b28:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10motion_seth>
}
     b2c:	08 95       	ret

00000b2e <_Z4stopv>:

void stop (void)
{
	motion_set(0x00);
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10motion_seth>
}
     b34:	08 95       	ret

00000b36 <_Z12angle_rotatej>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     b3c:	bc 01       	movw	r22, r24
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__floatunsisf>
     b46:	28 e4       	ldi	r18, 0x48	; 72
     b48:	31 ee       	ldi	r19, 0xE1	; 225
     b4a:	42 e8       	ldi	r20, 0x82	; 130
     b4c:	50 e4       	ldi	r21, 0x40	; 64
     b4e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     b52:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fixunssfsi>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     b5e:	10 92 40 05 	sts	0x0540, r1
     b62:	10 92 41 05 	sts	0x0541, r1
     b66:	10 92 42 05 	sts	0x0542, r1
     b6a:	10 92 43 05 	sts	0x0543, r1
	ShaftCountLeft = 0;
     b6e:	10 92 44 05 	sts	0x0544, r1
     b72:	10 92 45 05 	sts	0x0545, r1
     b76:	10 92 46 05 	sts	0x0546, r1
     b7a:	10 92 47 05 	sts	0x0547, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	c0 e0       	ldi	r28, 0x00	; 0
     b82:	40 91 40 05 	lds	r20, 0x0540
     b86:	50 91 41 05 	lds	r21, 0x0541
     b8a:	60 91 42 05 	lds	r22, 0x0542
     b8e:	70 91 43 05 	lds	r23, 0x0543
     b92:	00 91 44 05 	lds	r16, 0x0544
     b96:	10 91 45 05 	lds	r17, 0x0545
     b9a:	20 91 46 05 	lds	r18, 0x0546
     b9e:	30 91 47 05 	lds	r19, 0x0547
     ba2:	ef 2f       	mov	r30, r31
     ba4:	48 17       	cp	r20, r24
     ba6:	59 07       	cpc	r21, r25
     ba8:	6a 07       	cpc	r22, r26
     baa:	7b 07       	cpc	r23, r27
     bac:	08 f4       	brcc	.+2      	; 0xbb0 <_Z12angle_rotatej+0x7a>
     bae:	ec 2f       	mov	r30, r28
     bb0:	ee 23       	and	r30, r30
     bb2:	49 f4       	brne	.+18     	; 0xbc6 <_Z12angle_rotatej+0x90>
     bb4:	4f 2f       	mov	r20, r31
     bb6:	08 17       	cp	r16, r24
     bb8:	19 07       	cpc	r17, r25
     bba:	2a 07       	cpc	r18, r26
     bbc:	3b 07       	cpc	r19, r27
     bbe:	08 f4       	brcc	.+2      	; 0xbc2 <_Z12angle_rotatej+0x8c>
     bc0:	4c 2f       	mov	r20, r28
     bc2:	44 23       	and	r20, r20
     bc4:	f1 f2       	breq	.-68     	; 0xb82 <_Z12angle_rotatej+0x4c>
		break;
	}
	stop(); //Stop robot
     bc6:	0e 94 97 05 	call	0xb2e	; 0xb2e <_Z4stopv>
}
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	08 95       	ret

00000bd2 <_Z18linear_distance_mmj>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     bd2:	bc 01       	movw	r22, r24
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__floatunsisf>
     bdc:	25 ee       	ldi	r18, 0xE5	; 229
     bde:	30 ed       	ldi	r19, 0xD0	; 208
     be0:	4a ea       	ldi	r20, 0xAA	; 170
     be2:	50 e4       	ldi	r21, 0x40	; 64
     be4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     be8:	0e 94 20 0b 	call	0x1640	; 0x1640 <__fixunssfsi>
     bec:	46 2f       	mov	r20, r22
     bee:	57 2f       	mov	r21, r23
     bf0:	68 2f       	mov	r22, r24
     bf2:	79 2f       	mov	r23, r25

	ShaftCountRight = 0;
     bf4:	10 92 40 05 	sts	0x0540, r1
     bf8:	10 92 41 05 	sts	0x0541, r1
     bfc:	10 92 42 05 	sts	0x0542, r1
     c00:	10 92 43 05 	sts	0x0543, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     c04:	80 91 40 05 	lds	r24, 0x0540
     c08:	90 91 41 05 	lds	r25, 0x0541
     c0c:	a0 91 42 05 	lds	r26, 0x0542
     c10:	b0 91 43 05 	lds	r27, 0x0543
     c14:	48 17       	cp	r20, r24
     c16:	59 07       	cpc	r21, r25
     c18:	6a 07       	cpc	r22, r26
     c1a:	7b 07       	cpc	r23, r27
     c1c:	98 f7       	brcc	.-26     	; 0xc04 <_Z18linear_distance_mmj+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
     c1e:	0e 94 97 05 	call	0xb2e	; 0xb2e <_Z4stopv>
}
     c22:	08 95       	ret

00000c24 <_Z10forward_mmj>:

void forward_mm(unsigned int DistanceInMM)
{
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ec 01       	movw	r28, r24
	forward();
     c2a:	0e 94 77 05 	call	0xaee	; 0xaee <_Z7forwardv>
	linear_distance_mm(DistanceInMM);
     c2e:	ce 01       	movw	r24, r28
     c30:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_Z18linear_distance_mmj>
}
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <_Z7back_mmj>:

void back_mm(unsigned int DistanceInMM)
{
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	ec 01       	movw	r28, r24
	back();
     c40:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_Z4backv>
	linear_distance_mm(DistanceInMM);
     c44:	ce 01       	movw	r24, r28
     c46:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_Z18linear_distance_mmj>
}
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <_Z12left_degreesj>:

void left_degrees(unsigned int Degrees)
{
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     c56:	0e 94 7f 05 	call	0xafe	; 0xafe <_Z4leftv>
	angle_rotate(Degrees);
     c5a:	ce 01       	movw	r24, r28
     c5c:	0e 94 9b 05 	call	0xb36	; 0xb36 <_Z12angle_rotatej>
}
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <_Z13right_degreesj>:



void right_degrees(unsigned int Degrees)
{
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     c6c:	0e 94 83 05 	call	0xb06	; 0xb06 <_Z5rightv>
	angle_rotate(Degrees);
     c70:	ce 01       	movw	r24, r28
     c72:	0e 94 9b 05 	call	0xb36	; 0xb36 <_Z12angle_rotatej>
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <_Z17soft_left_degreesj>:


void soft_left_degrees(unsigned int Degrees)
{
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
     c82:	0e 94 87 05 	call	0xb0e	; 0xb0e <_Z9soft_leftv>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     c86:	ce 01       	movw	r24, r28
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0e 94 9b 05 	call	0xb36	; 0xb36 <_Z12angle_rotatej>
}
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <_Z18soft_right_degreesj>:

void soft_right_degrees(unsigned int Degrees)
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
     c9c:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z10soft_rightv>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     ca0:	ce 01       	movw	r24, r28
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0e 94 9b 05 	call	0xb36	; 0xb36 <_Z12angle_rotatej>
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <_Z19soft_left_2_degreesj>:

void soft_left_2_degrees(unsigned int Degrees)
{
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
     cb6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z11soft_left_2v>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     cba:	ce 01       	movw	r24, r28
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0e 94 9b 05 	call	0xb36	; 0xb36 <_Z12angle_rotatej>
}
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <_Z20soft_right_2_degreesj>:

void soft_right_2_degrees(unsigned int Degrees)
{
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
     cd0:	0e 94 93 05 	call	0xb26	; 0xb26 <_Z12soft_right_2v>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     cd4:	ce 01       	movw	r24, r28
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0e 94 9b 05 	call	0xb36	; 0xb36 <_Z12angle_rotatej>
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <_Z23Sharp_GP2D12_estimationh>:

unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     ce8:	68 2f       	mov	r22, r24
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__floatunsisf>
     cf4:	2f ee       	ldi	r18, 0xEF	; 239
     cf6:	39 ec       	ldi	r19, 0xC9	; 201
     cf8:	43 e9       	ldi	r20, 0x93	; 147
     cfa:	5f e3       	ldi	r21, 0x3F	; 63
     cfc:	0e 94 3d 0c 	call	0x187a	; 0x187a <pow>
     d00:	b6 2f       	mov	r27, r22
     d02:	a7 2f       	mov	r26, r23
     d04:	38 2f       	mov	r19, r24
     d06:	29 2f       	mov	r18, r25
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	9f e3       	ldi	r25, 0x3F	; 63
     d10:	42 2f       	mov	r20, r18
     d12:	0b 2f       	mov	r16, r27
     d14:	1a 2f       	mov	r17, r26
     d16:	23 2f       	mov	r18, r19
     d18:	34 2f       	mov	r19, r20
     d1a:	a9 01       	movw	r20, r18
     d1c:	98 01       	movw	r18, r16
     d1e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__divsf3>
     d22:	2a e9       	ldi	r18, 0x9A	; 154
     d24:	39 ef       	ldi	r19, 0xF9	; 249
     d26:	4e e2       	ldi	r20, 0x2E	; 46
     d28:	55 e4       	ldi	r21, 0x45	; 69
     d2a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__mulsf3>
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e2       	ldi	r20, 0x20	; 32
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__mulsf3>
     d3a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__fixsfsi>
     d3e:	88 27       	eor	r24, r24
     d40:	77 fd       	sbrc	r23, 7
     d42:	80 95       	com	r24
     d44:	98 2f       	mov	r25, r24
     d46:	0e 94 4e 0b 	call	0x169c	; 0x169c <__floatsisf>
	distanceInt = (int)distance;
     d4a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     d4e:	86 2f       	mov	r24, r22
     d50:	97 2f       	mov	r25, r23
     d52:	23 e0       	ldi	r18, 0x03	; 3
     d54:	81 32       	cpi	r24, 0x21	; 33
     d56:	92 07       	cpc	r25, r18
     d58:	10 f0       	brcs	.+4      	; 0xd5e <_Z23Sharp_GP2D12_estimationh+0x7a>
     d5a:	80 e2       	ldi	r24, 0x20	; 32
     d5c:	93 e0       	ldi	r25, 0x03	; 3
}
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <_Z10left_countv>:
void left_count()
{
	while(1)
	{
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z14ADC_Conversionh>
     d6a:	80 93 31 05 	sts	0x0531, r24
		left(); //Turn left
     d6e:	0e 94 7f 05 	call	0xafe	; 0xafe <_Z4leftv>
		velocity(200,200);
     d72:	88 ec       	ldi	r24, 0xC8	; 200
     d74:	68 ec       	ldi	r22, 0xC8	; 200
     d76:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z8velocityhh>
		if(Center_white_line>0x15)
     d7a:	80 91 31 05 	lds	r24, 0x0531
     d7e:	86 31       	cpi	r24, 0x16	; 22
     d80:	88 f3       	brcs	.-30     	; 0xd64 <_Z10left_countv>
		return;
	}

}
     d82:	08 95       	ret

00000d84 <_Z11right_countv>:
void right_count()
{
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
	int flag=1;
     d94:	c1 e0       	ldi	r28, 0x01	; 1
     d96:	d0 e0       	ldi	r29, 0x00	; 0
				box=1;

			}
			else if(box==1)                 
			box=2;
			flag=0;
     d98:	ee 24       	eor	r14, r14
     d9a:	ff 24       	eor	r15, r15
			{
				box=1;

			}
			else if(box==1)                 
			box=2;
     d9c:	cc 24       	eor	r12, r12
     d9e:	dd 24       	eor	r13, r13
     da0:	68 94       	set
     da2:	c1 f8       	bld	r12, 1
		//lcd_print(2,1,value,3); 						//Prints Value Of Distance in MM measured by Sharp Sensor.
		if(value>80 && value<100 &&flag==1)				//detecting number of white debris present
		{
			if(box==0)                      
			{
				box=1;
     da4:	01 e0       	ldi	r16, 0x01	; 1
     da6:	10 e0       	ldi	r17, 0x00	; 0
void right_count()
{
	int flag=1;
	while(1)
	{
		Center_white_line = ADC_Conversion(2);	        //Getting data of Center WL Sensor
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z14ADC_Conversionh>
     dae:	80 93 31 05 	sts	0x0531, r24
		//print_sensor(1,1,2);
		sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     db2:	8b e0       	ldi	r24, 0x0B	; 11
     db4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z14ADC_Conversionh>
     db8:	80 93 3d 05 	sts	0x053D, r24
		value = Sharp_GP2D12_estimation(sharp);			//Stores Distance calculated in a variable "value".
     dbc:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z23Sharp_GP2D12_estimationh>
     dc0:	90 93 3c 05 	sts	0x053C, r25
     dc4:	80 93 3b 05 	sts	0x053B, r24
		//lcd_print(2,1,value,3); 						//Prints Value Of Distance in MM measured by Sharp Sensor.
		if(value>80 && value<100 &&flag==1)				//detecting number of white debris present
     dc8:	81 55       	subi	r24, 0x51	; 81
     dca:	90 40       	sbci	r25, 0x00	; 0
     dcc:	83 31       	cpi	r24, 0x13	; 19
     dce:	91 05       	cpc	r25, r1
     dd0:	c8 f4       	brcc	.+50     	; 0xe04 <_Z11right_countv+0x80>
     dd2:	c1 30       	cpi	r28, 0x01	; 1
     dd4:	d1 05       	cpc	r29, r1
     dd6:	b1 f4       	brne	.+44     	; 0xe04 <_Z11right_countv+0x80>
		{
			if(box==0)                      
     dd8:	80 91 36 05 	lds	r24, 0x0536
     ddc:	90 91 37 05 	lds	r25, 0x0537
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	31 f4       	brne	.+12     	; 0xdf0 <_Z11right_countv+0x6c>
			{
				box=1;
     de4:	10 93 37 05 	sts	0x0537, r17
     de8:	00 93 36 05 	sts	0x0536, r16

			}
			else if(box==1)                 
			box=2;
			flag=0;
     dec:	e7 01       	movw	r28, r14
     dee:	0a c0       	rjmp	.+20     	; 0xe04 <_Z11right_countv+0x80>
			if(box==0)                      
			{
				box=1;

			}
			else if(box==1)                 
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	91 05       	cpc	r25, r1
     df4:	31 f4       	brne	.+12     	; 0xe02 <_Z11right_countv+0x7e>
			box=2;
     df6:	d0 92 37 05 	sts	0x0537, r13
     dfa:	c0 92 36 05 	sts	0x0536, r12
			flag=0;
     dfe:	e7 01       	movw	r28, r14
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <_Z11right_countv+0x80>
     e02:	e7 01       	movw	r28, r14
		}
		if(value>100 &&flag==0)
     e04:	80 91 3b 05 	lds	r24, 0x053B
     e08:	90 91 3c 05 	lds	r25, 0x053C
     e0c:	85 36       	cpi	r24, 0x65	; 101
     e0e:	91 05       	cpc	r25, r1
     e10:	18 f0       	brcs	.+6      	; 0xe18 <_Z11right_countv+0x94>
     e12:	20 97       	sbiw	r28, 0x00	; 0
     e14:	09 f4       	brne	.+2      	; 0xe18 <_Z11right_countv+0x94>
		{
			flag=1;
     e16:	e8 01       	movw	r28, r16
		}
		right(); //Turn right
     e18:	0e 94 83 05 	call	0xb06	; 0xb06 <_Z5rightv>
		velocity(200,200);
     e1c:	88 ec       	ldi	r24, 0xC8	; 200
     e1e:	68 ec       	ldi	r22, 0xC8	; 200
     e20:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z8velocityhh>
		if(Center_white_line>0x15)
     e24:	80 91 31 05 	lds	r24, 0x0531
     e28:	86 31       	cpi	r24, 0x16	; 22
     e2a:	08 f4       	brcc	.+2      	; 0xe2e <_Z11right_countv+0xaa>
     e2c:	bd cf       	rjmp	.-134    	; 0xda8 <_Z11right_countv+0x24>
		return;
	}

}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	cf 90       	pop	r12
     e3e:	08 95       	ret

00000e40 <_Z8nextdestv>:
int nextdest()
{
	int pos=0;
	for(int i=0;i<17;i++)// selecting one of the 16 points
	{
		if(search[i]==1) //if not traversed yet
     e40:	80 91 80 02 	lds	r24, 0x0280
     e44:	90 91 81 02 	lds	r25, 0x0281
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	91 05       	cpc	r25, r1
     e4c:	91 f1       	breq	.+100    	; 0xeb2 <_Z8nextdestv+0x72>
		{
			pos=i;
			break;
		}
		if(search[i]==2) // all possible position to search white debris are traversed
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	91 05       	cpc	r25, r1
     e52:	61 f0       	breq	.+24     	; 0xe6c <_Z8nextdestv+0x2c>
     e54:	e2 e8       	ldi	r30, 0x82	; 130
     e56:	f2 e0       	ldi	r31, 0x02	; 2
	function to find next destination to reach
*/
int nextdest()
{
	int pos=0;
	for(int i=0;i<17;i++)// selecting one of the 16 points
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(search[i]==1) //if not traversed yet
     e5c:	81 91       	ld	r24, Z+
     e5e:	91 91       	ld	r25, Z+
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	41 f1       	breq	.+80     	; 0xeb6 <_Z8nextdestv+0x76>
		{
			pos=i;
			break;
		}
		if(search[i]==2) // all possible position to search white debris are traversed
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	91 05       	cpc	r25, r1
     e6a:	d9 f4       	brne	.+54     	; 0xea2 <_Z8nextdestv+0x62>
		{
			stop();
     e6c:	0e 94 97 05 	call	0xb2e	; 0xb2e <_Z4stopv>
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	9f ef       	ldi	r25, 0xFF	; 255
     e74:	a9 e5       	ldi	r26, 0x59	; 89
     e76:	81 50       	subi	r24, 0x01	; 1
     e78:	90 40       	sbci	r25, 0x00	; 0
     e7a:	a0 40       	sbci	r26, 0x00	; 0
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <_Z8nextdestv+0x36>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <_Z8nextdestv+0x40>
     e80:	00 00       	nop
			_delay_ms(2000);
			buzzer_on();
     e82:	0e 94 6f 05 	call	0xade	; 0xade <_Z9buzzer_onv>
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	9f ef       	ldi	r25, 0xFF	; 255
     e8a:	ad ee       	ldi	r26, 0xED	; 237
     e8c:	b2 e0       	ldi	r27, 0x02	; 2
     e8e:	81 50       	subi	r24, 0x01	; 1
     e90:	90 40       	sbci	r25, 0x00	; 0
     e92:	a0 40       	sbci	r26, 0x00	; 0
     e94:	b0 40       	sbci	r27, 0x00	; 0
     e96:	d9 f7       	brne	.-10     	; 0xe8e <_Z8nextdestv+0x4e>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <_Z8nextdestv+0x5a>
     e9a:	00 00       	nop
/*
	function to find next destination to reach
*/
int nextdest()
{
	int pos=0;
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	0a c0       	rjmp	.+20     	; 0xeb6 <_Z8nextdestv+0x76>
	for(int i=0;i<17;i++)// selecting one of the 16 points
     ea2:	2f 5f       	subi	r18, 0xFF	; 255
     ea4:	3f 4f       	sbci	r19, 0xFF	; 255
     ea6:	21 31       	cpi	r18, 0x11	; 17
     ea8:	31 05       	cpc	r19, r1
     eaa:	c1 f6       	brne	.-80     	; 0xe5c <_Z8nextdestv+0x1c>
/*
	function to find next destination to reach
*/
int nextdest()
{
	int pos=0;
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <_Z8nextdestv+0x76>
	for(int i=0;i<17;i++)// selecting one of the 16 points
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
			break;
		}
	}
	for(int j=0;j<4;j++) // selecting one of the 4 access points for a white box
	{
		if(val[pos][j]!=0)
     eb6:	f9 01       	movw	r30, r18
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	e0 50       	subi	r30, 0x00	; 0
     ec6:	fe 4f       	sbci	r31, 0xFE	; 254
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	81 f5       	brne	.+96     	; 0xf30 <_Z8nextdestv+0xf0>
     ed0:	f9 01       	movw	r30, r18
     ed2:	ee 0f       	add	r30, r30
     ed4:	ff 1f       	adc	r31, r31
     ed6:	ee 0f       	add	r30, r30
     ed8:	ff 1f       	adc	r31, r31
     eda:	ee 0f       	add	r30, r30
     edc:	ff 1f       	adc	r31, r31
     ede:	e0 50       	subi	r30, 0x00	; 0
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	19 f5       	brne	.+70     	; 0xf30 <_Z8nextdestv+0xf0>
     eea:	f9 01       	movw	r30, r18
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	e0 50       	subi	r30, 0x00	; 0
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	84 81       	ldd	r24, Z+4	; 0x04
     efe:	95 81       	ldd	r25, Z+5	; 0x05
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	b1 f4       	brne	.+44     	; 0xf30 <_Z8nextdestv+0xf0>
     f04:	f9 01       	movw	r30, r18
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	ee 0f       	add	r30, r30
     f10:	ff 1f       	adc	r31, r31
     f12:	e0 50       	subi	r30, 0x00	; 0
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	86 81       	ldd	r24, Z+6	; 0x06
     f18:	97 81       	ldd	r25, Z+7	; 0x07
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	49 f4       	brne	.+18     	; 0xf30 <_Z8nextdestv+0xf0>
		{
			return val[pos][j];
		}
	}
	search[pos]=0;
     f1e:	f9 01       	movw	r30, r18
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	e0 58       	subi	r30, 0x80	; 128
     f26:	fd 4f       	sbci	r31, 0xFD	; 253
     f28:	11 82       	std	Z+1, r1	; 0x01
     f2a:	10 82       	st	Z, r1
	return 0;
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
}
     f30:	08 95       	ret

00000f32 <_Z11makeitrighti>:

/*
	function to align bot in the direction it has to start traversing 
*/
void makeitright(int x)
{
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
	int a=4-(x%4);      //current difference between turning right
     f36:	24 e0       	ldi	r18, 0x04	; 4
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	b9 01       	movw	r22, r18
     f3c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__divmodhi4>
     f40:	e9 01       	movw	r28, r18
     f42:	c8 1b       	sub	r28, r24
     f44:	d9 0b       	sbc	r29, r25
	lcd_print(1,7,a,2);
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	67 e0       	ldi	r22, 0x07	; 7
     f4a:	ae 01       	movw	r20, r28
     f4c:	22 e0       	ldi	r18, 0x02	; 2
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
	lcd_print(1,10,a+path[0],2);
     f54:	40 91 c2 0a 	lds	r20, 0x0AC2
     f58:	50 91 c3 0a 	lds	r21, 0x0AC3
     f5c:	4c 0f       	add	r20, r28
     f5e:	5d 1f       	adc	r21, r29
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	6a e0       	ldi	r22, 0x0A	; 10
     f64:	22 e0       	ldi	r18, 0x02	; 2
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
	if((a+path[0])%4==0)
     f6c:	80 91 c2 0a 	lds	r24, 0x0AC2
     f70:	90 91 c3 0a 	lds	r25, 0x0AC3
     f74:	8c 0f       	add	r24, r28
     f76:	9d 1f       	adc	r25, r29
     f78:	9c 01       	movw	r18, r24
     f7a:	23 70       	andi	r18, 0x03	; 3
     f7c:	30 70       	andi	r19, 0x00	; 0
     f7e:	21 15       	cp	r18, r1
     f80:	31 05       	cpc	r19, r1
     f82:	b9 f0       	breq	.+46     	; 0xfb2 <_Z11makeitrighti+0x80>
	{
	}
	else if((a+path[0])%4==2)//it is back
     f84:	64 e0       	ldi	r22, 0x04	; 4
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__divmodhi4>
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	91 05       	cpc	r25, r1
     f90:	39 f4       	brne	.+14     	; 0xfa0 <_Z11makeitrighti+0x6e>
	{

		right_degrees(135); //Rotate robot right by 135 degrees
     f92:	87 e8       	ldi	r24, 0x87	; 135
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 33 06 	call	0xc66	; 0xc66 <_Z13right_degreesj>
		right_count(); //Rotate robot right till it reaches a black line
     f9a:	0e 94 c2 06 	call	0xd84	; 0xd84 <_Z11right_countv>
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <_Z11makeitrighti+0x80>
	}
	else if((a+path[0])%4==3)//it is right
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	31 f4       	brne	.+12     	; 0xfb2 <_Z11makeitrighti+0x80>
	{
		right_degrees(45); //Rotate robot right by 45 degrees
     fa6:	8d e2       	ldi	r24, 0x2D	; 45
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 33 06 	call	0xc66	; 0xc66 <_Z13right_degreesj>
		right_count(); //Rotate robot right till it reaches a black line
     fae:	0e 94 c2 06 	call	0xd84	; 0xd84 <_Z11right_countv>
	}
	if((a+path[0])%4==1)//it is left
     fb2:	80 91 c2 0a 	lds	r24, 0x0AC2
     fb6:	90 91 c3 0a 	lds	r25, 0x0AC3
     fba:	8c 0f       	add	r24, r28
     fbc:	9d 1f       	adc	r25, r29
     fbe:	64 e0       	ldi	r22, 0x04	; 4
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__divmodhi4>
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	91 05       	cpc	r25, r1
     fca:	31 f4       	brne	.+12     	; 0xfd8 <_Z11makeitrighti+0xa6>
	{
		left_degrees(45); //Rotate robot left by 45 degrees
     fcc:	8d e2       	ldi	r24, 0x2D	; 45
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z12left_degreesj>
		left_count(); //Rotate robot left till it reaches a black line
     fd4:	0e 94 b2 06 	call	0xd64	; 0xd64 <_Z10left_countv>
	}

}
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <_Z12init_devicesv>:

//Function to initialize all the devices
void init_devices()
{
	cli(); //Clears the global interrupt
     fde:	f8 94       	cli
	port_init();  //Initializes all the ports
     fe0:	0e 94 a4 04 	call	0x948	; 0x948 <_Z9port_initv>
	adc_init();
     fe4:	0e 94 cc 04 	call	0x998	; 0x998 <_Z8adc_initv>
	timer5_init();
     fe8:	0e 94 b1 04 	call	0x962	; 0x962 <_Z11timer5_initv>
	left_position_encoder_interrupt_init();
     fec:	0e 94 08 05 	call	0xa10	; 0xa10 <_Z36left_position_encoder_interrupt_initv>
	right_position_encoder_interrupt_init();
     ff0:	0e 94 11 05 	call	0xa22	; 0xa22 <_Z37right_position_encoder_interrupt_initv>
	sei();   // Enables the global interrupt
     ff4:	78 94       	sei
}
     ff6:	08 95       	ret

00000ff8 <main>:


//Main Function

int main(void)
{
     ff8:	2f 92       	push	r2
     ffa:	3f 92       	push	r3
     ffc:	4f 92       	push	r4
     ffe:	5f 92       	push	r5
    1000:	6f 92       	push	r6
    1002:	7f 92       	push	r7
    1004:	8f 92       	push	r8
    1006:	9f 92       	push	r9
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
	init_devices();
    101c:	0e 94 ef 07 	call	0xfde	; 0xfde <_Z12init_devicesv>
	lcd_set_4bit();
    1020:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z12lcd_set_4bitv>
	lcd_init();
    1024:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z8lcd_initv>
	flag=4;
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	80 93 33 05 	sts	0x0533, r24
	x=0;
    102e:	10 92 35 05 	sts	0x0535, r1
    1032:	10 92 34 05 	sts	0x0534, r1
	int etc=0,s_dest=0;					// "etc" - variable for first traversal from start position
	unsigned int current=49;			//49 - node number given to the start point
	for(int k=0;k<100;k++,etc++)		//max number bot can change destinations
    1036:	aa 24       	eor	r10, r10
    1038:	bb 24       	eor	r11, r11
	lcd_set_4bit();
	lcd_init();
	flag=4;
	x=0;
	int etc=0,s_dest=0;					// "etc" - variable for first traversal from start position
	unsigned int current=49;			//49 - node number given to the start point
    103a:	01 e3       	ldi	r16, 0x31	; 49
    103c:	10 e0       	ldi	r17, 0x00	; 0
	for(int k=0;k<100;k++,etc++)		//max number bot can change destinations
	{

		if(etc==0)
		count=0;
    103e:	22 24       	eor	r2, r2
    1040:	33 24       	eor	r3, r3
		else
		count=1;
		s_dest=nextdest();				//value of next destination where white box will be checked

		lcd_print(1,1,current,2);
		lcd_print(1,4,s_dest,2);
    1042:	44 24       	eor	r4, r4
    1044:	68 94       	set
    1046:	42 f8       	bld	r4, 2
		shortest_path(current,s_dest);//finding shortest path between current node and next destination implemented in djikstra
		makeitright(x);					//aligning the bot
		x=path[0];						
    1048:	0f 2e       	mov	r0, r31
    104a:	f2 ec       	ldi	r31, 0xC2	; 194
    104c:	ef 2e       	mov	r14, r31
    104e:	fa e0       	ldi	r31, 0x0A	; 10
    1050:	ff 2e       	mov	r15, r31
    1052:	f0 2d       	mov	r31, r0
					current=original[count-1];
					lcd_print(2,8,original[count-1],2);
				}
				else        //black debris detected in path(not at destination)
				{	
					lcd_print(2,5,original[count],2);
    1054:	0f 2e       	mov	r0, r31
    1056:	f2 e3       	ldi	r31, 0x32	; 50
    1058:	6f 2e       	mov	r6, r31
    105a:	f9 e0       	ldi	r31, 0x09	; 9
    105c:	7f 2e       	mov	r7, r31
    105e:	f0 2d       	mov	r31, r0
}


//Main Function

int main(void)
    1060:	d2 2c       	mov	r13, r2
    1062:	c3 2c       	mov	r12, r3
				forward();
				velocity(250,170);
			}
			else if((Center_white_line>0x15 && Left_white_line>0x15 && Right_white_line>0x15)||(Center_white_line>0x15 && Left_white_line>0x15 && Right_white_line<0x15)||(Center_white_line>0x15 && Left_white_line<0x15 && Right_white_line>0x15)) //when all the three sensors are on black or center_sensor with any one of left or right sensor is on black  
			{
				flag=4;
    1064:	94 2c       	mov	r9, r4
	int etc=0,s_dest=0;					// "etc" - variable for first traversal from start position
	unsigned int current=49;			//49 - node number given to the start point
	for(int k=0;k<100;k++,etc++)		//max number bot can change destinations
	{

		if(etc==0)
    1066:	a1 14       	cp	r10, r1
    1068:	b1 04       	cpc	r11, r1
    106a:	29 f4       	brne	.+10     	; 0x1076 <main+0x7e>
		count=0;
    106c:	30 92 39 05 	sts	0x0539, r3
    1070:	20 92 38 05 	sts	0x0538, r2
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <main+0x8a>
		else
		count=1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	90 93 39 05 	sts	0x0539, r25
    107e:	80 93 38 05 	sts	0x0538, r24
		s_dest=nextdest();				//value of next destination where white box will be checked
    1082:	0e 94 20 07 	call	0xe40	; 0xe40 <_Z8nextdestv>
    1086:	88 2e       	mov	r8, r24
    1088:	59 2e       	mov	r5, r25

		lcd_print(1,1,current,2);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	a8 01       	movw	r20, r16
    1090:	22 e0       	ldi	r18, 0x02	; 2
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		lcd_print(1,4,s_dest,2);
    1098:	c8 2d       	mov	r28, r8
    109a:	d5 2d       	mov	r29, r5
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	64 2d       	mov	r22, r4
    10a0:	ae 01       	movw	r20, r28
    10a2:	22 e0       	ldi	r18, 0x02	; 2
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		shortest_path(current,s_dest);//finding shortest path between current node and next destination implemented in djikstra
    10aa:	c8 01       	movw	r24, r16
    10ac:	be 01       	movw	r22, r28
    10ae:	0e 94 56 02 	call	0x4ac	; 0x4ac <_Z13shortest_pathjj>
		makeitright(x);					//aligning the bot
    10b2:	80 91 34 05 	lds	r24, 0x0534
    10b6:	90 91 35 05 	lds	r25, 0x0535
    10ba:	0e 94 99 07 	call	0xf32	; 0xf32 <_Z11makeitrighti>
		x=path[0];						
    10be:	f7 01       	movw	r30, r14
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	90 93 35 05 	sts	0x0535, r25
    10c8:	80 93 34 05 	sts	0x0534, r24
		while(1)
		{

			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z14ADC_Conversionh>
    10d2:	80 93 32 05 	sts	0x0532, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z14ADC_Conversionh>
    10dc:	80 93 31 05 	sts	0x0531, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z14ADC_Conversionh>
    10e6:	80 93 30 05 	sts	0x0530, r24
			//print_sensor(1,1,2);
			sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    10ea:	8b e0       	ldi	r24, 0x0B	; 11
    10ec:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z14ADC_Conversionh>
    10f0:	80 93 3d 05 	sts	0x053D, r24
			value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calculated in a variable "value".
    10f4:	0e 94 72 06 	call	0xce4	; 0xce4 <_Z23Sharp_GP2D12_estimationh>
    10f8:	90 93 3c 05 	sts	0x053C, r25
    10fc:	80 93 3b 05 	sts	0x053B, r24
			if(value>80 && value<130)						//if the distance is between 80 and 130 detection of black box in path
    1100:	81 55       	subi	r24, 0x51	; 81
    1102:	90 40       	sbci	r25, 0x00	; 0
    1104:	81 33       	cpi	r24, 0x31	; 49
    1106:	91 05       	cpc	r25, r1
    1108:	08 f0       	brcs	.+2      	; 0x110c <main+0x114>
    110a:	87 c0       	rjmp	.+270    	; 0x121a <main+0x222>
			{
				stop();
    110c:	0e 94 97 05 	call	0xb2e	; 0xb2e <_Z4stopv>
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	9f ef       	ldi	r25, 0xFF	; 255
    1114:	ac e2       	ldi	r26, 0x2C	; 44
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	90 40       	sbci	r25, 0x00	; 0
    111a:	a0 40       	sbci	r26, 0x00	; 0
    111c:	e1 f7       	brne	.-8      	; 0x1116 <main+0x11e>
    111e:	00 c0       	rjmp	.+0      	; 0x1120 <main+0x128>
    1120:	00 00       	nop
				_delay_ms(1000);
				if(count==tot-1)							//if black box is at the destination selected
    1122:	20 91 38 05 	lds	r18, 0x0538
    1126:	30 91 39 05 	lds	r19, 0x0539
    112a:	80 91 30 09 	lds	r24, 0x0930
    112e:	90 91 31 09 	lds	r25, 0x0931
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	82 17       	cp	r24, r18
    1136:	93 07       	cpc	r25, r19
    1138:	09 f0       	breq	.+2      	; 0x113c <main+0x144>
    113a:	40 c0       	rjmp	.+128    	; 0x11bc <main+0x1c4>
    113c:	13 c0       	rjmp	.+38     	; 0x1164 <main+0x16c>
				{
					for(int i=0;i<16;i++)
					{
						for(int j=0;j<4;j++)
						{
							if(val[i][j]==s_dest)
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	c8 17       	cp	r28, r24
    1144:	d9 07       	cpc	r29, r25
    1146:	11 f4       	brne	.+4      	; 0x114c <main+0x154>
							val[i][j]=0;
    1148:	11 82       	std	Z+1, r1	; 0x01
    114a:	10 82       	st	Z, r1
				_delay_ms(1000);
				if(count==tot-1)							//if black box is at the destination selected
				{
					for(int i=0;i<16;i++)
					{
						for(int j=0;j<4;j++)
    114c:	2f 5f       	subi	r18, 0xFF	; 255
    114e:	3f 4f       	sbci	r19, 0xFF	; 255
    1150:	32 96       	adiw	r30, 0x02	; 2
    1152:	24 30       	cpi	r18, 0x04	; 4
    1154:	31 05       	cpc	r19, r1
    1156:	99 f7       	brne	.-26     	; 0x113e <main+0x146>
			{
				stop();
				_delay_ms(1000);
				if(count==tot-1)							//if black box is at the destination selected
				{
					for(int i=0;i<16;i++)
    1158:	4f 5f       	subi	r20, 0xFF	; 255
    115a:	5f 4f       	sbci	r21, 0xFF	; 255
    115c:	40 31       	cpi	r20, 0x10	; 16
    115e:	51 05       	cpc	r21, r1
    1160:	11 f4       	brne	.+4      	; 0x1166 <main+0x16e>
    1162:	0d c0       	rjmp	.+26     	; 0x117e <main+0x186>
			value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calculated in a variable "value".
			if(value>80 && value<130)						//if the distance is between 80 and 130 detection of black box in path
			{
				stop();
				_delay_ms(1000);
				if(count==tot-1)							//if black box is at the destination selected
    1164:	a1 01       	movw	r20, r2
}


//Main Function

int main(void)
    1166:	fa 01       	movw	r30, r20
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	e0 50       	subi	r30, 0x00	; 0
    1176:	fe 4f       	sbci	r31, 0xFE	; 254
    1178:	2d 2d       	mov	r18, r13
    117a:	3c 2d       	mov	r19, r12
    117c:	e0 cf       	rjmp	.-64     	; 0x113e <main+0x146>
						{
							if(val[i][j]==s_dest)
							val[i][j]=0;
						}
					}
					lcd_print(2,5,s_dest,2);
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	65 e0       	ldi	r22, 0x05	; 5
    1182:	ae 01       	movw	r20, r28
    1184:	22 e0       	ldi	r18, 0x02	; 2
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
					rem(s_dest); //removing the node that have black box in it implemented in djikstra.cpp
    118c:	88 2d       	mov	r24, r8
    118e:	95 2d       	mov	r25, r5
    1190:	0e 94 3a 02 	call	0x474	; 0x474 <_Z3remi>
					current=original[count-1];
    1194:	80 91 38 05 	lds	r24, 0x0538
    1198:	90 91 39 05 	lds	r25, 0x0539
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	86 0d       	add	r24, r6
    11a4:	97 1d       	adc	r25, r7
    11a6:	dc 01       	movw	r26, r24
    11a8:	0d 91       	ld	r16, X+
    11aa:	1c 91       	ld	r17, X
					lcd_print(2,8,original[count-1],2);
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	68 e0       	ldi	r22, 0x08	; 8
    11b0:	a8 01       	movw	r20, r16
    11b2:	22 e0       	ldi	r18, 0x02	; 2
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
    11ba:	b8 c1       	rjmp	.+880    	; 0x152c <main+0x534>
				}
				else        //black debris detected in path(not at destination)
				{	
					lcd_print(2,5,original[count],2);
    11bc:	c9 01       	movw	r24, r18
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	86 0d       	add	r24, r6
    11c4:	97 1d       	adc	r25, r7
    11c6:	fc 01       	movw	r30, r24
    11c8:	40 81       	ld	r20, Z
    11ca:	51 81       	ldd	r21, Z+1	; 0x01
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	65 e0       	ldi	r22, 0x05	; 5
    11d0:	22 e0       	ldi	r18, 0x02	; 2
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
					rem(original[count]);
    11d8:	80 91 38 05 	lds	r24, 0x0538
    11dc:	90 91 39 05 	lds	r25, 0x0539
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	86 0d       	add	r24, r6
    11e6:	97 1d       	adc	r25, r7
    11e8:	dc 01       	movw	r26, r24
    11ea:	8d 91       	ld	r24, X+
    11ec:	9c 91       	ld	r25, X
    11ee:	0e 94 3a 02 	call	0x474	; 0x474 <_Z3remi>
					current=original[count-1];
    11f2:	80 91 38 05 	lds	r24, 0x0538
    11f6:	90 91 39 05 	lds	r25, 0x0539
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	86 0d       	add	r24, r6
    1202:	97 1d       	adc	r25, r7
    1204:	fc 01       	movw	r30, r24
    1206:	00 81       	ld	r16, Z
    1208:	11 81       	ldd	r17, Z+1	; 0x01
					lcd_print(2,8,original[count-1],2);
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	68 e0       	ldi	r22, 0x08	; 8
    120e:	a8 01       	movw	r20, r16
    1210:	22 e0       	ldi	r18, 0x02	; 2
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
    1218:	89 c1       	rjmp	.+786    	; 0x152c <main+0x534>
				}
				break;
			}
			
			if(Center_white_line<0x15 && Left_white_line<0x15 && Right_white_line<0x15) //when all sensors are on white
    121a:	80 91 31 05 	lds	r24, 0x0531
    121e:	85 31       	cpi	r24, 0x15	; 21
    1220:	90 f5       	brcc	.+100    	; 0x1286 <main+0x28e>
    1222:	90 91 32 05 	lds	r25, 0x0532
    1226:	95 31       	cpi	r25, 0x15	; 21
    1228:	70 f5       	brcc	.+92     	; 0x1286 <main+0x28e>
    122a:	90 91 30 05 	lds	r25, 0x0530
    122e:	95 31       	cpi	r25, 0x15	; 21
    1230:	50 f5       	brcc	.+84     	; 0x1286 <main+0x28e>
			{
				if (flag==1)
    1232:	80 91 33 05 	lds	r24, 0x0533
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	31 f4       	brne	.+12     	; 0x1246 <main+0x24e>
				{
					forward();
    123a:	0e 94 77 05 	call	0xaee	; 0xaee <_Z7forwardv>
					velocity(250,250);
    123e:	8a ef       	ldi	r24, 0xFA	; 250
    1240:	6a ef       	ldi	r22, 0xFA	; 250
    1242:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z8velocityhh>
				}
				if (flag==2)
    1246:	80 91 33 05 	lds	r24, 0x0533
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	31 f4       	brne	.+12     	; 0x125a <main+0x262>
				{
					forward();
    124e:	0e 94 77 05 	call	0xaee	; 0xaee <_Z7forwardv>
					velocity(170,250);
    1252:	8a ea       	ldi	r24, 0xAA	; 170
    1254:	6a ef       	ldi	r22, 0xFA	; 250
    1256:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z8velocityhh>
				}
				if (flag==3)
    125a:	80 91 33 05 	lds	r24, 0x0533
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	31 f4       	brne	.+12     	; 0x126e <main+0x276>
				{
					forward();
    1262:	0e 94 77 05 	call	0xaee	; 0xaee <_Z7forwardv>
					velocity(250,170);
    1266:	8a ef       	ldi	r24, 0xFA	; 250
    1268:	6a ea       	ldi	r22, 0xAA	; 170
    126a:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z8velocityhh>
				}
				if(flag==4)
    126e:	80 91 33 05 	lds	r24, 0x0533
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	09 f0       	breq	.+2      	; 0x1278 <main+0x280>
    1276:	2a cf       	rjmp	.-428    	; 0x10cc <main+0xd4>
				{
					forward();
    1278:	0e 94 77 05 	call	0xaee	; 0xaee <_Z7forwardv>
					velocity(250,250);
    127c:	8a ef       	ldi	r24, 0xFA	; 250
    127e:	6a ef       	ldi	r22, 0xFA	; 250
    1280:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z8velocityhh>
    1284:	23 cf       	rjmp	.-442    	; 0x10cc <main+0xd4>
				}

			}
			
			else if(Center_white_line>0x15 && Left_white_line<0x15 && Right_white_line<0x15)//center sensed color is black
    1286:	86 31       	cpi	r24, 0x16	; 22
    1288:	90 f0       	brcs	.+36     	; 0x12ae <main+0x2b6>
    128a:	90 91 32 05 	lds	r25, 0x0532
    128e:	95 31       	cpi	r25, 0x15	; 21
    1290:	70 f4       	brcc	.+28     	; 0x12ae <main+0x2b6>
    1292:	90 91 30 05 	lds	r25, 0x0530
    1296:	95 31       	cpi	r25, 0x15	; 21
    1298:	50 f4       	brcc	.+20     	; 0x12ae <main+0x2b6>
			{
				forward();
    129a:	0e 94 77 05 	call	0xaee	; 0xaee <_Z7forwardv>
				velocity(250,250);
    129e:	8a ef       	ldi	r24, 0xFA	; 250
    12a0:	6a ef       	ldi	r22, 0xFA	; 250
    12a2:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z8velocityhh>
				flag=1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 33 05 	sts	0x0533, r24
    12ac:	0f cf       	rjmp	.-482    	; 0x10cc <main+0xd4>
			}
			else if(Center_white_line<0x15 && Left_white_line>0x15 && Right_white_line<0x15)//left sensed color is black
    12ae:	85 31       	cpi	r24, 0x15	; 21
    12b0:	10 f5       	brcc	.+68     	; 0x12f6 <main+0x2fe>
    12b2:	90 91 32 05 	lds	r25, 0x0532
    12b6:	96 31       	cpi	r25, 0x16	; 22
    12b8:	70 f0       	brcs	.+28     	; 0x12d6 <main+0x2de>
    12ba:	20 91 30 05 	lds	r18, 0x0530
    12be:	25 31       	cpi	r18, 0x15	; 21
    12c0:	50 f4       	brcc	.+20     	; 0x12d6 <main+0x2de>
			{
				flag=2;
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	80 93 33 05 	sts	0x0533, r24
				forward();
    12c8:	0e 94 77 05 	call	0xaee	; 0xaee <_Z7forwardv>
				velocity(170,250);
    12cc:	8a ea       	ldi	r24, 0xAA	; 170
    12ce:	6a ef       	ldi	r22, 0xFA	; 250
    12d0:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z8velocityhh>
    12d4:	fb ce       	rjmp	.-522    	; 0x10cc <main+0xd4>
			}
			else if(Center_white_line<0x15 && Left_white_line<0x15 && Right_white_line>0x15)//right sensed color is black
    12d6:	95 31       	cpi	r25, 0x15	; 21
    12d8:	70 f4       	brcc	.+28     	; 0x12f6 <main+0x2fe>
    12da:	90 91 30 05 	lds	r25, 0x0530
    12de:	96 31       	cpi	r25, 0x16	; 22
    12e0:	50 f0       	brcs	.+20     	; 0x12f6 <main+0x2fe>
			{
				flag=3;
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	80 93 33 05 	sts	0x0533, r24
				forward();
    12e8:	0e 94 77 05 	call	0xaee	; 0xaee <_Z7forwardv>
				velocity(250,170);
    12ec:	8a ef       	ldi	r24, 0xFA	; 250
    12ee:	6a ea       	ldi	r22, 0xAA	; 170
    12f0:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z8velocityhh>
    12f4:	eb ce       	rjmp	.-554    	; 0x10cc <main+0xd4>
			}
			else if((Center_white_line>0x15 && Left_white_line>0x15 && Right_white_line>0x15)||(Center_white_line>0x15 && Left_white_line>0x15 && Right_white_line<0x15)||(Center_white_line>0x15 && Left_white_line<0x15 && Right_white_line>0x15)) //when all the three sensors are on black or center_sensor with any one of left or right sensor is on black  
    12f6:	86 31       	cpi	r24, 0x16	; 22
    12f8:	08 f4       	brcc	.+2      	; 0x12fc <main+0x304>
    12fa:	e8 ce       	rjmp	.-560    	; 0x10cc <main+0xd4>
    12fc:	80 91 32 05 	lds	r24, 0x0532
    1300:	86 31       	cpi	r24, 0x16	; 22
    1302:	20 f0       	brcs	.+8      	; 0x130c <main+0x314>
    1304:	90 91 30 05 	lds	r25, 0x0530
    1308:	95 31       	cpi	r25, 0x15	; 21
    130a:	41 f4       	brne	.+16     	; 0x131c <main+0x324>
    130c:	85 31       	cpi	r24, 0x15	; 21
    130e:	08 f0       	brcs	.+2      	; 0x1312 <main+0x31a>
    1310:	dd ce       	rjmp	.-582    	; 0x10cc <main+0xd4>
    1312:	80 91 30 05 	lds	r24, 0x0530
    1316:	86 31       	cpi	r24, 0x16	; 22
    1318:	08 f4       	brcc	.+2      	; 0x131c <main+0x324>
    131a:	d8 ce       	rjmp	.-592    	; 0x10cc <main+0xd4>
			{
				flag=4;
    131c:	90 92 33 05 	sts	0x0533, r9

				lcd_print(2,1,path[count],2);
    1320:	80 91 38 05 	lds	r24, 0x0538
    1324:	90 91 39 05 	lds	r25, 0x0539
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	8e 0d       	add	r24, r14
    132e:	9f 1d       	adc	r25, r15
    1330:	dc 01       	movw	r26, r24
    1332:	4d 91       	ld	r20, X+
    1334:	5c 91       	ld	r21, X
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	22 e0       	ldi	r18, 0x02	; 2
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
				if(path[count]==1)//it is left
    1342:	20 91 38 05 	lds	r18, 0x0538
    1346:	30 91 39 05 	lds	r19, 0x0539
    134a:	c9 01       	movw	r24, r18
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	8e 0d       	add	r24, r14
    1352:	9f 1d       	adc	r25, r15
    1354:	fc 01       	movw	r30, r24
    1356:	80 81       	ld	r24, Z
    1358:	91 81       	ldd	r25, Z+1	; 0x01
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	91 05       	cpc	r25, r1
    135e:	a1 f4       	brne	.+40     	; 0x1388 <main+0x390>
				{
					x+=path[count];
    1360:	80 91 34 05 	lds	r24, 0x0534
    1364:	90 91 35 05 	lds	r25, 0x0535
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	90 93 35 05 	sts	0x0535, r25
    136e:	80 93 34 05 	sts	0x0534, r24
					forward_mm(75); //Moves robot forward 75mm
    1372:	8b e4       	ldi	r24, 0x4B	; 75
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 12 06 	call	0xc24	; 0xc24 <_Z10forward_mmj>
					left_degrees(45); //Rotate robot left by 45 degrees
    137a:	8d e2       	ldi	r24, 0x2D	; 45
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z12left_degreesj>
					left_count();	//Rotate robot left till it reaches a black line
    1382:	0e 94 b2 06 	call	0xd64	; 0xd64 <_Z10left_countv>
    1386:	c8 c0       	rjmp	.+400    	; 0x1518 <main+0x520>
					//j++;
				}
				else if(path[count]==4)//it is straight
    1388:	84 30       	cpi	r24, 0x04	; 4
    138a:	91 05       	cpc	r25, r1
    138c:	71 f4       	brne	.+28     	; 0x13aa <main+0x3b2>
				{
					x+=path[count];
    138e:	80 91 34 05 	lds	r24, 0x0534
    1392:	90 91 35 05 	lds	r25, 0x0535
    1396:	04 96       	adiw	r24, 0x04	; 4
    1398:	90 93 35 05 	sts	0x0535, r25
    139c:	80 93 34 05 	sts	0x0534, r24
					//j++;
					forward_mm(45); //Moves robot forward 45mm
    13a0:	8d e2       	ldi	r24, 0x2D	; 45
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 12 06 	call	0xc24	; 0xc24 <_Z10forward_mmj>
    13a8:	b7 c0       	rjmp	.+366    	; 0x1518 <main+0x520>
				}
				else if(path[count]==3)//it is right
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	91 05       	cpc	r25, r1
    13ae:	f9 f4       	brne	.+62     	; 0x13ee <main+0x3f6>
				{
					x+=path[count];
    13b0:	80 91 34 05 	lds	r24, 0x0534
    13b4:	90 91 35 05 	lds	r25, 0x0535
    13b8:	03 96       	adiw	r24, 0x03	; 3
    13ba:	90 93 35 05 	sts	0x0535, r25
    13be:	80 93 34 05 	sts	0x0534, r24
					forward_mm(75); //Moves robot forward 75mm
    13c2:	8b e4       	ldi	r24, 0x4B	; 75
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 12 06 	call	0xc24	; 0xc24 <_Z10forward_mmj>
					right_degrees(45); //Rotate robot right by 45 degrees
    13ca:	8d e2       	ldi	r24, 0x2D	; 45
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 33 06 	call	0xc66	; 0xc66 <_Z13right_degreesj>
					right_count();		//Rotate robot right till it reaches a black line
    13d2:	0e 94 c2 06 	call	0xd84	; 0xd84 <_Z11right_countv>
					stop();
    13d6:	0e 94 97 05 	call	0xb2e	; 0xb2e <_Z4stopv>
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	9f ef       	ldi	r25, 0xFF	; 255
    13de:	ac e2       	ldi	r26, 0x2C	; 44
    13e0:	81 50       	subi	r24, 0x01	; 1
    13e2:	90 40       	sbci	r25, 0x00	; 0
    13e4:	a0 40       	sbci	r26, 0x00	; 0
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <main+0x3e8>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <main+0x3f2>
    13ea:	00 00       	nop
    13ec:	95 c0       	rjmp	.+298    	; 0x1518 <main+0x520>
					_delay_ms(1000);
				}
				else if(path[count]==2)//it is back
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	91 05       	cpc	r25, r1
    13f2:	a1 f4       	brne	.+40     	; 0x141c <main+0x424>
				{
					x+=path[count];
    13f4:	80 91 34 05 	lds	r24, 0x0534
    13f8:	90 91 35 05 	lds	r25, 0x0535
    13fc:	02 96       	adiw	r24, 0x02	; 2
    13fe:	90 93 35 05 	sts	0x0535, r25
    1402:	80 93 34 05 	sts	0x0534, r24
					forward_mm(75); //Moves robot forward 75mm
    1406:	8b e4       	ldi	r24, 0x4B	; 75
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 12 06 	call	0xc24	; 0xc24 <_Z10forward_mmj>
					right_degrees(130); //Rotate robot right by 130 degrees
    140e:	82 e8       	ldi	r24, 0x82	; 130
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 33 06 	call	0xc66	; 0xc66 <_Z13right_degreesj>
					right_count();		//Rotate robot right till it reaches a black line
    1416:	0e 94 c2 06 	call	0xd84	; 0xd84 <_Z11right_countv>
    141a:	7e c0       	rjmp	.+252    	; 0x1518 <main+0x520>
				}
				else if(count==tot-1)//destination is reached
    141c:	80 91 30 09 	lds	r24, 0x0930
    1420:	90 91 31 09 	lds	r25, 0x0931
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	28 17       	cp	r18, r24
    1428:	39 07       	cpc	r19, r25
    142a:	09 f0       	breq	.+2      	; 0x142e <main+0x436>
    142c:	75 c0       	rjmp	.+234    	; 0x1518 <main+0x520>
				{
					lcd_print(2,12,x,2);
    142e:	40 91 34 05 	lds	r20, 0x0534
    1432:	50 91 35 05 	lds	r21, 0x0535
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	6c e0       	ldi	r22, 0x0C	; 12
    143a:	22 e0       	ldi	r18, 0x02	; 2
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
    1442:	28 e0       	ldi	r18, 0x08	; 8
    1444:	32 e0       	ldi	r19, 0x02	; 2
    1446:	a0 e8       	ldi	r26, 0x80	; 128
    1448:	b2 e0       	ldi	r27, 0x02	; 2
					for(int i=0;i<16;i++)
    144a:	a1 01       	movw	r20, r2
    144c:	13 c0       	rjmp	.+38     	; 0x1474 <main+0x47c>
					{
						for(int j=0;j<4;j++)
						{
							if(val[i][j]==s_dest)
    144e:	81 91       	ld	r24, Z+
    1450:	91 91       	ld	r25, Z+
    1452:	c8 17       	cp	r28, r24
    1454:	d9 07       	cpc	r29, r25
    1456:	19 f4       	brne	.+6      	; 0x145e <main+0x466>
							search[i]=0;
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	1c 92       	st	X, r1
    145c:	1e 92       	st	-X, r1
				else if(count==tot-1)//destination is reached
				{
					lcd_print(2,12,x,2);
					for(int i=0;i<16;i++)
					{
						for(int j=0;j<4;j++)
    145e:	e2 17       	cp	r30, r18
    1460:	f3 07       	cpc	r31, r19
    1462:	a9 f7       	brne	.-22     	; 0x144e <main+0x456>
					right_count();		//Rotate robot right till it reaches a black line
				}
				else if(count==tot-1)//destination is reached
				{
					lcd_print(2,12,x,2);
					for(int i=0;i<16;i++)
    1464:	4f 5f       	subi	r20, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
    1468:	28 5f       	subi	r18, 0xF8	; 248
    146a:	3f 4f       	sbci	r19, 0xFF	; 255
    146c:	12 96       	adiw	r26, 0x02	; 2
    146e:	40 31       	cpi	r20, 0x10	; 16
    1470:	51 05       	cpc	r21, r1
    1472:	51 f0       	breq	.+20     	; 0x1488 <main+0x490>
}


//Main Function

int main(void)
    1474:	fa 01       	movw	r30, r20
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	e0 50       	subi	r30, 0x00	; 0
    1484:	fe 4f       	sbci	r31, 0xFE	; 254
    1486:	e3 cf       	rjmp	.-58     	; 0x144e <main+0x456>
						{
							if(val[i][j]==s_dest)
							search[i]=0;
						}
					}
					forward_mm(75); //Moves robot forward 75mm
    1488:	8b e4       	ldi	r24, 0x4B	; 75
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 12 06 	call	0xc24	; 0xc24 <_Z10forward_mmj>

					box=0;
    1490:	30 92 37 05 	sts	0x0537, r3
    1494:	20 92 36 05 	sts	0x0536, r2
					right_degrees(45); //Rotate robot right by 90 degrees
    1498:	8d e2       	ldi	r24, 0x2D	; 45
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 33 06 	call	0xc66	; 0xc66 <_Z13right_degreesj>
					right_count();
    14a0:	0e 94 c2 06 	call	0xd84	; 0xd84 <_Z11right_countv>
					right_degrees(45); //Rotate robot right by 90 degrees
    14a4:	8d e2       	ldi	r24, 0x2D	; 45
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 33 06 	call	0xc66	; 0xc66 <_Z13right_degreesj>
					right_count();
    14ac:	0e 94 c2 06 	call	0xd84	; 0xd84 <_Z11right_countv>
					stop();
    14b0:	0e 94 97 05 	call	0xb2e	; 0xb2e <_Z4stopv>
					for(unsigned int j=0;j<box;j++)//using buzzer to indicate white debris detected
    14b4:	80 91 36 05 	lds	r24, 0x0536
    14b8:	90 91 37 05 	lds	r25, 0x0537
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	f9 f0       	breq	.+62     	; 0x14fe <main+0x506>
    14c0:	e1 01       	movw	r28, r2
					{
						buzzer_on();
    14c2:	0e 94 6f 05 	call	0xade	; 0xade <_Z9buzzer_onv>
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	a9 e5       	ldi	r26, 0x59	; 89
    14cc:	81 50       	subi	r24, 0x01	; 1
    14ce:	90 40       	sbci	r25, 0x00	; 0
    14d0:	a0 40       	sbci	r26, 0x00	; 0
    14d2:	e1 f7       	brne	.-8      	; 0x14cc <main+0x4d4>
    14d4:	00 c0       	rjmp	.+0      	; 0x14d6 <main+0x4de>
    14d6:	00 00       	nop
						_delay_ms(2000);
						buzzer_off();
    14d8:	0e 94 73 05 	call	0xae6	; 0xae6 <_Z10buzzer_offv>
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	9f e7       	ldi	r25, 0x7F	; 127
    14e0:	a6 e1       	ldi	r26, 0x16	; 22
    14e2:	81 50       	subi	r24, 0x01	; 1
    14e4:	90 40       	sbci	r25, 0x00	; 0
    14e6:	a0 40       	sbci	r26, 0x00	; 0
    14e8:	e1 f7       	brne	.-8      	; 0x14e2 <main+0x4ea>
    14ea:	00 c0       	rjmp	.+0      	; 0x14ec <main+0x4f4>
    14ec:	00 00       	nop
					right_degrees(45); //Rotate robot right by 90 degrees
					right_count();
					right_degrees(45); //Rotate robot right by 90 degrees
					right_count();
					stop();
					for(unsigned int j=0;j<box;j++)//using buzzer to indicate white debris detected
    14ee:	21 96       	adiw	r28, 0x01	; 1
    14f0:	80 91 36 05 	lds	r24, 0x0536
    14f4:	90 91 37 05 	lds	r25, 0x0537
    14f8:	c8 17       	cp	r28, r24
    14fa:	d9 07       	cpc	r29, r25
    14fc:	10 f3       	brcs	.-60     	; 0x14c2 <main+0x4ca>
						buzzer_on();
						_delay_ms(2000);
						buzzer_off();
						_delay_ms(500);
					}
					current=path[count];
    14fe:	80 91 38 05 	lds	r24, 0x0538
    1502:	90 91 39 05 	lds	r25, 0x0539
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	8e 0d       	add	r24, r14
    150c:	9f 1d       	adc	r25, r15
    150e:	dc 01       	movw	r26, r24
    1510:	0d 91       	ld	r16, X+
    1512:	1c 91       	ld	r17, X
    1514:	11 97       	sbiw	r26, 0x01	; 1
					//makeitright(x);
					break;
    1516:	0a c0       	rjmp	.+20     	; 0x152c <main+0x534>
				}
				count++;
    1518:	80 91 38 05 	lds	r24, 0x0538
    151c:	90 91 39 05 	lds	r25, 0x0539
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	90 93 39 05 	sts	0x0539, r25
    1526:	80 93 38 05 	sts	0x0538, r24
    152a:	d0 cd       	rjmp	.-1120   	; 0x10cc <main+0xd4>
	lcd_init();
	flag=4;
	x=0;
	int etc=0,s_dest=0;					// "etc" - variable for first traversal from start position
	unsigned int current=49;			//49 - node number given to the start point
	for(int k=0;k<100;k++,etc++)		//max number bot can change destinations
    152c:	08 94       	sec
    152e:	a1 1c       	adc	r10, r1
    1530:	b1 1c       	adc	r11, r1
    1532:	b4 e6       	ldi	r27, 0x64	; 100
    1534:	ab 16       	cp	r10, r27
    1536:	b1 04       	cpc	r11, r1
    1538:	09 f0       	breq	.+2      	; 0x153c <main+0x544>
    153a:	95 cd       	rjmp	.-1238   	; 0x1066 <main+0x6e>
		}


	}

}
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	8f 90       	pop	r8
    1558:	7f 90       	pop	r7
    155a:	6f 90       	pop	r6
    155c:	5f 90       	pop	r5
    155e:	4f 90       	pop	r4
    1560:	3f 90       	pop	r3
    1562:	2f 90       	pop	r2
    1564:	08 95       	ret

00001566 <__divsf3>:
    1566:	0c d0       	rcall	.+24     	; 0x1580 <__divsf3x>
    1568:	eb c0       	rjmp	.+470    	; 0x1740 <__fp_round>
    156a:	e3 d0       	rcall	.+454    	; 0x1732 <__fp_pscB>
    156c:	40 f0       	brcs	.+16     	; 0x157e <__divsf3+0x18>
    156e:	da d0       	rcall	.+436    	; 0x1724 <__fp_pscA>
    1570:	30 f0       	brcs	.+12     	; 0x157e <__divsf3+0x18>
    1572:	21 f4       	brne	.+8      	; 0x157c <__divsf3+0x16>
    1574:	5f 3f       	cpi	r21, 0xFF	; 255
    1576:	19 f0       	breq	.+6      	; 0x157e <__divsf3+0x18>
    1578:	cc c0       	rjmp	.+408    	; 0x1712 <__fp_inf>
    157a:	51 11       	cpse	r21, r1
    157c:	15 c1       	rjmp	.+554    	; 0x17a8 <__fp_szero>
    157e:	cf c0       	rjmp	.+414    	; 0x171e <__fp_nan>

00001580 <__divsf3x>:
    1580:	f0 d0       	rcall	.+480    	; 0x1762 <__fp_split3>
    1582:	98 f3       	brcs	.-26     	; 0x156a <__divsf3+0x4>

00001584 <__divsf3_pse>:
    1584:	99 23       	and	r25, r25
    1586:	c9 f3       	breq	.-14     	; 0x157a <__divsf3+0x14>
    1588:	55 23       	and	r21, r21
    158a:	b1 f3       	breq	.-20     	; 0x1578 <__divsf3+0x12>
    158c:	95 1b       	sub	r25, r21
    158e:	55 0b       	sbc	r21, r21
    1590:	bb 27       	eor	r27, r27
    1592:	aa 27       	eor	r26, r26
    1594:	62 17       	cp	r22, r18
    1596:	73 07       	cpc	r23, r19
    1598:	84 07       	cpc	r24, r20
    159a:	38 f0       	brcs	.+14     	; 0x15aa <__divsf3_pse+0x26>
    159c:	9f 5f       	subi	r25, 0xFF	; 255
    159e:	5f 4f       	sbci	r21, 0xFF	; 255
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	44 1f       	adc	r20, r20
    15a6:	aa 1f       	adc	r26, r26
    15a8:	a9 f3       	breq	.-22     	; 0x1594 <__divsf3_pse+0x10>
    15aa:	33 d0       	rcall	.+102    	; 0x1612 <__divsf3_pse+0x8e>
    15ac:	0e 2e       	mov	r0, r30
    15ae:	3a f0       	brmi	.+14     	; 0x15be <__divsf3_pse+0x3a>
    15b0:	e0 e8       	ldi	r30, 0x80	; 128
    15b2:	30 d0       	rcall	.+96     	; 0x1614 <__divsf3_pse+0x90>
    15b4:	91 50       	subi	r25, 0x01	; 1
    15b6:	50 40       	sbci	r21, 0x00	; 0
    15b8:	e6 95       	lsr	r30
    15ba:	00 1c       	adc	r0, r0
    15bc:	ca f7       	brpl	.-14     	; 0x15b0 <__divsf3_pse+0x2c>
    15be:	29 d0       	rcall	.+82     	; 0x1612 <__divsf3_pse+0x8e>
    15c0:	fe 2f       	mov	r31, r30
    15c2:	27 d0       	rcall	.+78     	; 0x1612 <__divsf3_pse+0x8e>
    15c4:	66 0f       	add	r22, r22
    15c6:	77 1f       	adc	r23, r23
    15c8:	88 1f       	adc	r24, r24
    15ca:	bb 1f       	adc	r27, r27
    15cc:	26 17       	cp	r18, r22
    15ce:	37 07       	cpc	r19, r23
    15d0:	48 07       	cpc	r20, r24
    15d2:	ab 07       	cpc	r26, r27
    15d4:	b0 e8       	ldi	r27, 0x80	; 128
    15d6:	09 f0       	breq	.+2      	; 0x15da <__divsf3_pse+0x56>
    15d8:	bb 0b       	sbc	r27, r27
    15da:	80 2d       	mov	r24, r0
    15dc:	bf 01       	movw	r22, r30
    15de:	ff 27       	eor	r31, r31
    15e0:	93 58       	subi	r25, 0x83	; 131
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	2a f0       	brmi	.+10     	; 0x15f0 <__divsf3_pse+0x6c>
    15e6:	9e 3f       	cpi	r25, 0xFE	; 254
    15e8:	51 05       	cpc	r21, r1
    15ea:	68 f0       	brcs	.+26     	; 0x1606 <__divsf3_pse+0x82>
    15ec:	92 c0       	rjmp	.+292    	; 0x1712 <__fp_inf>
    15ee:	dc c0       	rjmp	.+440    	; 0x17a8 <__fp_szero>
    15f0:	5f 3f       	cpi	r21, 0xFF	; 255
    15f2:	ec f3       	brlt	.-6      	; 0x15ee <__divsf3_pse+0x6a>
    15f4:	98 3e       	cpi	r25, 0xE8	; 232
    15f6:	dc f3       	brlt	.-10     	; 0x15ee <__divsf3_pse+0x6a>
    15f8:	86 95       	lsr	r24
    15fa:	77 95       	ror	r23
    15fc:	67 95       	ror	r22
    15fe:	b7 95       	ror	r27
    1600:	f7 95       	ror	r31
    1602:	9f 5f       	subi	r25, 0xFF	; 255
    1604:	c9 f7       	brne	.-14     	; 0x15f8 <__divsf3_pse+0x74>
    1606:	88 0f       	add	r24, r24
    1608:	91 1d       	adc	r25, r1
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	97 f9       	bld	r25, 7
    1610:	08 95       	ret
    1612:	e1 e0       	ldi	r30, 0x01	; 1
    1614:	66 0f       	add	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	88 1f       	adc	r24, r24
    161a:	bb 1f       	adc	r27, r27
    161c:	62 17       	cp	r22, r18
    161e:	73 07       	cpc	r23, r19
    1620:	84 07       	cpc	r24, r20
    1622:	ba 07       	cpc	r27, r26
    1624:	20 f0       	brcs	.+8      	; 0x162e <__divsf3_pse+0xaa>
    1626:	62 1b       	sub	r22, r18
    1628:	73 0b       	sbc	r23, r19
    162a:	84 0b       	sbc	r24, r20
    162c:	ba 0b       	sbc	r27, r26
    162e:	ee 1f       	adc	r30, r30
    1630:	88 f7       	brcc	.-30     	; 0x1614 <__divsf3_pse+0x90>
    1632:	e0 95       	com	r30
    1634:	08 95       	ret

00001636 <__fixsfsi>:
    1636:	04 d0       	rcall	.+8      	; 0x1640 <__fixunssfsi>
    1638:	68 94       	set
    163a:	b1 11       	cpse	r27, r1
    163c:	b5 c0       	rjmp	.+362    	; 0x17a8 <__fp_szero>
    163e:	08 95       	ret

00001640 <__fixunssfsi>:
    1640:	98 d0       	rcall	.+304    	; 0x1772 <__fp_splitA>
    1642:	88 f0       	brcs	.+34     	; 0x1666 <__fixunssfsi+0x26>
    1644:	9f 57       	subi	r25, 0x7F	; 127
    1646:	90 f0       	brcs	.+36     	; 0x166c <__fixunssfsi+0x2c>
    1648:	b9 2f       	mov	r27, r25
    164a:	99 27       	eor	r25, r25
    164c:	b7 51       	subi	r27, 0x17	; 23
    164e:	a0 f0       	brcs	.+40     	; 0x1678 <__fixunssfsi+0x38>
    1650:	d1 f0       	breq	.+52     	; 0x1686 <__fixunssfsi+0x46>
    1652:	66 0f       	add	r22, r22
    1654:	77 1f       	adc	r23, r23
    1656:	88 1f       	adc	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	1a f0       	brmi	.+6      	; 0x1662 <__fixunssfsi+0x22>
    165c:	ba 95       	dec	r27
    165e:	c9 f7       	brne	.-14     	; 0x1652 <__fixunssfsi+0x12>
    1660:	12 c0       	rjmp	.+36     	; 0x1686 <__fixunssfsi+0x46>
    1662:	b1 30       	cpi	r27, 0x01	; 1
    1664:	81 f0       	breq	.+32     	; 0x1686 <__fixunssfsi+0x46>
    1666:	9f d0       	rcall	.+318    	; 0x17a6 <__fp_zero>
    1668:	b1 e0       	ldi	r27, 0x01	; 1
    166a:	08 95       	ret
    166c:	9c c0       	rjmp	.+312    	; 0x17a6 <__fp_zero>
    166e:	67 2f       	mov	r22, r23
    1670:	78 2f       	mov	r23, r24
    1672:	88 27       	eor	r24, r24
    1674:	b8 5f       	subi	r27, 0xF8	; 248
    1676:	39 f0       	breq	.+14     	; 0x1686 <__fixunssfsi+0x46>
    1678:	b9 3f       	cpi	r27, 0xF9	; 249
    167a:	cc f3       	brlt	.-14     	; 0x166e <__fixunssfsi+0x2e>
    167c:	86 95       	lsr	r24
    167e:	77 95       	ror	r23
    1680:	67 95       	ror	r22
    1682:	b3 95       	inc	r27
    1684:	d9 f7       	brne	.-10     	; 0x167c <__fixunssfsi+0x3c>
    1686:	3e f4       	brtc	.+14     	; 0x1696 <__fixunssfsi+0x56>
    1688:	90 95       	com	r25
    168a:	80 95       	com	r24
    168c:	70 95       	com	r23
    168e:	61 95       	neg	r22
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	08 95       	ret

00001698 <__floatunsisf>:
    1698:	e8 94       	clt
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <__floatsisf+0x12>

0000169c <__floatsisf>:
    169c:	97 fb       	bst	r25, 7
    169e:	3e f4       	brtc	.+14     	; 0x16ae <__floatsisf+0x12>
    16a0:	90 95       	com	r25
    16a2:	80 95       	com	r24
    16a4:	70 95       	com	r23
    16a6:	61 95       	neg	r22
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	99 23       	and	r25, r25
    16b0:	a9 f0       	breq	.+42     	; 0x16dc <__floatsisf+0x40>
    16b2:	f9 2f       	mov	r31, r25
    16b4:	96 e9       	ldi	r25, 0x96	; 150
    16b6:	bb 27       	eor	r27, r27
    16b8:	93 95       	inc	r25
    16ba:	f6 95       	lsr	r31
    16bc:	87 95       	ror	r24
    16be:	77 95       	ror	r23
    16c0:	67 95       	ror	r22
    16c2:	b7 95       	ror	r27
    16c4:	f1 11       	cpse	r31, r1
    16c6:	f8 cf       	rjmp	.-16     	; 0x16b8 <__floatsisf+0x1c>
    16c8:	fa f4       	brpl	.+62     	; 0x1708 <__floatsisf+0x6c>
    16ca:	bb 0f       	add	r27, r27
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <__floatsisf+0x36>
    16ce:	60 ff       	sbrs	r22, 0
    16d0:	1b c0       	rjmp	.+54     	; 0x1708 <__floatsisf+0x6c>
    16d2:	6f 5f       	subi	r22, 0xFF	; 255
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 4f       	sbci	r24, 0xFF	; 255
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	16 c0       	rjmp	.+44     	; 0x1708 <__floatsisf+0x6c>
    16dc:	88 23       	and	r24, r24
    16de:	11 f0       	breq	.+4      	; 0x16e4 <__floatsisf+0x48>
    16e0:	96 e9       	ldi	r25, 0x96	; 150
    16e2:	11 c0       	rjmp	.+34     	; 0x1706 <__floatsisf+0x6a>
    16e4:	77 23       	and	r23, r23
    16e6:	21 f0       	breq	.+8      	; 0x16f0 <__floatsisf+0x54>
    16e8:	9e e8       	ldi	r25, 0x8E	; 142
    16ea:	87 2f       	mov	r24, r23
    16ec:	76 2f       	mov	r23, r22
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <__floatsisf+0x5e>
    16f0:	66 23       	and	r22, r22
    16f2:	71 f0       	breq	.+28     	; 0x1710 <__floatsisf+0x74>
    16f4:	96 e8       	ldi	r25, 0x86	; 134
    16f6:	86 2f       	mov	r24, r22
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	2a f0       	brmi	.+10     	; 0x1708 <__floatsisf+0x6c>
    16fe:	9a 95       	dec	r25
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	da f7       	brpl	.-10     	; 0x16fe <__floatsisf+0x62>
    1708:	88 0f       	add	r24, r24
    170a:	96 95       	lsr	r25
    170c:	87 95       	ror	r24
    170e:	97 f9       	bld	r25, 7
    1710:	08 95       	ret

00001712 <__fp_inf>:
    1712:	97 f9       	bld	r25, 7
    1714:	9f 67       	ori	r25, 0x7F	; 127
    1716:	80 e8       	ldi	r24, 0x80	; 128
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	08 95       	ret

0000171e <__fp_nan>:
    171e:	9f ef       	ldi	r25, 0xFF	; 255
    1720:	80 ec       	ldi	r24, 0xC0	; 192
    1722:	08 95       	ret

00001724 <__fp_pscA>:
    1724:	00 24       	eor	r0, r0
    1726:	0a 94       	dec	r0
    1728:	16 16       	cp	r1, r22
    172a:	17 06       	cpc	r1, r23
    172c:	18 06       	cpc	r1, r24
    172e:	09 06       	cpc	r0, r25
    1730:	08 95       	ret

00001732 <__fp_pscB>:
    1732:	00 24       	eor	r0, r0
    1734:	0a 94       	dec	r0
    1736:	12 16       	cp	r1, r18
    1738:	13 06       	cpc	r1, r19
    173a:	14 06       	cpc	r1, r20
    173c:	05 06       	cpc	r0, r21
    173e:	08 95       	ret

00001740 <__fp_round>:
    1740:	09 2e       	mov	r0, r25
    1742:	03 94       	inc	r0
    1744:	00 0c       	add	r0, r0
    1746:	11 f4       	brne	.+4      	; 0x174c <__fp_round+0xc>
    1748:	88 23       	and	r24, r24
    174a:	52 f0       	brmi	.+20     	; 0x1760 <__fp_round+0x20>
    174c:	bb 0f       	add	r27, r27
    174e:	40 f4       	brcc	.+16     	; 0x1760 <__fp_round+0x20>
    1750:	bf 2b       	or	r27, r31
    1752:	11 f4       	brne	.+4      	; 0x1758 <__fp_round+0x18>
    1754:	60 ff       	sbrs	r22, 0
    1756:	04 c0       	rjmp	.+8      	; 0x1760 <__fp_round+0x20>
    1758:	6f 5f       	subi	r22, 0xFF	; 255
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	08 95       	ret

00001762 <__fp_split3>:
    1762:	57 fd       	sbrc	r21, 7
    1764:	90 58       	subi	r25, 0x80	; 128
    1766:	44 0f       	add	r20, r20
    1768:	55 1f       	adc	r21, r21
    176a:	59 f0       	breq	.+22     	; 0x1782 <__fp_splitA+0x10>
    176c:	5f 3f       	cpi	r21, 0xFF	; 255
    176e:	71 f0       	breq	.+28     	; 0x178c <__fp_splitA+0x1a>
    1770:	47 95       	ror	r20

00001772 <__fp_splitA>:
    1772:	88 0f       	add	r24, r24
    1774:	97 fb       	bst	r25, 7
    1776:	99 1f       	adc	r25, r25
    1778:	61 f0       	breq	.+24     	; 0x1792 <__fp_splitA+0x20>
    177a:	9f 3f       	cpi	r25, 0xFF	; 255
    177c:	79 f0       	breq	.+30     	; 0x179c <__fp_splitA+0x2a>
    177e:	87 95       	ror	r24
    1780:	08 95       	ret
    1782:	12 16       	cp	r1, r18
    1784:	13 06       	cpc	r1, r19
    1786:	14 06       	cpc	r1, r20
    1788:	55 1f       	adc	r21, r21
    178a:	f2 cf       	rjmp	.-28     	; 0x1770 <__fp_split3+0xe>
    178c:	46 95       	lsr	r20
    178e:	f1 df       	rcall	.-30     	; 0x1772 <__fp_splitA>
    1790:	08 c0       	rjmp	.+16     	; 0x17a2 <__fp_splitA+0x30>
    1792:	16 16       	cp	r1, r22
    1794:	17 06       	cpc	r1, r23
    1796:	18 06       	cpc	r1, r24
    1798:	99 1f       	adc	r25, r25
    179a:	f1 cf       	rjmp	.-30     	; 0x177e <__fp_splitA+0xc>
    179c:	86 95       	lsr	r24
    179e:	71 05       	cpc	r23, r1
    17a0:	61 05       	cpc	r22, r1
    17a2:	08 94       	sec
    17a4:	08 95       	ret

000017a6 <__fp_zero>:
    17a6:	e8 94       	clt

000017a8 <__fp_szero>:
    17a8:	bb 27       	eor	r27, r27
    17aa:	66 27       	eor	r22, r22
    17ac:	77 27       	eor	r23, r23
    17ae:	cb 01       	movw	r24, r22
    17b0:	97 f9       	bld	r25, 7
    17b2:	08 95       	ret

000017b4 <__mulsf3>:
    17b4:	0b d0       	rcall	.+22     	; 0x17cc <__mulsf3x>
    17b6:	c4 cf       	rjmp	.-120    	; 0x1740 <__fp_round>
    17b8:	b5 df       	rcall	.-150    	; 0x1724 <__fp_pscA>
    17ba:	28 f0       	brcs	.+10     	; 0x17c6 <__mulsf3+0x12>
    17bc:	ba df       	rcall	.-140    	; 0x1732 <__fp_pscB>
    17be:	18 f0       	brcs	.+6      	; 0x17c6 <__mulsf3+0x12>
    17c0:	95 23       	and	r25, r21
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <__mulsf3+0x12>
    17c4:	a6 cf       	rjmp	.-180    	; 0x1712 <__fp_inf>
    17c6:	ab cf       	rjmp	.-170    	; 0x171e <__fp_nan>
    17c8:	11 24       	eor	r1, r1
    17ca:	ee cf       	rjmp	.-36     	; 0x17a8 <__fp_szero>

000017cc <__mulsf3x>:
    17cc:	ca df       	rcall	.-108    	; 0x1762 <__fp_split3>
    17ce:	a0 f3       	brcs	.-24     	; 0x17b8 <__mulsf3+0x4>

000017d0 <__mulsf3_pse>:
    17d0:	95 9f       	mul	r25, r21
    17d2:	d1 f3       	breq	.-12     	; 0x17c8 <__mulsf3+0x14>
    17d4:	95 0f       	add	r25, r21
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	55 1f       	adc	r21, r21
    17da:	62 9f       	mul	r22, r18
    17dc:	f0 01       	movw	r30, r0
    17de:	72 9f       	mul	r23, r18
    17e0:	bb 27       	eor	r27, r27
    17e2:	f0 0d       	add	r31, r0
    17e4:	b1 1d       	adc	r27, r1
    17e6:	63 9f       	mul	r22, r19
    17e8:	aa 27       	eor	r26, r26
    17ea:	f0 0d       	add	r31, r0
    17ec:	b1 1d       	adc	r27, r1
    17ee:	aa 1f       	adc	r26, r26
    17f0:	64 9f       	mul	r22, r20
    17f2:	66 27       	eor	r22, r22
    17f4:	b0 0d       	add	r27, r0
    17f6:	a1 1d       	adc	r26, r1
    17f8:	66 1f       	adc	r22, r22
    17fa:	82 9f       	mul	r24, r18
    17fc:	22 27       	eor	r18, r18
    17fe:	b0 0d       	add	r27, r0
    1800:	a1 1d       	adc	r26, r1
    1802:	62 1f       	adc	r22, r18
    1804:	73 9f       	mul	r23, r19
    1806:	b0 0d       	add	r27, r0
    1808:	a1 1d       	adc	r26, r1
    180a:	62 1f       	adc	r22, r18
    180c:	83 9f       	mul	r24, r19
    180e:	a0 0d       	add	r26, r0
    1810:	61 1d       	adc	r22, r1
    1812:	22 1f       	adc	r18, r18
    1814:	74 9f       	mul	r23, r20
    1816:	33 27       	eor	r19, r19
    1818:	a0 0d       	add	r26, r0
    181a:	61 1d       	adc	r22, r1
    181c:	23 1f       	adc	r18, r19
    181e:	84 9f       	mul	r24, r20
    1820:	60 0d       	add	r22, r0
    1822:	21 1d       	adc	r18, r1
    1824:	82 2f       	mov	r24, r18
    1826:	76 2f       	mov	r23, r22
    1828:	6a 2f       	mov	r22, r26
    182a:	11 24       	eor	r1, r1
    182c:	9f 57       	subi	r25, 0x7F	; 127
    182e:	50 40       	sbci	r21, 0x00	; 0
    1830:	8a f0       	brmi	.+34     	; 0x1854 <__mulsf3_pse+0x84>
    1832:	e1 f0       	breq	.+56     	; 0x186c <__mulsf3_pse+0x9c>
    1834:	88 23       	and	r24, r24
    1836:	4a f0       	brmi	.+18     	; 0x184a <__mulsf3_pse+0x7a>
    1838:	ee 0f       	add	r30, r30
    183a:	ff 1f       	adc	r31, r31
    183c:	bb 1f       	adc	r27, r27
    183e:	66 1f       	adc	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	88 1f       	adc	r24, r24
    1844:	91 50       	subi	r25, 0x01	; 1
    1846:	50 40       	sbci	r21, 0x00	; 0
    1848:	a9 f7       	brne	.-22     	; 0x1834 <__mulsf3_pse+0x64>
    184a:	9e 3f       	cpi	r25, 0xFE	; 254
    184c:	51 05       	cpc	r21, r1
    184e:	70 f0       	brcs	.+28     	; 0x186c <__mulsf3_pse+0x9c>
    1850:	60 cf       	rjmp	.-320    	; 0x1712 <__fp_inf>
    1852:	aa cf       	rjmp	.-172    	; 0x17a8 <__fp_szero>
    1854:	5f 3f       	cpi	r21, 0xFF	; 255
    1856:	ec f3       	brlt	.-6      	; 0x1852 <__mulsf3_pse+0x82>
    1858:	98 3e       	cpi	r25, 0xE8	; 232
    185a:	dc f3       	brlt	.-10     	; 0x1852 <__mulsf3_pse+0x82>
    185c:	86 95       	lsr	r24
    185e:	77 95       	ror	r23
    1860:	67 95       	ror	r22
    1862:	b7 95       	ror	r27
    1864:	f7 95       	ror	r31
    1866:	e7 95       	ror	r30
    1868:	9f 5f       	subi	r25, 0xFF	; 255
    186a:	c1 f7       	brne	.-16     	; 0x185c <__mulsf3_pse+0x8c>
    186c:	fe 2b       	or	r31, r30
    186e:	88 0f       	add	r24, r24
    1870:	91 1d       	adc	r25, r1
    1872:	96 95       	lsr	r25
    1874:	87 95       	ror	r24
    1876:	97 f9       	bld	r25, 7
    1878:	08 95       	ret

0000187a <pow>:
    187a:	fa 01       	movw	r30, r20
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	30 96       	adiw	r30, 0x00	; 0
    1882:	21 05       	cpc	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	99 f1       	breq	.+102    	; 0x18ee <pow+0x74>
    1888:	61 15       	cp	r22, r1
    188a:	71 05       	cpc	r23, r1
    188c:	61 f4       	brne	.+24     	; 0x18a6 <pow+0x2c>
    188e:	80 38       	cpi	r24, 0x80	; 128
    1890:	bf e3       	ldi	r27, 0x3F	; 63
    1892:	9b 07       	cpc	r25, r27
    1894:	49 f1       	breq	.+82     	; 0x18e8 <pow+0x6e>
    1896:	68 94       	set
    1898:	90 38       	cpi	r25, 0x80	; 128
    189a:	81 05       	cpc	r24, r1
    189c:	61 f0       	breq	.+24     	; 0x18b6 <pow+0x3c>
    189e:	80 38       	cpi	r24, 0x80	; 128
    18a0:	bf ef       	ldi	r27, 0xFF	; 255
    18a2:	9b 07       	cpc	r25, r27
    18a4:	41 f0       	breq	.+16     	; 0x18b6 <pow+0x3c>
    18a6:	99 23       	and	r25, r25
    18a8:	42 f5       	brpl	.+80     	; 0x18fa <pow+0x80>
    18aa:	ff 3f       	cpi	r31, 0xFF	; 255
    18ac:	e1 05       	cpc	r30, r1
    18ae:	31 05       	cpc	r19, r1
    18b0:	21 05       	cpc	r18, r1
    18b2:	11 f1       	breq	.+68     	; 0x18f8 <pow+0x7e>
    18b4:	e8 94       	clt
    18b6:	08 94       	sec
    18b8:	e7 95       	ror	r30
    18ba:	d9 01       	movw	r26, r18
    18bc:	aa 23       	and	r26, r26
    18be:	29 f4       	brne	.+10     	; 0x18ca <pow+0x50>
    18c0:	ab 2f       	mov	r26, r27
    18c2:	be 2f       	mov	r27, r30
    18c4:	f8 5f       	subi	r31, 0xF8	; 248
    18c6:	d0 f3       	brcs	.-12     	; 0x18bc <pow+0x42>
    18c8:	10 c0       	rjmp	.+32     	; 0x18ea <pow+0x70>
    18ca:	ff 5f       	subi	r31, 0xFF	; 255
    18cc:	70 f4       	brcc	.+28     	; 0x18ea <pow+0x70>
    18ce:	a6 95       	lsr	r26
    18d0:	e0 f7       	brcc	.-8      	; 0x18ca <pow+0x50>
    18d2:	f7 39       	cpi	r31, 0x97	; 151
    18d4:	50 f0       	brcs	.+20     	; 0x18ea <pow+0x70>
    18d6:	19 f0       	breq	.+6      	; 0x18de <pow+0x64>
    18d8:	ff 3a       	cpi	r31, 0xAF	; 175
    18da:	38 f4       	brcc	.+14     	; 0x18ea <pow+0x70>
    18dc:	9f 77       	andi	r25, 0x7F	; 127
    18de:	9f 93       	push	r25
    18e0:	0c d0       	rcall	.+24     	; 0x18fa <pow+0x80>
    18e2:	0f 90       	pop	r0
    18e4:	07 fc       	sbrc	r0, 7
    18e6:	90 58       	subi	r25, 0x80	; 128
    18e8:	08 95       	ret
    18ea:	3e f0       	brts	.+14     	; 0x18fa <pow+0x80>
    18ec:	18 cf       	rjmp	.-464    	; 0x171e <__fp_nan>
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	80 e8       	ldi	r24, 0x80	; 128
    18f4:	9f e3       	ldi	r25, 0x3F	; 63
    18f6:	08 95       	ret
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	9f 77       	andi	r25, 0x7F	; 127
    18fc:	5f 93       	push	r21
    18fe:	4f 93       	push	r20
    1900:	3f 93       	push	r19
    1902:	2f 93       	push	r18
    1904:	9e d0       	rcall	.+316    	; 0x1a42 <log>
    1906:	2f 91       	pop	r18
    1908:	3f 91       	pop	r19
    190a:	4f 91       	pop	r20
    190c:	5f 91       	pop	r21
    190e:	52 df       	rcall	.-348    	; 0x17b4 <__mulsf3>
    1910:	05 c0       	rjmp	.+10     	; 0x191c <exp>
    1912:	19 f4       	brne	.+6      	; 0x191a <pow+0xa0>
    1914:	0e f0       	brts	.+2      	; 0x1918 <pow+0x9e>
    1916:	fd ce       	rjmp	.-518    	; 0x1712 <__fp_inf>
    1918:	46 cf       	rjmp	.-372    	; 0x17a6 <__fp_zero>
    191a:	01 cf       	rjmp	.-510    	; 0x171e <__fp_nan>

0000191c <exp>:
    191c:	2a df       	rcall	.-428    	; 0x1772 <__fp_splitA>
    191e:	c8 f3       	brcs	.-14     	; 0x1912 <pow+0x98>
    1920:	96 38       	cpi	r25, 0x86	; 134
    1922:	c0 f7       	brcc	.-16     	; 0x1914 <pow+0x9a>
    1924:	07 f8       	bld	r0, 7
    1926:	0f 92       	push	r0
    1928:	e8 94       	clt
    192a:	2b e3       	ldi	r18, 0x3B	; 59
    192c:	3a ea       	ldi	r19, 0xAA	; 170
    192e:	48 eb       	ldi	r20, 0xB8	; 184
    1930:	5f e7       	ldi	r21, 0x7F	; 127
    1932:	4e df       	rcall	.-356    	; 0x17d0 <__mulsf3_pse>
    1934:	0f 92       	push	r0
    1936:	0f 92       	push	r0
    1938:	0f 92       	push	r0
    193a:	4d b7       	in	r20, 0x3d	; 61
    193c:	5e b7       	in	r21, 0x3e	; 62
    193e:	0f 92       	push	r0
    1940:	c0 d0       	rcall	.+384    	; 0x1ac2 <modf>
    1942:	e4 ee       	ldi	r30, 0xE4	; 228
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	16 d0       	rcall	.+44     	; 0x1974 <__fp_powser>
    1948:	4f 91       	pop	r20
    194a:	5f 91       	pop	r21
    194c:	ef 91       	pop	r30
    194e:	ff 91       	pop	r31
    1950:	e5 95       	asr	r30
    1952:	ee 1f       	adc	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	49 f0       	breq	.+18     	; 0x196a <exp+0x4e>
    1958:	fe 57       	subi	r31, 0x7E	; 126
    195a:	e0 68       	ori	r30, 0x80	; 128
    195c:	44 27       	eor	r20, r20
    195e:	ee 0f       	add	r30, r30
    1960:	44 1f       	adc	r20, r20
    1962:	fa 95       	dec	r31
    1964:	e1 f7       	brne	.-8      	; 0x195e <exp+0x42>
    1966:	41 95       	neg	r20
    1968:	55 0b       	sbc	r21, r21
    196a:	32 d0       	rcall	.+100    	; 0x19d0 <ldexp>
    196c:	0f 90       	pop	r0
    196e:	07 fe       	sbrs	r0, 7
    1970:	26 c0       	rjmp	.+76     	; 0x19be <inverse>
    1972:	08 95       	ret

00001974 <__fp_powser>:
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	1f 93       	push	r17
    197a:	0f 93       	push	r16
    197c:	ff 92       	push	r15
    197e:	ef 92       	push	r14
    1980:	df 92       	push	r13
    1982:	7b 01       	movw	r14, r22
    1984:	8c 01       	movw	r16, r24
    1986:	68 94       	set
    1988:	05 c0       	rjmp	.+10     	; 0x1994 <__fp_powser+0x20>
    198a:	da 2e       	mov	r13, r26
    198c:	ef 01       	movw	r28, r30
    198e:	1e df       	rcall	.-452    	; 0x17cc <__mulsf3x>
    1990:	fe 01       	movw	r30, r28
    1992:	e8 94       	clt
    1994:	a5 91       	lpm	r26, Z+
    1996:	25 91       	lpm	r18, Z+
    1998:	35 91       	lpm	r19, Z+
    199a:	45 91       	lpm	r20, Z+
    199c:	55 91       	lpm	r21, Z+
    199e:	ae f3       	brts	.-22     	; 0x198a <__fp_powser+0x16>
    19a0:	ef 01       	movw	r28, r30
    19a2:	d4 d0       	rcall	.+424    	; 0x1b4c <__addsf3x>
    19a4:	fe 01       	movw	r30, r28
    19a6:	97 01       	movw	r18, r14
    19a8:	a8 01       	movw	r20, r16
    19aa:	da 94       	dec	r13
    19ac:	79 f7       	brne	.-34     	; 0x198c <__fp_powser+0x18>
    19ae:	df 90       	pop	r13
    19b0:	ef 90       	pop	r14
    19b2:	ff 90       	pop	r15
    19b4:	0f 91       	pop	r16
    19b6:	1f 91       	pop	r17
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <inverse>:
    19be:	9b 01       	movw	r18, r22
    19c0:	ac 01       	movw	r20, r24
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	80 e8       	ldi	r24, 0x80	; 128
    19c8:	9f e3       	ldi	r25, 0x3F	; 63
    19ca:	cd cd       	rjmp	.-1126   	; 0x1566 <__divsf3>
    19cc:	a2 ce       	rjmp	.-700    	; 0x1712 <__fp_inf>
    19ce:	11 c1       	rjmp	.+546    	; 0x1bf2 <__fp_mpack>

000019d0 <ldexp>:
    19d0:	d0 de       	rcall	.-608    	; 0x1772 <__fp_splitA>
    19d2:	e8 f3       	brcs	.-6      	; 0x19ce <inverse+0x10>
    19d4:	99 23       	and	r25, r25
    19d6:	d9 f3       	breq	.-10     	; 0x19ce <inverse+0x10>
    19d8:	94 0f       	add	r25, r20
    19da:	51 1d       	adc	r21, r1
    19dc:	bb f3       	brvs	.-18     	; 0x19cc <inverse+0xe>
    19de:	91 50       	subi	r25, 0x01	; 1
    19e0:	50 40       	sbci	r21, 0x00	; 0
    19e2:	94 f0       	brlt	.+36     	; 0x1a08 <ldexp+0x38>
    19e4:	59 f0       	breq	.+22     	; 0x19fc <ldexp+0x2c>
    19e6:	88 23       	and	r24, r24
    19e8:	32 f0       	brmi	.+12     	; 0x19f6 <ldexp+0x26>
    19ea:	66 0f       	add	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	91 50       	subi	r25, 0x01	; 1
    19f2:	50 40       	sbci	r21, 0x00	; 0
    19f4:	c1 f7       	brne	.-16     	; 0x19e6 <ldexp+0x16>
    19f6:	9e 3f       	cpi	r25, 0xFE	; 254
    19f8:	51 05       	cpc	r21, r1
    19fa:	44 f7       	brge	.-48     	; 0x19cc <inverse+0xe>
    19fc:	88 0f       	add	r24, r24
    19fe:	91 1d       	adc	r25, r1
    1a00:	96 95       	lsr	r25
    1a02:	87 95       	ror	r24
    1a04:	97 f9       	bld	r25, 7
    1a06:	08 95       	ret
    1a08:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0a:	ac f0       	brlt	.+42     	; 0x1a36 <ldexp+0x66>
    1a0c:	98 3e       	cpi	r25, 0xE8	; 232
    1a0e:	9c f0       	brlt	.+38     	; 0x1a36 <ldexp+0x66>
    1a10:	bb 27       	eor	r27, r27
    1a12:	86 95       	lsr	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	b7 95       	ror	r27
    1a1a:	08 f4       	brcc	.+2      	; 0x1a1e <ldexp+0x4e>
    1a1c:	b1 60       	ori	r27, 0x01	; 1
    1a1e:	93 95       	inc	r25
    1a20:	c1 f7       	brne	.-16     	; 0x1a12 <ldexp+0x42>
    1a22:	bb 0f       	add	r27, r27
    1a24:	58 f7       	brcc	.-42     	; 0x19fc <ldexp+0x2c>
    1a26:	11 f4       	brne	.+4      	; 0x1a2c <ldexp+0x5c>
    1a28:	60 ff       	sbrs	r22, 0
    1a2a:	e8 cf       	rjmp	.-48     	; 0x19fc <ldexp+0x2c>
    1a2c:	6f 5f       	subi	r22, 0xFF	; 255
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	e3 cf       	rjmp	.-58     	; 0x19fc <ldexp+0x2c>
    1a36:	b8 ce       	rjmp	.-656    	; 0x17a8 <__fp_szero>
    1a38:	0e f0       	brts	.+2      	; 0x1a3c <ldexp+0x6c>
    1a3a:	db c0       	rjmp	.+438    	; 0x1bf2 <__fp_mpack>
    1a3c:	70 ce       	rjmp	.-800    	; 0x171e <__fp_nan>
    1a3e:	68 94       	set
    1a40:	68 ce       	rjmp	.-816    	; 0x1712 <__fp_inf>

00001a42 <log>:
    1a42:	97 de       	rcall	.-722    	; 0x1772 <__fp_splitA>
    1a44:	c8 f3       	brcs	.-14     	; 0x1a38 <ldexp+0x68>
    1a46:	99 23       	and	r25, r25
    1a48:	d1 f3       	breq	.-12     	; 0x1a3e <ldexp+0x6e>
    1a4a:	c6 f3       	brts	.-16     	; 0x1a3c <ldexp+0x6c>
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	1f 93       	push	r17
    1a52:	0f 93       	push	r16
    1a54:	ff 92       	push	r15
    1a56:	c9 2f       	mov	r28, r25
    1a58:	dd 27       	eor	r29, r29
    1a5a:	88 23       	and	r24, r24
    1a5c:	2a f0       	brmi	.+10     	; 0x1a68 <log+0x26>
    1a5e:	21 97       	sbiw	r28, 0x01	; 1
    1a60:	66 0f       	add	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	da f7       	brpl	.-10     	; 0x1a5e <log+0x1c>
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f eb       	ldi	r21, 0xBF	; 191
    1a70:	9f e3       	ldi	r25, 0x3F	; 63
    1a72:	88 39       	cpi	r24, 0x98	; 152
    1a74:	20 f0       	brcs	.+8      	; 0x1a7e <log+0x3c>
    1a76:	80 3e       	cpi	r24, 0xE0	; 224
    1a78:	30 f0       	brcs	.+12     	; 0x1a86 <log+0x44>
    1a7a:	21 96       	adiw	r28, 0x01	; 1
    1a7c:	8f 77       	andi	r24, 0x7F	; 127
    1a7e:	55 d0       	rcall	.+170    	; 0x1b2a <__addsf3>
    1a80:	ec e0       	ldi	r30, 0x0C	; 12
    1a82:	f1 e0       	ldi	r31, 0x01	; 1
    1a84:	03 c0       	rjmp	.+6      	; 0x1a8c <log+0x4a>
    1a86:	51 d0       	rcall	.+162    	; 0x1b2a <__addsf3>
    1a88:	e9 e3       	ldi	r30, 0x39	; 57
    1a8a:	f1 e0       	ldi	r31, 0x01	; 1
    1a8c:	73 df       	rcall	.-282    	; 0x1974 <__fp_powser>
    1a8e:	8b 01       	movw	r16, r22
    1a90:	be 01       	movw	r22, r28
    1a92:	ec 01       	movw	r28, r24
    1a94:	fb 2e       	mov	r15, r27
    1a96:	6f 57       	subi	r22, 0x7F	; 127
    1a98:	71 09       	sbc	r23, r1
    1a9a:	75 95       	asr	r23
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	88 0b       	sbc	r24, r24
    1aa0:	99 0b       	sbc	r25, r25
    1aa2:	fc dd       	rcall	.-1032   	; 0x169c <__floatsisf>
    1aa4:	28 e1       	ldi	r18, 0x18	; 24
    1aa6:	32 e7       	ldi	r19, 0x72	; 114
    1aa8:	41 e3       	ldi	r20, 0x31	; 49
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	8f de       	rcall	.-738    	; 0x17cc <__mulsf3x>
    1aae:	af 2d       	mov	r26, r15
    1ab0:	98 01       	movw	r18, r16
    1ab2:	ae 01       	movw	r20, r28
    1ab4:	ff 90       	pop	r15
    1ab6:	0f 91       	pop	r16
    1ab8:	1f 91       	pop	r17
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	46 d0       	rcall	.+140    	; 0x1b4c <__addsf3x>
    1ac0:	3f ce       	rjmp	.-898    	; 0x1740 <__fp_round>

00001ac2 <modf>:
    1ac2:	fa 01       	movw	r30, r20
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	aa 0f       	add	r26, r26
    1ac8:	bb 1f       	adc	r27, r27
    1aca:	9b 01       	movw	r18, r22
    1acc:	ac 01       	movw	r20, r24
    1ace:	bf 57       	subi	r27, 0x7F	; 127
    1ad0:	28 f4       	brcc	.+10     	; 0x1adc <modf+0x1a>
    1ad2:	22 27       	eor	r18, r18
    1ad4:	33 27       	eor	r19, r19
    1ad6:	44 27       	eor	r20, r20
    1ad8:	50 78       	andi	r21, 0x80	; 128
    1ada:	1f c0       	rjmp	.+62     	; 0x1b1a <modf+0x58>
    1adc:	b7 51       	subi	r27, 0x17	; 23
    1ade:	88 f4       	brcc	.+34     	; 0x1b02 <modf+0x40>
    1ae0:	ab 2f       	mov	r26, r27
    1ae2:	00 24       	eor	r0, r0
    1ae4:	46 95       	lsr	r20
    1ae6:	37 95       	ror	r19
    1ae8:	27 95       	ror	r18
    1aea:	01 1c       	adc	r0, r1
    1aec:	a3 95       	inc	r26
    1aee:	d2 f3       	brmi	.-12     	; 0x1ae4 <modf+0x22>
    1af0:	00 20       	and	r0, r0
    1af2:	69 f0       	breq	.+26     	; 0x1b0e <modf+0x4c>
    1af4:	22 0f       	add	r18, r18
    1af6:	33 1f       	adc	r19, r19
    1af8:	44 1f       	adc	r20, r20
    1afa:	b3 95       	inc	r27
    1afc:	da f3       	brmi	.-10     	; 0x1af4 <modf+0x32>
    1afe:	0d d0       	rcall	.+26     	; 0x1b1a <modf+0x58>
    1b00:	13 c0       	rjmp	.+38     	; 0x1b28 <__subsf3>
    1b02:	61 30       	cpi	r22, 0x01	; 1
    1b04:	71 05       	cpc	r23, r1
    1b06:	a0 e8       	ldi	r26, 0x80	; 128
    1b08:	8a 07       	cpc	r24, r26
    1b0a:	b9 46       	sbci	r27, 0x69	; 105
    1b0c:	30 f4       	brcc	.+12     	; 0x1b1a <modf+0x58>
    1b0e:	9b 01       	movw	r18, r22
    1b10:	ac 01       	movw	r20, r24
    1b12:	66 27       	eor	r22, r22
    1b14:	77 27       	eor	r23, r23
    1b16:	88 27       	eor	r24, r24
    1b18:	90 78       	andi	r25, 0x80	; 128
    1b1a:	30 96       	adiw	r30, 0x00	; 0
    1b1c:	21 f0       	breq	.+8      	; 0x1b26 <modf+0x64>
    1b1e:	20 83       	st	Z, r18
    1b20:	31 83       	std	Z+1, r19	; 0x01
    1b22:	42 83       	std	Z+2, r20	; 0x02
    1b24:	53 83       	std	Z+3, r21	; 0x03
    1b26:	08 95       	ret

00001b28 <__subsf3>:
    1b28:	50 58       	subi	r21, 0x80	; 128

00001b2a <__addsf3>:
    1b2a:	bb 27       	eor	r27, r27
    1b2c:	aa 27       	eor	r26, r26
    1b2e:	0e d0       	rcall	.+28     	; 0x1b4c <__addsf3x>
    1b30:	07 ce       	rjmp	.-1010   	; 0x1740 <__fp_round>
    1b32:	f8 dd       	rcall	.-1040   	; 0x1724 <__fp_pscA>
    1b34:	30 f0       	brcs	.+12     	; 0x1b42 <__addsf3+0x18>
    1b36:	fd dd       	rcall	.-1030   	; 0x1732 <__fp_pscB>
    1b38:	20 f0       	brcs	.+8      	; 0x1b42 <__addsf3+0x18>
    1b3a:	31 f4       	brne	.+12     	; 0x1b48 <__addsf3+0x1e>
    1b3c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b3e:	11 f4       	brne	.+4      	; 0x1b44 <__addsf3+0x1a>
    1b40:	1e f4       	brtc	.+6      	; 0x1b48 <__addsf3+0x1e>
    1b42:	ed cd       	rjmp	.-1062   	; 0x171e <__fp_nan>
    1b44:	0e f4       	brtc	.+2      	; 0x1b48 <__addsf3+0x1e>
    1b46:	e0 95       	com	r30
    1b48:	e7 fb       	bst	r30, 7
    1b4a:	e3 cd       	rjmp	.-1082   	; 0x1712 <__fp_inf>

00001b4c <__addsf3x>:
    1b4c:	e9 2f       	mov	r30, r25
    1b4e:	09 de       	rcall	.-1006   	; 0x1762 <__fp_split3>
    1b50:	80 f3       	brcs	.-32     	; 0x1b32 <__addsf3+0x8>
    1b52:	ba 17       	cp	r27, r26
    1b54:	62 07       	cpc	r22, r18
    1b56:	73 07       	cpc	r23, r19
    1b58:	84 07       	cpc	r24, r20
    1b5a:	95 07       	cpc	r25, r21
    1b5c:	18 f0       	brcs	.+6      	; 0x1b64 <__addsf3x+0x18>
    1b5e:	71 f4       	brne	.+28     	; 0x1b7c <__addsf3x+0x30>
    1b60:	9e f5       	brtc	.+102    	; 0x1bc8 <__addsf3x+0x7c>
    1b62:	21 ce       	rjmp	.-958    	; 0x17a6 <__fp_zero>
    1b64:	0e f4       	brtc	.+2      	; 0x1b68 <__addsf3x+0x1c>
    1b66:	e0 95       	com	r30
    1b68:	0b 2e       	mov	r0, r27
    1b6a:	ba 2f       	mov	r27, r26
    1b6c:	a0 2d       	mov	r26, r0
    1b6e:	0b 01       	movw	r0, r22
    1b70:	b9 01       	movw	r22, r18
    1b72:	90 01       	movw	r18, r0
    1b74:	0c 01       	movw	r0, r24
    1b76:	ca 01       	movw	r24, r20
    1b78:	a0 01       	movw	r20, r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	ff 27       	eor	r31, r31
    1b7e:	59 1b       	sub	r21, r25
    1b80:	99 f0       	breq	.+38     	; 0x1ba8 <__addsf3x+0x5c>
    1b82:	59 3f       	cpi	r21, 0xF9	; 249
    1b84:	50 f4       	brcc	.+20     	; 0x1b9a <__addsf3x+0x4e>
    1b86:	50 3e       	cpi	r21, 0xE0	; 224
    1b88:	68 f1       	brcs	.+90     	; 0x1be4 <__addsf3x+0x98>
    1b8a:	1a 16       	cp	r1, r26
    1b8c:	f0 40       	sbci	r31, 0x00	; 0
    1b8e:	a2 2f       	mov	r26, r18
    1b90:	23 2f       	mov	r18, r19
    1b92:	34 2f       	mov	r19, r20
    1b94:	44 27       	eor	r20, r20
    1b96:	58 5f       	subi	r21, 0xF8	; 248
    1b98:	f3 cf       	rjmp	.-26     	; 0x1b80 <__addsf3x+0x34>
    1b9a:	46 95       	lsr	r20
    1b9c:	37 95       	ror	r19
    1b9e:	27 95       	ror	r18
    1ba0:	a7 95       	ror	r26
    1ba2:	f0 40       	sbci	r31, 0x00	; 0
    1ba4:	53 95       	inc	r21
    1ba6:	c9 f7       	brne	.-14     	; 0x1b9a <__addsf3x+0x4e>
    1ba8:	7e f4       	brtc	.+30     	; 0x1bc8 <__addsf3x+0x7c>
    1baa:	1f 16       	cp	r1, r31
    1bac:	ba 0b       	sbc	r27, r26
    1bae:	62 0b       	sbc	r22, r18
    1bb0:	73 0b       	sbc	r23, r19
    1bb2:	84 0b       	sbc	r24, r20
    1bb4:	ba f0       	brmi	.+46     	; 0x1be4 <__addsf3x+0x98>
    1bb6:	91 50       	subi	r25, 0x01	; 1
    1bb8:	a1 f0       	breq	.+40     	; 0x1be2 <__addsf3x+0x96>
    1bba:	ff 0f       	add	r31, r31
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	66 1f       	adc	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	88 1f       	adc	r24, r24
    1bc4:	c2 f7       	brpl	.-16     	; 0x1bb6 <__addsf3x+0x6a>
    1bc6:	0e c0       	rjmp	.+28     	; 0x1be4 <__addsf3x+0x98>
    1bc8:	ba 0f       	add	r27, r26
    1bca:	62 1f       	adc	r22, r18
    1bcc:	73 1f       	adc	r23, r19
    1bce:	84 1f       	adc	r24, r20
    1bd0:	48 f4       	brcc	.+18     	; 0x1be4 <__addsf3x+0x98>
    1bd2:	87 95       	ror	r24
    1bd4:	77 95       	ror	r23
    1bd6:	67 95       	ror	r22
    1bd8:	b7 95       	ror	r27
    1bda:	f7 95       	ror	r31
    1bdc:	9e 3f       	cpi	r25, 0xFE	; 254
    1bde:	08 f0       	brcs	.+2      	; 0x1be2 <__addsf3x+0x96>
    1be0:	b3 cf       	rjmp	.-154    	; 0x1b48 <__addsf3+0x1e>
    1be2:	93 95       	inc	r25
    1be4:	88 0f       	add	r24, r24
    1be6:	08 f0       	brcs	.+2      	; 0x1bea <__addsf3x+0x9e>
    1be8:	99 27       	eor	r25, r25
    1bea:	ee 0f       	add	r30, r30
    1bec:	97 95       	ror	r25
    1bee:	87 95       	ror	r24
    1bf0:	08 95       	ret

00001bf2 <__fp_mpack>:
    1bf2:	9f 3f       	cpi	r25, 0xFF	; 255
    1bf4:	31 f0       	breq	.+12     	; 0x1c02 <__fp_mpack_finite+0xc>

00001bf6 <__fp_mpack_finite>:
    1bf6:	91 50       	subi	r25, 0x01	; 1
    1bf8:	20 f4       	brcc	.+8      	; 0x1c02 <__fp_mpack_finite+0xc>
    1bfa:	87 95       	ror	r24
    1bfc:	77 95       	ror	r23
    1bfe:	67 95       	ror	r22
    1c00:	b7 95       	ror	r27
    1c02:	88 0f       	add	r24, r24
    1c04:	91 1d       	adc	r25, r1
    1c06:	96 95       	lsr	r25
    1c08:	87 95       	ror	r24
    1c0a:	97 f9       	bld	r25, 7
    1c0c:	08 95       	ret

00001c0e <__udivmodhi4>:
    1c0e:	aa 1b       	sub	r26, r26
    1c10:	bb 1b       	sub	r27, r27
    1c12:	51 e1       	ldi	r21, 0x11	; 17
    1c14:	07 c0       	rjmp	.+14     	; 0x1c24 <__udivmodhi4_ep>

00001c16 <__udivmodhi4_loop>:
    1c16:	aa 1f       	adc	r26, r26
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	a6 17       	cp	r26, r22
    1c1c:	b7 07       	cpc	r27, r23
    1c1e:	10 f0       	brcs	.+4      	; 0x1c24 <__udivmodhi4_ep>
    1c20:	a6 1b       	sub	r26, r22
    1c22:	b7 0b       	sbc	r27, r23

00001c24 <__udivmodhi4_ep>:
    1c24:	88 1f       	adc	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	5a 95       	dec	r21
    1c2a:	a9 f7       	brne	.-22     	; 0x1c16 <__udivmodhi4_loop>
    1c2c:	80 95       	com	r24
    1c2e:	90 95       	com	r25
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	08 95       	ret

00001c36 <__divmodhi4>:
    1c36:	97 fb       	bst	r25, 7
    1c38:	09 2e       	mov	r0, r25
    1c3a:	07 26       	eor	r0, r23
    1c3c:	0a d0       	rcall	.+20     	; 0x1c52 <__divmodhi4_neg1>
    1c3e:	77 fd       	sbrc	r23, 7
    1c40:	04 d0       	rcall	.+8      	; 0x1c4a <__divmodhi4_neg2>
    1c42:	e5 df       	rcall	.-54     	; 0x1c0e <__udivmodhi4>
    1c44:	06 d0       	rcall	.+12     	; 0x1c52 <__divmodhi4_neg1>
    1c46:	00 20       	and	r0, r0
    1c48:	1a f4       	brpl	.+6      	; 0x1c50 <__divmodhi4_exit>

00001c4a <__divmodhi4_neg2>:
    1c4a:	70 95       	com	r23
    1c4c:	61 95       	neg	r22
    1c4e:	7f 4f       	sbci	r23, 0xFF	; 255

00001c50 <__divmodhi4_exit>:
    1c50:	08 95       	ret

00001c52 <__divmodhi4_neg1>:
    1c52:	f6 f7       	brtc	.-4      	; 0x1c50 <__divmodhi4_exit>
    1c54:	90 95       	com	r25
    1c56:	81 95       	neg	r24
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	08 95       	ret

00001c5c <_exit>:
    1c5c:	f8 94       	cli

00001c5e <__stop_program>:
    1c5e:	ff cf       	rjmp	.-2      	; 0x1c5e <__stop_program>
