
transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000100a  0000109e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000100a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800202  00800202  000010a0  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  0000449c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00004e48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec3  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000231  00000000  00000000  00005dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ef  00000000  00000000  00005fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  000065cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  00006868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000436  00000000  00000000  00006dd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_1>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__divsf3_pse+0xc>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ea e0       	ldi	r30, 0x0A	; 10
     17e:	f0 e1       	ldi	r31, 0x10	; 16
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a2 30       	cpi	r26, 0x02	; 2
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a2 e0       	ldi	r26, 0x02	; 2
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a7 32       	cpi	r26, 0x27	; 39
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 2f 04 	call	0x85e	; 0x85e <main>
     1a4:	0c 94 03 08 	jmp	0x1006	; 0x1006 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_Z12lcd_set_4bitv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <_Z12lcd_set_4bitv+0x4>
     1b4:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	ef ef       	ldi	r30, 0xFF	; 255
     1c2:	f7 e4       	ldi	r31, 0x47	; 71
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <_Z12lcd_set_4bitv+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_Z12lcd_set_4bitv+0x1e>
     1ca:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	fe e0       	ldi	r31, 0x0E	; 14
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_Z12lcd_set_4bitv+0x26>
     1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	ef ef       	ldi	r30, 0xFF	; 255
     1e2:	f7 e4       	ldi	r31, 0x47	; 71
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_Z12lcd_set_4bitv+0x38>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_Z12lcd_set_4bitv+0x3e>
     1ea:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8
     1ee:	e6 e6       	ldi	r30, 0x66	; 102
     1f0:	fe e0       	ldi	r31, 0x0E	; 14
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_Z12lcd_set_4bitv+0x46>
     1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <_Z12lcd_set_4bitv+0x58>
     208:	00 c0       	rjmp	.+0      	; 0x20a <_Z12lcd_set_4bitv+0x5e>
     20a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	e6 e6       	ldi	r30, 0x66	; 102
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <_Z12lcd_set_4bitv+0x66>
     216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <_Z12lcd_set_4bitv+0x7a>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <_Z12lcd_set_4bitv+0x80>
     22c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22e:	42 98       	cbi	0x08, 2	; 8

	
}
     230:	08 95       	ret

00000232 <_Z14lcd_wr_commandh>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     238:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <_Z14lcd_wr_commandh+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <_Z14lcd_wr_commandh+0x20>
     252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <_Z14lcd_wr_commandh+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <_Z14lcd_wr_commandh+0x44>
     276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     278:	42 98       	cbi	0x08, 2	; 8
}
     27a:	08 95       	ret

0000027c <_Z8lcd_initv>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     27c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z12lcd_set_4bitv>
     280:	86 e6       	ldi	r24, 0x66	; 102
     282:	9e e0       	ldi	r25, 0x0E	; 14
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <_Z8lcd_initv+0x8>
     288:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x01);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x06);
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x0E);
     29c:	8e e0       	ldi	r24, 0x0E	; 14
     29e:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x80);
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
		
}
     2a8:	08 95       	ret

000002aa <_Z11lcd_wr_charc>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2aa:	98 b1       	in	r25, 0x08	; 8
     2ac:	9f 70       	andi	r25, 0x0F	; 15
     2ae:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2b0:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2b2:	28 2f       	mov	r18, r24
     2b4:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b6:	92 2b       	or	r25, r18
     2b8:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ba:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2bc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2be:	42 9a       	sbi	0x08, 2	; 8
     2c0:	ef ef       	ldi	r30, 0xFF	; 255
     2c2:	f7 e4       	ldi	r31, 0x47	; 71
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <_Z11lcd_wr_charc+0x1a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <_Z11lcd_wr_charc+0x20>
     2ca:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2cc:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2ce:	98 b1       	in	r25, 0x08	; 8
     2d0:	9f 70       	andi	r25, 0x0F	; 15
     2d2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2d4:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2d6:	82 95       	swap	r24
     2d8:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2da:	89 2b       	or	r24, r25
     2dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2de:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2e0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2e2:	42 9a       	sbi	0x08, 2	; 8
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	97 e4       	ldi	r25, 0x47	; 71
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <_Z11lcd_wr_charc+0x3e>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <_Z11lcd_wr_charc+0x44>
     2ee:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2f0:	42 98       	cbi	0x08, 2	; 8
}
     2f2:	08 95       	ret

000002f4 <_Z8lcd_homev>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     2f4:	80 e8       	ldi	r24, 0x80	; 128
     2f6:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
}
     2fa:	08 95       	ret

000002fc <_Z10lcd_stringPc>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
	while(*str != '\0')
     302:	88 81       	ld	r24, Y
     304:	88 23       	and	r24, r24
     306:	31 f0       	breq	.+12     	; 0x314 <_Z10lcd_stringPc+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     308:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     30a:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     30e:	89 91       	ld	r24, Y+
     310:	88 23       	and	r24, r24
     312:	d9 f7       	brne	.-10     	; 0x30a <_Z10lcd_stringPc+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <_Z10lcd_cursorcc>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	79 f0       	breq	.+30     	; 0x33c <_Z10lcd_cursorcc+0x22>
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	18 f4       	brcc	.+6      	; 0x328 <_Z10lcd_cursorcc+0xe>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	c9 f4       	brne	.+50     	; 0x358 <_Z10lcd_cursorcc+0x3e>
     326:	05 c0       	rjmp	.+10     	; 0x332 <_Z10lcd_cursorcc+0x18>
     328:	83 30       	cpi	r24, 0x03	; 3
     32a:	69 f0       	breq	.+26     	; 0x346 <_Z10lcd_cursorcc+0x2c>
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	a1 f4       	brne	.+40     	; 0x358 <_Z10lcd_cursorcc+0x3e>
     330:	0f c0       	rjmp	.+30     	; 0x350 <_Z10lcd_cursorcc+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     332:	86 2f       	mov	r24, r22
     334:	81 58       	subi	r24, 0x81	; 129
     336:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     33a:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     33c:	86 2f       	mov	r24, r22
     33e:	81 54       	subi	r24, 0x41	; 65
     340:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     344:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     346:	86 2f       	mov	r24, r22
     348:	8d 56       	subi	r24, 0x6D	; 109
     34a:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     34e:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     350:	86 2f       	mov	r24, r22
     352:	8d 52       	subi	r24, 0x2D	; 45
     354:	0e 94 19 01 	call	0x232	; 0x232 <_Z14lcd_wr_commandh>
     358:	08 95       	ret

0000035a <_Z9lcd_printccji>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	8a 01       	movw	r16, r20
     364:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <_Z9lcd_printccji+0x14>
     36a:	66 23       	and	r22, r22
     36c:	19 f4       	brne	.+6      	; 0x374 <_Z9lcd_printccji+0x1a>
	{
		lcd_home();
     36e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z8lcd_homev>
     372:	02 c0       	rjmp	.+4      	; 0x378 <_Z9lcd_printccji+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     374:	0e 94 8d 01 	call	0x31a	; 0x31a <_Z10lcd_cursorcc>
	}
	if(digits==5 || flag==1)
     378:	c5 30       	cpi	r28, 0x05	; 5
     37a:	d1 05       	cpc	r29, r1
     37c:	71 f4       	brne	.+28     	; 0x39a <_Z9lcd_printccji+0x40>
	{
		million=value/10000+48;
     37e:	c8 01       	movw	r24, r16
     380:	60 e1       	ldi	r22, 0x10	; 16
     382:	77 e2       	ldi	r23, 0x27	; 39
     384:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     388:	cb 01       	movw	r24, r22
     38a:	c0 96       	adiw	r24, 0x30	; 48
     38c:	90 93 1c 02 	sts	0x021C, r25
     390:	80 93 1b 02 	sts	0x021B, r24
		lcd_wr_char(million);
     394:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <_Z9lcd_printccji+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     39a:	c4 30       	cpi	r28, 0x04	; 4
     39c:	d1 05       	cpc	r29, r1
     39e:	b9 f4       	brne	.+46     	; 0x3ce <_Z9lcd_printccji+0x74>
	{
		temp = value/1000;
     3a0:	c8 01       	movw	r24, r16
     3a2:	68 ee       	ldi	r22, 0xE8	; 232
     3a4:	73 e0       	ldi	r23, 0x03	; 3
     3a6:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     3aa:	cb 01       	movw	r24, r22
     3ac:	70 93 26 02 	sts	0x0226, r23
     3b0:	60 93 25 02 	sts	0x0225, r22
		thousand = temp%10 + 48;
     3b4:	6a e0       	ldi	r22, 0x0A	; 10
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     3bc:	c0 96       	adiw	r24, 0x30	; 48
     3be:	90 93 1e 02 	sts	0x021E, r25
     3c2:	80 93 1d 02 	sts	0x021D, r24
		lcd_wr_char(thousand);
     3c6:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
		flag=1;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <_Z9lcd_printccji+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3d0:	c3 30       	cpi	r28, 0x03	; 3
     3d2:	d1 05       	cpc	r29, r1
     3d4:	11 f0       	breq	.+4      	; 0x3da <_Z9lcd_printccji+0x80>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	b1 f4       	brne	.+44     	; 0x406 <_Z9lcd_printccji+0xac>
	{
		temp = value/100;
     3da:	c8 01       	movw	r24, r16
     3dc:	64 e6       	ldi	r22, 0x64	; 100
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     3e4:	cb 01       	movw	r24, r22
     3e6:	70 93 26 02 	sts	0x0226, r23
     3ea:	60 93 25 02 	sts	0x0225, r22
		hundred = temp%10 + 48;
     3ee:	6a e0       	ldi	r22, 0x0A	; 10
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     3f6:	c0 96       	adiw	r24, 0x30	; 48
     3f8:	90 93 20 02 	sts	0x0220, r25
     3fc:	80 93 1f 02 	sts	0x021F, r24
		lcd_wr_char(hundred);
     400:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
		flag=1;
     404:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     406:	c2 30       	cpi	r28, 0x02	; 2
     408:	d1 05       	cpc	r29, r1
     40a:	11 f0       	breq	.+4      	; 0x410 <_Z9lcd_printccji+0xb6>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	b1 f4       	brne	.+44     	; 0x43c <_Z9lcd_printccji+0xe2>
	{
		temp = value/10;
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	c8 01       	movw	r24, r16
     416:	b9 01       	movw	r22, r18
     418:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     41c:	cb 01       	movw	r24, r22
     41e:	70 93 26 02 	sts	0x0226, r23
     422:	60 93 25 02 	sts	0x0225, r22
		tens = temp%10 + 48;
     426:	b9 01       	movw	r22, r18
     428:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     42c:	c0 96       	adiw	r24, 0x30	; 48
     42e:	90 93 22 02 	sts	0x0222, r25
     432:	80 93 21 02 	sts	0x0221, r24
		lcd_wr_char(tens);
     436:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
		flag=1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     43c:	c1 30       	cpi	r28, 0x01	; 1
     43e:	d1 05       	cpc	r29, r1
     440:	11 f0       	breq	.+4      	; 0x446 <_Z9lcd_printccji+0xec>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	61 f4       	brne	.+24     	; 0x45e <_Z9lcd_printccji+0x104>
	{
		unit = value%10 + 48;
     446:	c8 01       	movw	r24, r16
     448:	6a e0       	ldi	r22, 0x0A	; 10
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     450:	c0 96       	adiw	r24, 0x30	; 48
     452:	90 93 24 02 	sts	0x0224, r25
     456:	80 93 23 02 	sts	0x0223, r24
		lcd_wr_char(unit);
     45a:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
	}
	if(digits>5)
     45e:	c6 30       	cpi	r28, 0x06	; 6
     460:	d1 05       	cpc	r29, r1
     462:	1c f0       	brlt	.+6      	; 0x46a <_Z9lcd_printccji+0x110>
	{
		lcd_wr_char('E');
     464:	85 e4       	ldi	r24, 0x45	; 69
     466:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z11lcd_wr_charc>
	}
	
}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <_Z10filter_redv>:

//Filter Selection
void filter_red(void)    //Used to select red filter
{
	//Filter Select - red filter
	PORTD = PORTD & 0xBF; //set S2 low
     474:	5e 98       	cbi	0x0b, 6	; 11
	PORTD = PORTD & 0x7F; //set S3 low
     476:	5f 98       	cbi	0x0b, 7	; 11
}
     478:	08 95       	ret

0000047a <_Z12filter_greenv>:

void filter_green(void)	//Used to select green filter
{
	//Filter Select - green filter
	PORTD = PORTD | 0x40; //set S2 High
     47a:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD = PORTD | 0x80; //set S3 High
     47c:	5f 9a       	sbi	0x0b, 7	; 11
}
     47e:	08 95       	ret

00000480 <_Z11filter_bluev>:

void filter_blue(void)	//Used to select blue filter
{
	//Filter Select - blue filter
	PORTD = PORTD & 0xBF; //set S2 low
     480:	5e 98       	cbi	0x0b, 6	; 11
	PORTD = PORTD | 0x80; //set S3 High
     482:	5f 9a       	sbi	0x0b, 7	; 11
}
     484:	08 95       	ret

00000486 <_Z12filter_clearv>:

void filter_clear(void)	//select no filter
{
	//Filter Select - no filter
	PORTD = PORTD | 0x40; //set S2 High
     486:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD = PORTD & 0x7F; //set S3 Low
     488:	5f 98       	cbi	0x0b, 7	; 11
}
     48a:	08 95       	ret

0000048c <_Z20color_sensor_scalingv>:
//Color Sensing Scaling
void color_sensor_scaling()		//This function is used to select the scaled down version of the original frequency of the output generated by the color sensor, generally 20% scaling is preferable, though you can change the values as per your application by referring datasheet
{
	//Output Scaling 20% from datasheet
	//PORTD = PORTD & 0xEF;
	PORTD = PORTD | 0x10; //set S0 high
     48c:	5c 9a       	sbi	0x0b, 4	; 11
	//PORTD = PORTD & 0xDF; //set S1 low
	PORTD = PORTD | 0x20; //set S1 high
     48e:	5d 9a       	sbi	0x0b, 5	; 11
}
     490:	08 95       	ret

00000492 <_Z5colorv>:

void color(void) // function to select red filter and display the count generated by the sensor on LCD. The count will be more if the color is red. The count will be very less if its blue or green.
{
	color_sensor_scaling();
     492:	0e 94 46 02 	call	0x48c	; 0x48c <_Z20color_sensor_scalingv>
	//Red
	filter_red(); //select red filter
     496:	0e 94 3a 02 	call	0x474	; 0x474 <_Z10filter_redv>
	pulse=0; //reset the count to 0
     49a:	10 92 0e 02 	sts	0x020E, r1
     49e:	10 92 0f 02 	sts	0x020F, r1
     4a2:	10 92 10 02 	sts	0x0210, r1
     4a6:	10 92 11 02 	sts	0x0211, r1
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	9f e7       	ldi	r25, 0x7F	; 127
     4ae:	a4 e0       	ldi	r26, 0x04	; 4
     4b0:	81 50       	subi	r24, 0x01	; 1
     4b2:	90 40       	sbci	r25, 0x00	; 0
     4b4:	a0 40       	sbci	r26, 0x00	; 0
     4b6:	e1 f7       	brne	.-8      	; 0x4b0 <_Z5colorv+0x1e>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <_Z5colorv+0x28>
     4ba:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse;  //store the count in variable called red
     4bc:	80 91 0e 02 	lds	r24, 0x020E
     4c0:	90 91 0f 02 	lds	r25, 0x020F
     4c4:	a0 91 10 02 	lds	r26, 0x0210
     4c8:	b0 91 11 02 	lds	r27, 0x0211
     4cc:	80 93 0a 02 	sts	0x020A, r24
     4d0:	90 93 0b 02 	sts	0x020B, r25
     4d4:	a0 93 0c 02 	sts	0x020C, r26
     4d8:	b0 93 0d 02 	sts	0x020D, r27
	
	//Green
	filter_green(); //select green filter
     4dc:	0e 94 3d 02 	call	0x47a	; 0x47a <_Z12filter_greenv>
	pulse=0; //reset the count to 0
     4e0:	10 92 0e 02 	sts	0x020E, r1
     4e4:	10 92 0f 02 	sts	0x020F, r1
     4e8:	10 92 10 02 	sts	0x0210, r1
     4ec:	10 92 11 02 	sts	0x0211, r1
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	9f e7       	ldi	r25, 0x7F	; 127
     4f4:	a4 e0       	ldi	r26, 0x04	; 4
     4f6:	81 50       	subi	r24, 0x01	; 1
     4f8:	90 40       	sbci	r25, 0x00	; 0
     4fa:	a0 40       	sbci	r26, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <_Z5colorv+0x64>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <_Z5colorv+0x6e>
     500:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse;  //store the count in variable called green
     502:	80 91 0e 02 	lds	r24, 0x020E
     506:	90 91 0f 02 	lds	r25, 0x020F
     50a:	a0 91 10 02 	lds	r26, 0x0210
     50e:	b0 91 11 02 	lds	r27, 0x0211
     512:	80 93 02 02 	sts	0x0202, r24
     516:	90 93 03 02 	sts	0x0203, r25
     51a:	a0 93 04 02 	sts	0x0204, r26
     51e:	b0 93 05 02 	sts	0x0205, r27
	
	//Blue
	filter_blue(); //select blue filter
     522:	0e 94 40 02 	call	0x480	; 0x480 <_Z11filter_bluev>
	pulse=0; //reset the count to 0
     526:	10 92 0e 02 	sts	0x020E, r1
     52a:	10 92 0f 02 	sts	0x020F, r1
     52e:	10 92 10 02 	sts	0x0210, r1
     532:	10 92 11 02 	sts	0x0211, r1
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	9f e7       	ldi	r25, 0x7F	; 127
     53a:	a4 e0       	ldi	r26, 0x04	; 4
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	a0 40       	sbci	r26, 0x00	; 0
     542:	e1 f7       	brne	.-8      	; 0x53c <_Z5colorv+0xaa>
     544:	00 c0       	rjmp	.+0      	; 0x546 <_Z5colorv+0xb4>
     546:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  //store the count in variable called blue
     548:	80 91 0e 02 	lds	r24, 0x020E
     54c:	90 91 0f 02 	lds	r25, 0x020F
     550:	a0 91 10 02 	lds	r26, 0x0210
     554:	b0 91 11 02 	lds	r27, 0x0211
     558:	80 93 06 02 	sts	0x0206, r24
     55c:	90 93 07 02 	sts	0x0207, r25
     560:	a0 93 08 02 	sts	0x0208, r26
     564:	b0 93 09 02 	sts	0x0209, r27
	/*lcd_print(1,1,red,5);
	lcd_print(1,7,blue,5);
	lcd_print(1,13,green,5);
	*/if(red<threshold && green <threshold && blue <threshold)		//black color detected
     568:	80 91 00 02 	lds	r24, 0x0200
     56c:	90 91 01 02 	lds	r25, 0x0201
     570:	a0 e0       	ldi	r26, 0x00	; 0
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	40 91 0a 02 	lds	r20, 0x020A
     578:	50 91 0b 02 	lds	r21, 0x020B
     57c:	60 91 0c 02 	lds	r22, 0x020C
     580:	70 91 0d 02 	lds	r23, 0x020D
     584:	48 17       	cp	r20, r24
     586:	59 07       	cpc	r21, r25
     588:	6a 07       	cpc	r22, r26
     58a:	7b 07       	cpc	r23, r27
     58c:	b8 f5       	brcc	.+110    	; 0x5fc <_Z5colorv+0x16a>
     58e:	40 91 02 02 	lds	r20, 0x0202
     592:	50 91 03 02 	lds	r21, 0x0203
     596:	60 91 04 02 	lds	r22, 0x0204
     59a:	70 91 05 02 	lds	r23, 0x0205
     59e:	48 17       	cp	r20, r24
     5a0:	59 07       	cpc	r21, r25
     5a2:	6a 07       	cpc	r22, r26
     5a4:	7b 07       	cpc	r23, r27
     5a6:	50 f5       	brcc	.+84     	; 0x5fc <_Z5colorv+0x16a>
     5a8:	40 91 06 02 	lds	r20, 0x0206
     5ac:	50 91 07 02 	lds	r21, 0x0207
     5b0:	60 91 08 02 	lds	r22, 0x0208
     5b4:	70 91 09 02 	lds	r23, 0x0209
     5b8:	48 17       	cp	r20, r24
     5ba:	59 07       	cpc	r21, r25
     5bc:	6a 07       	cpc	r22, r26
     5be:	7b 07       	cpc	r23, r27
     5c0:	e8 f4       	brcc	.+58     	; 0x5fc <_Z5colorv+0x16a>
	{
		data='T';
     5c2:	84 e5       	ldi	r24, 0x54	; 84
     5c4:	80 93 14 02 	sts	0x0214, r24
     5c8:	08 95       	ret
	}
	else if(red>blue &&red >green)				//red color detected
     5ca:	40 91 0a 02 	lds	r20, 0x020A
     5ce:	50 91 0b 02 	lds	r21, 0x020B
     5d2:	60 91 0c 02 	lds	r22, 0x020C
     5d6:	70 91 0d 02 	lds	r23, 0x020D
     5da:	80 91 02 02 	lds	r24, 0x0202
     5de:	90 91 03 02 	lds	r25, 0x0203
     5e2:	a0 91 04 02 	lds	r26, 0x0204
     5e6:	b0 91 05 02 	lds	r27, 0x0205
     5ea:	84 17       	cp	r24, r20
     5ec:	95 07       	cpc	r25, r21
     5ee:	a6 07       	cpc	r26, r22
     5f0:	b7 07       	cpc	r27, r23
     5f2:	c8 f4       	brcc	.+50     	; 0x626 <_Z5colorv+0x194>
	{
			data='R';
     5f4:	82 e5       	ldi	r24, 0x52	; 82
     5f6:	80 93 14 02 	sts	0x0214, r24
     5fa:	08 95       	ret
	lcd_print(1,13,green,5);
	*/if(red<threshold && green <threshold && blue <threshold)		//black color detected
	{
		data='T';
	}
	else if(red>blue &&red >green)				//red color detected
     5fc:	40 91 0a 02 	lds	r20, 0x020A
     600:	50 91 0b 02 	lds	r21, 0x020B
     604:	60 91 0c 02 	lds	r22, 0x020C
     608:	70 91 0d 02 	lds	r23, 0x020D
     60c:	80 91 06 02 	lds	r24, 0x0206
     610:	90 91 07 02 	lds	r25, 0x0207
     614:	a0 91 08 02 	lds	r26, 0x0208
     618:	b0 91 09 02 	lds	r27, 0x0209
     61c:	84 17       	cp	r24, r20
     61e:	95 07       	cpc	r25, r21
     620:	a6 07       	cpc	r26, r22
     622:	b7 07       	cpc	r27, r23
     624:	90 f2       	brcs	.-92     	; 0x5ca <_Z5colorv+0x138>
			data='R';

	}
	else                  //green color detected
	{
		data='G';
     626:	87 e4       	ldi	r24, 0x47	; 71
     628:	80 93 14 02 	sts	0x0214, r24
     62c:	08 95       	ret

0000062e <__vector_25>:
unsigned char rec,data,block; //to store received data from UDR0
unsigned char ADC_Value;
#include "CPPFile1.cpp"//color sencor code

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	8f 93       	push	r24
	rec = UDR0; 				//making copy of data from UDR0 in 'data' variable
     63a:	80 91 c6 00 	lds	r24, 0x00C6
     63e:	80 93 15 02 	sts	0x0215, r24

	//UDR2 = rec; 				//echo data back to PC

}
     642:	8f 91       	pop	r24
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <_Z10uart0_initv>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     64e:	e1 ec       	ldi	r30, 0xC1	; 193
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     654:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     658:	86 e0       	ldi	r24, 0x06	; 6
     65a:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
     65e:	8f e5       	ldi	r24, 0x5F	; 95
     660:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
     664:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
     668:	88 e9       	ldi	r24, 0x98	; 152
     66a:	80 83       	st	Z, r24
}
     66c:	08 95       	ret

0000066e <_Z10uart2_initv>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     66e:	e1 ed       	ldi	r30, 0xD1	; 209
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     674:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     678:	86 e0       	ldi	r24, 0x06	; 6
     67a:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     67e:	8f e5       	ldi	r24, 0x5F	; 95
     680:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     684:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     688:	88 e9       	ldi	r24, 0x98	; 152
     68a:	80 83       	st	Z, r24
}
     68c:	08 95       	ret

0000068e <_Z10led_configv>:
void led_config(void)  //configuration setting for led on port H 5,6,7
{
	
	DDRH=0b11100000;
     68e:	80 ee       	ldi	r24, 0xE0	; 224
     690:	80 93 01 01 	sts	0x0101, r24
	PORTH=0x00;
     694:	10 92 02 01 	sts	0x0102, r1
}
     698:	08 95       	ret

0000069a <_Z6red_onv>:

void red_on(void)    //for red led
{
	PORTH=0b10000000;
     69a:	80 e8       	ldi	r24, 0x80	; 128
     69c:	80 93 02 01 	sts	0x0102, r24
}
     6a0:	08 95       	ret

000006a2 <_Z7led_offv>:
void led_off(void)			//for led off
{
	PORTH=0x00;
     6a2:	10 92 02 01 	sts	0x0102, r1
}
     6a6:	08 95       	ret

000006a8 <_Z7blue_onv>:
void blue_on(void)		//for blue led
{
	PORTH=0b00100000;
     6a8:	80 e2       	ldi	r24, 0x20	; 32
     6aa:	80 93 02 01 	sts	0x0102, r24
}
     6ae:	08 95       	ret

000006b0 <_Z8green_onv>:
void green_on(void)		//for green led
{
	PORTH=0b01000000;
     6b0:	80 e4       	ldi	r24, 0x40	; 64
     6b2:	80 93 02 01 	sts	0x0102, r24
}
     6b6:	08 95       	ret

000006b8 <_Z15lcd_port_configv>:
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     6b8:	87 b1       	in	r24, 0x07	; 7
     6ba:	87 6f       	ori	r24, 0xF7	; 247
     6bc:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     6be:	88 b1       	in	r24, 0x08	; 8
     6c0:	80 78       	andi	r24, 0x80	; 128
     6c2:	88 b9       	out	0x08, r24	; 8
}
     6c4:	08 95       	ret

000006c6 <_Z14adc_pin_configv>:

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00; //set PORTF direction as input
     6c6:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00; //set PORTF pins floating
     6c8:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00; //set PORTK direction as input
     6ca:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00; //set PORTK pins floating
     6ce:	10 92 08 01 	sts	0x0108, r1
}
     6d2:	08 95       	ret

000006d4 <_Z23color_sensor_pin_configv>:

void color_sensor_pin_config(void)
{
	DDRD  = DDRD | 0xFE; //set PD0 as input for color sensor output
     6d4:	8a b1       	in	r24, 0x0a	; 10
     6d6:	8e 6f       	ori	r24, 0xFE	; 254
     6d8:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | 0x01;//Enable internal pull-up for PORTD 0 pin
     6da:	58 9a       	sbi	0x0b, 0	; 11
}
     6dc:	08 95       	ret

000006de <_Z9port_initv>:
//Function to Initialize PORTS
void port_init()
{
	led_config();
     6de:	0e 94 47 03 	call	0x68e	; 0x68e <_Z10led_configv>
	lcd_port_config();
     6e2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_Z15lcd_port_configv>
	adc_pin_config();
     6e6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_Z14adc_pin_configv>
	color_sensor_pin_config();//color sensor pin configuration
     6ea:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z23color_sensor_pin_configv>
}
     6ee:	08 95       	ret

000006f0 <_Z8adc_initv>:

//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
     6f0:	ea e7       	ldi	r30, 0x7A	; 122
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     6f6:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     6fa:	80 e2       	ldi	r24, 0x20	; 32
     6fc:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     700:	80 e8       	ldi	r24, 0x80	; 128
     702:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     704:	86 e8       	ldi	r24, 0x86	; 134
     706:	80 83       	st	Z, r24
}
     708:	08 95       	ret

0000070a <_Z14ADC_Conversionh>:

//This Function accepts the Channel Number and returns the corresponding Analog Value
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
     70a:	88 30       	cpi	r24, 0x08	; 8
     70c:	18 f0       	brcs	.+6      	; 0x714 <_Z14ADC_Conversionh+0xa>
	{
		ADCSRB = 0x08;
     70e:	98 e0       	ldi	r25, 0x08	; 8
     710:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
     714:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
     716:	80 62       	ori	r24, 0x20	; 32
     718:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     71c:	ea e7       	ldi	r30, 0x7A	; 122
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	80 64       	ori	r24, 0x40	; 64
     724:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     726:	80 81       	ld	r24, Z
     728:	84 ff       	sbrs	r24, 4
     72a:	fd cf       	rjmp	.-6      	; 0x726 <_Z14ADC_Conversionh+0x1c>
	a=ADCH;
     72c:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     730:	ea e7       	ldi	r30, 0x7A	; 122
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	90 81       	ld	r25, Z
     736:	90 61       	ori	r25, 0x10	; 16
     738:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     73a:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     73e:	08 95       	ret

00000740 <_Z12print_sensorcch>:


// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location.
void print_sensor(char row, char coloumn,unsigned char channel)
{
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	d8 2f       	mov	r29, r24
     746:	c6 2f       	mov	r28, r22
     748:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
     74a:	0e 94 85 03 	call	0x70a	; 0x70a <_Z14ADC_Conversionh>
     74e:	48 2f       	mov	r20, r24
     750:	80 93 12 02 	sts	0x0212, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     754:	8d 2f       	mov	r24, r29
     756:	6c 2f       	mov	r22, r28
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	23 e0       	ldi	r18, 0x03	; 3
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <_Z31color_sensor_pin_interrupt_initv>:



void color_sensor_pin_interrupt_init(void) //Interrupt 0 enable
{
	cli(); //Clears the global interrupt
     768:	f8 94       	cli
	EICRA = EICRA | 0x02; // INT0 is set to trigger with falling edge
     76a:	e9 e6       	ldi	r30, 0x69	; 105
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	82 60       	ori	r24, 0x02	; 2
     772:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x01; // Enable Interrupt INT0 for color sensor
     774:	e8 9a       	sbi	0x1d, 0	; 29
	sei(); // Enables the global interrupt
     776:	78 94       	sei
}
     778:	08 95       	ret

0000077a <__vector_1>:

//ISR for color sensor
ISR(INT0_vect)
{
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	8f 93       	push	r24
     786:	9f 93       	push	r25
     788:	af 93       	push	r26
     78a:	bf 93       	push	r27
	pulse++; //increment on receiving pulse from the color sensor
     78c:	80 91 0e 02 	lds	r24, 0x020E
     790:	90 91 0f 02 	lds	r25, 0x020F
     794:	a0 91 10 02 	lds	r26, 0x0210
     798:	b0 91 11 02 	lds	r27, 0x0211
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	a1 1d       	adc	r26, r1
     7a0:	b1 1d       	adc	r27, r1
     7a2:	80 93 0e 02 	sts	0x020E, r24
     7a6:	90 93 0f 02 	sts	0x020F, r25
     7aa:	a0 93 10 02 	sts	0x0210, r26
     7ae:	b0 93 11 02 	sts	0x0211, r27
}
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	0f 90       	pop	r0
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	0f 90       	pop	r0
     7c0:	1f 90       	pop	r1
     7c2:	18 95       	reti

000007c4 <_Z23Sharp_GP2D12_estimationh>:
// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor.
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     7c8:	68 2f       	mov	r22, r24
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
     7d4:	2f ee       	ldi	r18, 0xEF	; 239
     7d6:	39 ec       	ldi	r19, 0xC9	; 201
     7d8:	43 e9       	ldi	r20, 0x93	; 147
     7da:	5f e3       	ldi	r21, 0x3F	; 63
     7dc:	0e 94 25 06 	call	0xc4a	; 0xc4a <pow>
     7e0:	b6 2f       	mov	r27, r22
     7e2:	a7 2f       	mov	r26, r23
     7e4:	38 2f       	mov	r19, r24
     7e6:	29 2f       	mov	r18, r25
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	9f e3       	ldi	r25, 0x3F	; 63
     7f0:	42 2f       	mov	r20, r18
     7f2:	0b 2f       	mov	r16, r27
     7f4:	1a 2f       	mov	r17, r26
     7f6:	23 2f       	mov	r18, r19
     7f8:	34 2f       	mov	r19, r20
     7fa:	a9 01       	movw	r20, r18
     7fc:	98 01       	movw	r18, r16
     7fe:	0e 94 9b 04 	call	0x936	; 0x936 <__divsf3>
     802:	2a e9       	ldi	r18, 0x9A	; 154
     804:	39 ef       	ldi	r19, 0xF9	; 249
     806:	4e e2       	ldi	r20, 0x2E	; 46
     808:	55 e4       	ldi	r21, 0x45	; 69
     80a:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e2       	ldi	r20, 0x20	; 32
     814:	51 e4       	ldi	r21, 0x41	; 65
     816:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
     81a:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixsfsi>
     81e:	88 27       	eor	r24, r24
     820:	77 fd       	sbrc	r23, 7
     822:	80 95       	com	r24
     824:	98 2f       	mov	r25, r24
     826:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatsisf>
	distanceInt = (int)distance;
     82a:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     82e:	86 2f       	mov	r24, r22
     830:	97 2f       	mov	r25, r23
     832:	23 e0       	ldi	r18, 0x03	; 3
     834:	81 32       	cpi	r24, 0x21	; 33
     836:	92 07       	cpc	r25, r18
     838:	10 f0       	brcs	.+4      	; 0x83e <_Z23Sharp_GP2D12_estimationh+0x7a>
     83a:	80 e2       	ldi	r24, 0x20	; 32
     83c:	93 e0       	ldi	r25, 0x03	; 3
}
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <_Z12init_devicesv>:

//Function To Initialize all The Devices
void init_devices()
{
 cli(); //Clears the global interrupts
     844:	f8 94       	cli
 color_sensor_pin_interrupt_init();
     846:	0e 94 b4 03 	call	0x768	; 0x768 <_Z31color_sensor_pin_interrupt_initv>
 port_init();
     84a:	0e 94 6f 03 	call	0x6de	; 0x6de <_Z9port_initv>
 adc_init();
     84e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_Z8adc_initv>
 uart0_init(); //Initailize UART0 for serial communiaction
     852:	0e 94 27 03 	call	0x64e	; 0x64e <_Z10uart0_initv>
 uart2_init(); //Initailize UART1 for serial communiaction
     856:	0e 94 37 03 	call	0x66e	; 0x66e <_Z10uart2_initv>
 sei();   //Enables the global interrupts
     85a:	78 94       	sei
}
     85c:	08 95       	ret

0000085e <main>:

//Main Function
int main(void)
{
	init_devices();
     85e:	0e 94 22 04 	call	0x844	; 0x844 <_Z12init_devicesv>
	
	lcd_set_4bit();
     862:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z12lcd_set_4bitv>
	lcd_init();
     866:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z8lcd_initv>

	data='A';    //default data value
     86a:	81 e4       	ldi	r24, 0x41	; 65
     86c:	80 93 14 02 	sts	0x0214, r24
	while(1){
		color();        // detecting color of patch  in CPPfile1
		sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
		lcd_print(2,1,data,2);
		UDR0=data;			//sending the color through XBEE
     870:	c6 ec       	ldi	r28, 0xC6	; 198
     872:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(500);
		if(value>100 &&value <150)
		{
			block='B';
     874:	12 e4       	ldi	r17, 0x42	; 66
		}
		else block='U';
     876:	05 e5       	ldi	r16, 0x55	; 85
	lcd_set_4bit();
	lcd_init();

	data='A';    //default data value
	while(1){
		color();        // detecting color of patch  in CPPfile1
     878:	0e 94 49 02 	call	0x492	; 0x492 <_Z5colorv>
		sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     87c:	8b e0       	ldi	r24, 0x0B	; 11
     87e:	0e 94 85 03 	call	0x70a	; 0x70a <_Z14ADC_Conversionh>
     882:	80 93 1a 02 	sts	0x021A, r24
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
     886:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z23Sharp_GP2D12_estimationh>
     88a:	90 93 17 02 	sts	0x0217, r25
     88e:	80 93 16 02 	sts	0x0216, r24
		lcd_print(2,1,data,2);
     892:	40 91 14 02 	lds	r20, 0x0214
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	22 e0       	ldi	r18, 0x02	; 2
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
		UDR0=data;			//sending the color through XBEE
     8a4:	80 91 14 02 	lds	r24, 0x0214
     8a8:	88 83       	st	Y, r24
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	9f e7       	ldi	r25, 0x7F	; 127
     8ae:	a6 e1       	ldi	r26, 0x16	; 22
     8b0:	81 50       	subi	r24, 0x01	; 1
     8b2:	90 40       	sbci	r25, 0x00	; 0
     8b4:	a0 40       	sbci	r26, 0x00	; 0
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <main+0x52>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <main+0x5c>
     8ba:	00 00       	nop
		_delay_ms(500);
		if(value>100 &&value <150)
     8bc:	80 91 16 02 	lds	r24, 0x0216
     8c0:	90 91 17 02 	lds	r25, 0x0217
     8c4:	85 56       	subi	r24, 0x65	; 101
     8c6:	90 40       	sbci	r25, 0x00	; 0
     8c8:	81 33       	cpi	r24, 0x31	; 49
     8ca:	91 05       	cpc	r25, r1
     8cc:	18 f4       	brcc	.+6      	; 0x8d4 <main+0x76>
		{
			block='B';
     8ce:	10 93 13 02 	sts	0x0213, r17
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <main+0x7a>
		}
		else block='U';
     8d4:	00 93 13 02 	sts	0x0213, r16
		UDR0=block;			//sending the block status through XBEE
     8d8:	80 91 13 02 	lds	r24, 0x0213
     8dc:	88 83       	st	Y, r24
     8de:	8f ef       	ldi	r24, 0xFF	; 255
     8e0:	9f e7       	ldi	r25, 0x7F	; 127
     8e2:	a6 e1       	ldi	r26, 0x16	; 22
     8e4:	81 50       	subi	r24, 0x01	; 1
     8e6:	90 40       	sbci	r25, 0x00	; 0
     8e8:	a0 40       	sbci	r26, 0x00	; 0
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <main+0x86>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <main+0x90>
     8ee:	00 00       	nop
		_delay_ms(500);
		if(rec=='B')		//if rescue bot is Blocked
     8f0:	80 91 15 02 	lds	r24, 0x0215
     8f4:	82 34       	cpi	r24, 0x42	; 66
     8f6:	e1 f4       	brne	.+56     	; 0x930 <main+0xd2>
		{
			
			lcd_print(1,1,rec,3);
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	42 e4       	ldi	r20, 0x42	; 66
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	23 e0       	ldi	r18, 0x03	; 3
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9lcd_printccji>
			
			if(block=='B')		//both blocked
     908:	80 91 13 02 	lds	r24, 0x0213
     90c:	82 34       	cpi	r24, 0x42	; 66
     90e:	19 f4       	brne	.+6      	; 0x916 <main+0xb8>
			{
				blue_on();
     910:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_Z7blue_onv>
     914:	b1 cf       	rjmp	.-158    	; 0x878 <main+0x1a>
			
			}
			else if(data=='R')			//color of patch is red
     916:	80 91 14 02 	lds	r24, 0x0214
     91a:	82 35       	cpi	r24, 0x52	; 82
     91c:	19 f4       	brne	.+6      	; 0x924 <main+0xc6>
			{
				red_on();
     91e:	0e 94 4d 03 	call	0x69a	; 0x69a <_Z6red_onv>
     922:	aa cf       	rjmp	.-172    	; 0x878 <main+0x1a>
				
			}
			else if(data=='G')			//color of patch is green	
     924:	87 34       	cpi	r24, 0x47	; 71
     926:	09 f0       	breq	.+2      	; 0x92a <main+0xcc>
     928:	a7 cf       	rjmp	.-178    	; 0x878 <main+0x1a>
			{
				green_on();
     92a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z8green_onv>
     92e:	a4 cf       	rjmp	.-184    	; 0x878 <main+0x1a>
			
			}
		}
		else        //unblocked rescue bot 
		{	
			led_off();
     930:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z7led_offv>
     934:	a1 cf       	rjmp	.-190    	; 0x878 <main+0x1a>

00000936 <__divsf3>:
     936:	0c d0       	rcall	.+24     	; 0x950 <__divsf3x>
     938:	eb c0       	rjmp	.+470    	; 0xb10 <__fp_round>
     93a:	e3 d0       	rcall	.+454    	; 0xb02 <__fp_pscB>
     93c:	40 f0       	brcs	.+16     	; 0x94e <__divsf3+0x18>
     93e:	da d0       	rcall	.+436    	; 0xaf4 <__fp_pscA>
     940:	30 f0       	brcs	.+12     	; 0x94e <__divsf3+0x18>
     942:	21 f4       	brne	.+8      	; 0x94c <__divsf3+0x16>
     944:	5f 3f       	cpi	r21, 0xFF	; 255
     946:	19 f0       	breq	.+6      	; 0x94e <__divsf3+0x18>
     948:	cc c0       	rjmp	.+408    	; 0xae2 <__fp_inf>
     94a:	51 11       	cpse	r21, r1
     94c:	15 c1       	rjmp	.+554    	; 0xb78 <__fp_szero>
     94e:	cf c0       	rjmp	.+414    	; 0xaee <__fp_nan>

00000950 <__divsf3x>:
     950:	f0 d0       	rcall	.+480    	; 0xb32 <__fp_split3>
     952:	98 f3       	brcs	.-26     	; 0x93a <__divsf3+0x4>

00000954 <__divsf3_pse>:
     954:	99 23       	and	r25, r25
     956:	c9 f3       	breq	.-14     	; 0x94a <__divsf3+0x14>
     958:	55 23       	and	r21, r21
     95a:	b1 f3       	breq	.-20     	; 0x948 <__divsf3+0x12>
     95c:	95 1b       	sub	r25, r21
     95e:	55 0b       	sbc	r21, r21
     960:	bb 27       	eor	r27, r27
     962:	aa 27       	eor	r26, r26
     964:	62 17       	cp	r22, r18
     966:	73 07       	cpc	r23, r19
     968:	84 07       	cpc	r24, r20
     96a:	38 f0       	brcs	.+14     	; 0x97a <__divsf3_pse+0x26>
     96c:	9f 5f       	subi	r25, 0xFF	; 255
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	22 0f       	add	r18, r18
     972:	33 1f       	adc	r19, r19
     974:	44 1f       	adc	r20, r20
     976:	aa 1f       	adc	r26, r26
     978:	a9 f3       	breq	.-22     	; 0x964 <__divsf3_pse+0x10>
     97a:	33 d0       	rcall	.+102    	; 0x9e2 <__divsf3_pse+0x8e>
     97c:	0e 2e       	mov	r0, r30
     97e:	3a f0       	brmi	.+14     	; 0x98e <__divsf3_pse+0x3a>
     980:	e0 e8       	ldi	r30, 0x80	; 128
     982:	30 d0       	rcall	.+96     	; 0x9e4 <__divsf3_pse+0x90>
     984:	91 50       	subi	r25, 0x01	; 1
     986:	50 40       	sbci	r21, 0x00	; 0
     988:	e6 95       	lsr	r30
     98a:	00 1c       	adc	r0, r0
     98c:	ca f7       	brpl	.-14     	; 0x980 <__divsf3_pse+0x2c>
     98e:	29 d0       	rcall	.+82     	; 0x9e2 <__divsf3_pse+0x8e>
     990:	fe 2f       	mov	r31, r30
     992:	27 d0       	rcall	.+78     	; 0x9e2 <__divsf3_pse+0x8e>
     994:	66 0f       	add	r22, r22
     996:	77 1f       	adc	r23, r23
     998:	88 1f       	adc	r24, r24
     99a:	bb 1f       	adc	r27, r27
     99c:	26 17       	cp	r18, r22
     99e:	37 07       	cpc	r19, r23
     9a0:	48 07       	cpc	r20, r24
     9a2:	ab 07       	cpc	r26, r27
     9a4:	b0 e8       	ldi	r27, 0x80	; 128
     9a6:	09 f0       	breq	.+2      	; 0x9aa <__divsf3_pse+0x56>
     9a8:	bb 0b       	sbc	r27, r27
     9aa:	80 2d       	mov	r24, r0
     9ac:	bf 01       	movw	r22, r30
     9ae:	ff 27       	eor	r31, r31
     9b0:	93 58       	subi	r25, 0x83	; 131
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	2a f0       	brmi	.+10     	; 0x9c0 <__divsf3_pse+0x6c>
     9b6:	9e 3f       	cpi	r25, 0xFE	; 254
     9b8:	51 05       	cpc	r21, r1
     9ba:	68 f0       	brcs	.+26     	; 0x9d6 <__divsf3_pse+0x82>
     9bc:	92 c0       	rjmp	.+292    	; 0xae2 <__fp_inf>
     9be:	dc c0       	rjmp	.+440    	; 0xb78 <__fp_szero>
     9c0:	5f 3f       	cpi	r21, 0xFF	; 255
     9c2:	ec f3       	brlt	.-6      	; 0x9be <__divsf3_pse+0x6a>
     9c4:	98 3e       	cpi	r25, 0xE8	; 232
     9c6:	dc f3       	brlt	.-10     	; 0x9be <__divsf3_pse+0x6a>
     9c8:	86 95       	lsr	r24
     9ca:	77 95       	ror	r23
     9cc:	67 95       	ror	r22
     9ce:	b7 95       	ror	r27
     9d0:	f7 95       	ror	r31
     9d2:	9f 5f       	subi	r25, 0xFF	; 255
     9d4:	c9 f7       	brne	.-14     	; 0x9c8 <__divsf3_pse+0x74>
     9d6:	88 0f       	add	r24, r24
     9d8:	91 1d       	adc	r25, r1
     9da:	96 95       	lsr	r25
     9dc:	87 95       	ror	r24
     9de:	97 f9       	bld	r25, 7
     9e0:	08 95       	ret
     9e2:	e1 e0       	ldi	r30, 0x01	; 1
     9e4:	66 0f       	add	r22, r22
     9e6:	77 1f       	adc	r23, r23
     9e8:	88 1f       	adc	r24, r24
     9ea:	bb 1f       	adc	r27, r27
     9ec:	62 17       	cp	r22, r18
     9ee:	73 07       	cpc	r23, r19
     9f0:	84 07       	cpc	r24, r20
     9f2:	ba 07       	cpc	r27, r26
     9f4:	20 f0       	brcs	.+8      	; 0x9fe <__divsf3_pse+0xaa>
     9f6:	62 1b       	sub	r22, r18
     9f8:	73 0b       	sbc	r23, r19
     9fa:	84 0b       	sbc	r24, r20
     9fc:	ba 0b       	sbc	r27, r26
     9fe:	ee 1f       	adc	r30, r30
     a00:	88 f7       	brcc	.-30     	; 0x9e4 <__divsf3_pse+0x90>
     a02:	e0 95       	com	r30
     a04:	08 95       	ret

00000a06 <__fixsfsi>:
     a06:	04 d0       	rcall	.+8      	; 0xa10 <__fixunssfsi>
     a08:	68 94       	set
     a0a:	b1 11       	cpse	r27, r1
     a0c:	b5 c0       	rjmp	.+362    	; 0xb78 <__fp_szero>
     a0e:	08 95       	ret

00000a10 <__fixunssfsi>:
     a10:	98 d0       	rcall	.+304    	; 0xb42 <__fp_splitA>
     a12:	88 f0       	brcs	.+34     	; 0xa36 <__fixunssfsi+0x26>
     a14:	9f 57       	subi	r25, 0x7F	; 127
     a16:	90 f0       	brcs	.+36     	; 0xa3c <__fixunssfsi+0x2c>
     a18:	b9 2f       	mov	r27, r25
     a1a:	99 27       	eor	r25, r25
     a1c:	b7 51       	subi	r27, 0x17	; 23
     a1e:	a0 f0       	brcs	.+40     	; 0xa48 <__fixunssfsi+0x38>
     a20:	d1 f0       	breq	.+52     	; 0xa56 <__fixunssfsi+0x46>
     a22:	66 0f       	add	r22, r22
     a24:	77 1f       	adc	r23, r23
     a26:	88 1f       	adc	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	1a f0       	brmi	.+6      	; 0xa32 <__fixunssfsi+0x22>
     a2c:	ba 95       	dec	r27
     a2e:	c9 f7       	brne	.-14     	; 0xa22 <__fixunssfsi+0x12>
     a30:	12 c0       	rjmp	.+36     	; 0xa56 <__fixunssfsi+0x46>
     a32:	b1 30       	cpi	r27, 0x01	; 1
     a34:	81 f0       	breq	.+32     	; 0xa56 <__fixunssfsi+0x46>
     a36:	9f d0       	rcall	.+318    	; 0xb76 <__fp_zero>
     a38:	b1 e0       	ldi	r27, 0x01	; 1
     a3a:	08 95       	ret
     a3c:	9c c0       	rjmp	.+312    	; 0xb76 <__fp_zero>
     a3e:	67 2f       	mov	r22, r23
     a40:	78 2f       	mov	r23, r24
     a42:	88 27       	eor	r24, r24
     a44:	b8 5f       	subi	r27, 0xF8	; 248
     a46:	39 f0       	breq	.+14     	; 0xa56 <__fixunssfsi+0x46>
     a48:	b9 3f       	cpi	r27, 0xF9	; 249
     a4a:	cc f3       	brlt	.-14     	; 0xa3e <__fixunssfsi+0x2e>
     a4c:	86 95       	lsr	r24
     a4e:	77 95       	ror	r23
     a50:	67 95       	ror	r22
     a52:	b3 95       	inc	r27
     a54:	d9 f7       	brne	.-10     	; 0xa4c <__fixunssfsi+0x3c>
     a56:	3e f4       	brtc	.+14     	; 0xa66 <__fixunssfsi+0x56>
     a58:	90 95       	com	r25
     a5a:	80 95       	com	r24
     a5c:	70 95       	com	r23
     a5e:	61 95       	neg	r22
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	8f 4f       	sbci	r24, 0xFF	; 255
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	08 95       	ret

00000a68 <__floatunsisf>:
     a68:	e8 94       	clt
     a6a:	09 c0       	rjmp	.+18     	; 0xa7e <__floatsisf+0x12>

00000a6c <__floatsisf>:
     a6c:	97 fb       	bst	r25, 7
     a6e:	3e f4       	brtc	.+14     	; 0xa7e <__floatsisf+0x12>
     a70:	90 95       	com	r25
     a72:	80 95       	com	r24
     a74:	70 95       	com	r23
     a76:	61 95       	neg	r22
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	8f 4f       	sbci	r24, 0xFF	; 255
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	99 23       	and	r25, r25
     a80:	a9 f0       	breq	.+42     	; 0xaac <__floatsisf+0x40>
     a82:	f9 2f       	mov	r31, r25
     a84:	96 e9       	ldi	r25, 0x96	; 150
     a86:	bb 27       	eor	r27, r27
     a88:	93 95       	inc	r25
     a8a:	f6 95       	lsr	r31
     a8c:	87 95       	ror	r24
     a8e:	77 95       	ror	r23
     a90:	67 95       	ror	r22
     a92:	b7 95       	ror	r27
     a94:	f1 11       	cpse	r31, r1
     a96:	f8 cf       	rjmp	.-16     	; 0xa88 <__floatsisf+0x1c>
     a98:	fa f4       	brpl	.+62     	; 0xad8 <__floatsisf+0x6c>
     a9a:	bb 0f       	add	r27, r27
     a9c:	11 f4       	brne	.+4      	; 0xaa2 <__floatsisf+0x36>
     a9e:	60 ff       	sbrs	r22, 0
     aa0:	1b c0       	rjmp	.+54     	; 0xad8 <__floatsisf+0x6c>
     aa2:	6f 5f       	subi	r22, 0xFF	; 255
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	8f 4f       	sbci	r24, 0xFF	; 255
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	16 c0       	rjmp	.+44     	; 0xad8 <__floatsisf+0x6c>
     aac:	88 23       	and	r24, r24
     aae:	11 f0       	breq	.+4      	; 0xab4 <__floatsisf+0x48>
     ab0:	96 e9       	ldi	r25, 0x96	; 150
     ab2:	11 c0       	rjmp	.+34     	; 0xad6 <__floatsisf+0x6a>
     ab4:	77 23       	and	r23, r23
     ab6:	21 f0       	breq	.+8      	; 0xac0 <__floatsisf+0x54>
     ab8:	9e e8       	ldi	r25, 0x8E	; 142
     aba:	87 2f       	mov	r24, r23
     abc:	76 2f       	mov	r23, r22
     abe:	05 c0       	rjmp	.+10     	; 0xaca <__floatsisf+0x5e>
     ac0:	66 23       	and	r22, r22
     ac2:	71 f0       	breq	.+28     	; 0xae0 <__floatsisf+0x74>
     ac4:	96 e8       	ldi	r25, 0x86	; 134
     ac6:	86 2f       	mov	r24, r22
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	2a f0       	brmi	.+10     	; 0xad8 <__floatsisf+0x6c>
     ace:	9a 95       	dec	r25
     ad0:	66 0f       	add	r22, r22
     ad2:	77 1f       	adc	r23, r23
     ad4:	88 1f       	adc	r24, r24
     ad6:	da f7       	brpl	.-10     	; 0xace <__floatsisf+0x62>
     ad8:	88 0f       	add	r24, r24
     ada:	96 95       	lsr	r25
     adc:	87 95       	ror	r24
     ade:	97 f9       	bld	r25, 7
     ae0:	08 95       	ret

00000ae2 <__fp_inf>:
     ae2:	97 f9       	bld	r25, 7
     ae4:	9f 67       	ori	r25, 0x7F	; 127
     ae6:	80 e8       	ldi	r24, 0x80	; 128
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	08 95       	ret

00000aee <__fp_nan>:
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	80 ec       	ldi	r24, 0xC0	; 192
     af2:	08 95       	ret

00000af4 <__fp_pscA>:
     af4:	00 24       	eor	r0, r0
     af6:	0a 94       	dec	r0
     af8:	16 16       	cp	r1, r22
     afa:	17 06       	cpc	r1, r23
     afc:	18 06       	cpc	r1, r24
     afe:	09 06       	cpc	r0, r25
     b00:	08 95       	ret

00000b02 <__fp_pscB>:
     b02:	00 24       	eor	r0, r0
     b04:	0a 94       	dec	r0
     b06:	12 16       	cp	r1, r18
     b08:	13 06       	cpc	r1, r19
     b0a:	14 06       	cpc	r1, r20
     b0c:	05 06       	cpc	r0, r21
     b0e:	08 95       	ret

00000b10 <__fp_round>:
     b10:	09 2e       	mov	r0, r25
     b12:	03 94       	inc	r0
     b14:	00 0c       	add	r0, r0
     b16:	11 f4       	brne	.+4      	; 0xb1c <__fp_round+0xc>
     b18:	88 23       	and	r24, r24
     b1a:	52 f0       	brmi	.+20     	; 0xb30 <__fp_round+0x20>
     b1c:	bb 0f       	add	r27, r27
     b1e:	40 f4       	brcc	.+16     	; 0xb30 <__fp_round+0x20>
     b20:	bf 2b       	or	r27, r31
     b22:	11 f4       	brne	.+4      	; 0xb28 <__fp_round+0x18>
     b24:	60 ff       	sbrs	r22, 0
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <__fp_round+0x20>
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8f 4f       	sbci	r24, 0xFF	; 255
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	08 95       	ret

00000b32 <__fp_split3>:
     b32:	57 fd       	sbrc	r21, 7
     b34:	90 58       	subi	r25, 0x80	; 128
     b36:	44 0f       	add	r20, r20
     b38:	55 1f       	adc	r21, r21
     b3a:	59 f0       	breq	.+22     	; 0xb52 <__fp_splitA+0x10>
     b3c:	5f 3f       	cpi	r21, 0xFF	; 255
     b3e:	71 f0       	breq	.+28     	; 0xb5c <__fp_splitA+0x1a>
     b40:	47 95       	ror	r20

00000b42 <__fp_splitA>:
     b42:	88 0f       	add	r24, r24
     b44:	97 fb       	bst	r25, 7
     b46:	99 1f       	adc	r25, r25
     b48:	61 f0       	breq	.+24     	; 0xb62 <__fp_splitA+0x20>
     b4a:	9f 3f       	cpi	r25, 0xFF	; 255
     b4c:	79 f0       	breq	.+30     	; 0xb6c <__fp_splitA+0x2a>
     b4e:	87 95       	ror	r24
     b50:	08 95       	ret
     b52:	12 16       	cp	r1, r18
     b54:	13 06       	cpc	r1, r19
     b56:	14 06       	cpc	r1, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	f2 cf       	rjmp	.-28     	; 0xb40 <__fp_split3+0xe>
     b5c:	46 95       	lsr	r20
     b5e:	f1 df       	rcall	.-30     	; 0xb42 <__fp_splitA>
     b60:	08 c0       	rjmp	.+16     	; 0xb72 <__fp_splitA+0x30>
     b62:	16 16       	cp	r1, r22
     b64:	17 06       	cpc	r1, r23
     b66:	18 06       	cpc	r1, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	f1 cf       	rjmp	.-30     	; 0xb4e <__fp_splitA+0xc>
     b6c:	86 95       	lsr	r24
     b6e:	71 05       	cpc	r23, r1
     b70:	61 05       	cpc	r22, r1
     b72:	08 94       	sec
     b74:	08 95       	ret

00000b76 <__fp_zero>:
     b76:	e8 94       	clt

00000b78 <__fp_szero>:
     b78:	bb 27       	eor	r27, r27
     b7a:	66 27       	eor	r22, r22
     b7c:	77 27       	eor	r23, r23
     b7e:	cb 01       	movw	r24, r22
     b80:	97 f9       	bld	r25, 7
     b82:	08 95       	ret

00000b84 <__mulsf3>:
     b84:	0b d0       	rcall	.+22     	; 0xb9c <__mulsf3x>
     b86:	c4 cf       	rjmp	.-120    	; 0xb10 <__fp_round>
     b88:	b5 df       	rcall	.-150    	; 0xaf4 <__fp_pscA>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__mulsf3+0x12>
     b8c:	ba df       	rcall	.-140    	; 0xb02 <__fp_pscB>
     b8e:	18 f0       	brcs	.+6      	; 0xb96 <__mulsf3+0x12>
     b90:	95 23       	and	r25, r21
     b92:	09 f0       	breq	.+2      	; 0xb96 <__mulsf3+0x12>
     b94:	a6 cf       	rjmp	.-180    	; 0xae2 <__fp_inf>
     b96:	ab cf       	rjmp	.-170    	; 0xaee <__fp_nan>
     b98:	11 24       	eor	r1, r1
     b9a:	ee cf       	rjmp	.-36     	; 0xb78 <__fp_szero>

00000b9c <__mulsf3x>:
     b9c:	ca df       	rcall	.-108    	; 0xb32 <__fp_split3>
     b9e:	a0 f3       	brcs	.-24     	; 0xb88 <__mulsf3+0x4>

00000ba0 <__mulsf3_pse>:
     ba0:	95 9f       	mul	r25, r21
     ba2:	d1 f3       	breq	.-12     	; 0xb98 <__mulsf3+0x14>
     ba4:	95 0f       	add	r25, r21
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	55 1f       	adc	r21, r21
     baa:	62 9f       	mul	r22, r18
     bac:	f0 01       	movw	r30, r0
     bae:	72 9f       	mul	r23, r18
     bb0:	bb 27       	eor	r27, r27
     bb2:	f0 0d       	add	r31, r0
     bb4:	b1 1d       	adc	r27, r1
     bb6:	63 9f       	mul	r22, r19
     bb8:	aa 27       	eor	r26, r26
     bba:	f0 0d       	add	r31, r0
     bbc:	b1 1d       	adc	r27, r1
     bbe:	aa 1f       	adc	r26, r26
     bc0:	64 9f       	mul	r22, r20
     bc2:	66 27       	eor	r22, r22
     bc4:	b0 0d       	add	r27, r0
     bc6:	a1 1d       	adc	r26, r1
     bc8:	66 1f       	adc	r22, r22
     bca:	82 9f       	mul	r24, r18
     bcc:	22 27       	eor	r18, r18
     bce:	b0 0d       	add	r27, r0
     bd0:	a1 1d       	adc	r26, r1
     bd2:	62 1f       	adc	r22, r18
     bd4:	73 9f       	mul	r23, r19
     bd6:	b0 0d       	add	r27, r0
     bd8:	a1 1d       	adc	r26, r1
     bda:	62 1f       	adc	r22, r18
     bdc:	83 9f       	mul	r24, r19
     bde:	a0 0d       	add	r26, r0
     be0:	61 1d       	adc	r22, r1
     be2:	22 1f       	adc	r18, r18
     be4:	74 9f       	mul	r23, r20
     be6:	33 27       	eor	r19, r19
     be8:	a0 0d       	add	r26, r0
     bea:	61 1d       	adc	r22, r1
     bec:	23 1f       	adc	r18, r19
     bee:	84 9f       	mul	r24, r20
     bf0:	60 0d       	add	r22, r0
     bf2:	21 1d       	adc	r18, r1
     bf4:	82 2f       	mov	r24, r18
     bf6:	76 2f       	mov	r23, r22
     bf8:	6a 2f       	mov	r22, r26
     bfa:	11 24       	eor	r1, r1
     bfc:	9f 57       	subi	r25, 0x7F	; 127
     bfe:	50 40       	sbci	r21, 0x00	; 0
     c00:	8a f0       	brmi	.+34     	; 0xc24 <__mulsf3_pse+0x84>
     c02:	e1 f0       	breq	.+56     	; 0xc3c <__mulsf3_pse+0x9c>
     c04:	88 23       	and	r24, r24
     c06:	4a f0       	brmi	.+18     	; 0xc1a <__mulsf3_pse+0x7a>
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	bb 1f       	adc	r27, r27
     c0e:	66 1f       	adc	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	91 50       	subi	r25, 0x01	; 1
     c16:	50 40       	sbci	r21, 0x00	; 0
     c18:	a9 f7       	brne	.-22     	; 0xc04 <__mulsf3_pse+0x64>
     c1a:	9e 3f       	cpi	r25, 0xFE	; 254
     c1c:	51 05       	cpc	r21, r1
     c1e:	70 f0       	brcs	.+28     	; 0xc3c <__mulsf3_pse+0x9c>
     c20:	60 cf       	rjmp	.-320    	; 0xae2 <__fp_inf>
     c22:	aa cf       	rjmp	.-172    	; 0xb78 <__fp_szero>
     c24:	5f 3f       	cpi	r21, 0xFF	; 255
     c26:	ec f3       	brlt	.-6      	; 0xc22 <__mulsf3_pse+0x82>
     c28:	98 3e       	cpi	r25, 0xE8	; 232
     c2a:	dc f3       	brlt	.-10     	; 0xc22 <__mulsf3_pse+0x82>
     c2c:	86 95       	lsr	r24
     c2e:	77 95       	ror	r23
     c30:	67 95       	ror	r22
     c32:	b7 95       	ror	r27
     c34:	f7 95       	ror	r31
     c36:	e7 95       	ror	r30
     c38:	9f 5f       	subi	r25, 0xFF	; 255
     c3a:	c1 f7       	brne	.-16     	; 0xc2c <__mulsf3_pse+0x8c>
     c3c:	fe 2b       	or	r31, r30
     c3e:	88 0f       	add	r24, r24
     c40:	91 1d       	adc	r25, r1
     c42:	96 95       	lsr	r25
     c44:	87 95       	ror	r24
     c46:	97 f9       	bld	r25, 7
     c48:	08 95       	ret

00000c4a <pow>:
     c4a:	fa 01       	movw	r30, r20
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	30 96       	adiw	r30, 0x00	; 0
     c52:	21 05       	cpc	r18, r1
     c54:	31 05       	cpc	r19, r1
     c56:	99 f1       	breq	.+102    	; 0xcbe <pow+0x74>
     c58:	61 15       	cp	r22, r1
     c5a:	71 05       	cpc	r23, r1
     c5c:	61 f4       	brne	.+24     	; 0xc76 <pow+0x2c>
     c5e:	80 38       	cpi	r24, 0x80	; 128
     c60:	bf e3       	ldi	r27, 0x3F	; 63
     c62:	9b 07       	cpc	r25, r27
     c64:	49 f1       	breq	.+82     	; 0xcb8 <pow+0x6e>
     c66:	68 94       	set
     c68:	90 38       	cpi	r25, 0x80	; 128
     c6a:	81 05       	cpc	r24, r1
     c6c:	61 f0       	breq	.+24     	; 0xc86 <pow+0x3c>
     c6e:	80 38       	cpi	r24, 0x80	; 128
     c70:	bf ef       	ldi	r27, 0xFF	; 255
     c72:	9b 07       	cpc	r25, r27
     c74:	41 f0       	breq	.+16     	; 0xc86 <pow+0x3c>
     c76:	99 23       	and	r25, r25
     c78:	42 f5       	brpl	.+80     	; 0xcca <pow+0x80>
     c7a:	ff 3f       	cpi	r31, 0xFF	; 255
     c7c:	e1 05       	cpc	r30, r1
     c7e:	31 05       	cpc	r19, r1
     c80:	21 05       	cpc	r18, r1
     c82:	11 f1       	breq	.+68     	; 0xcc8 <pow+0x7e>
     c84:	e8 94       	clt
     c86:	08 94       	sec
     c88:	e7 95       	ror	r30
     c8a:	d9 01       	movw	r26, r18
     c8c:	aa 23       	and	r26, r26
     c8e:	29 f4       	brne	.+10     	; 0xc9a <pow+0x50>
     c90:	ab 2f       	mov	r26, r27
     c92:	be 2f       	mov	r27, r30
     c94:	f8 5f       	subi	r31, 0xF8	; 248
     c96:	d0 f3       	brcs	.-12     	; 0xc8c <pow+0x42>
     c98:	10 c0       	rjmp	.+32     	; 0xcba <pow+0x70>
     c9a:	ff 5f       	subi	r31, 0xFF	; 255
     c9c:	70 f4       	brcc	.+28     	; 0xcba <pow+0x70>
     c9e:	a6 95       	lsr	r26
     ca0:	e0 f7       	brcc	.-8      	; 0xc9a <pow+0x50>
     ca2:	f7 39       	cpi	r31, 0x97	; 151
     ca4:	50 f0       	brcs	.+20     	; 0xcba <pow+0x70>
     ca6:	19 f0       	breq	.+6      	; 0xcae <pow+0x64>
     ca8:	ff 3a       	cpi	r31, 0xAF	; 175
     caa:	38 f4       	brcc	.+14     	; 0xcba <pow+0x70>
     cac:	9f 77       	andi	r25, 0x7F	; 127
     cae:	9f 93       	push	r25
     cb0:	0c d0       	rcall	.+24     	; 0xcca <pow+0x80>
     cb2:	0f 90       	pop	r0
     cb4:	07 fc       	sbrc	r0, 7
     cb6:	90 58       	subi	r25, 0x80	; 128
     cb8:	08 95       	ret
     cba:	3e f0       	brts	.+14     	; 0xcca <pow+0x80>
     cbc:	18 cf       	rjmp	.-464    	; 0xaee <__fp_nan>
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	80 e8       	ldi	r24, 0x80	; 128
     cc4:	9f e3       	ldi	r25, 0x3F	; 63
     cc6:	08 95       	ret
     cc8:	4f e7       	ldi	r20, 0x7F	; 127
     cca:	9f 77       	andi	r25, 0x7F	; 127
     ccc:	5f 93       	push	r21
     cce:	4f 93       	push	r20
     cd0:	3f 93       	push	r19
     cd2:	2f 93       	push	r18
     cd4:	9e d0       	rcall	.+316    	; 0xe12 <log>
     cd6:	2f 91       	pop	r18
     cd8:	3f 91       	pop	r19
     cda:	4f 91       	pop	r20
     cdc:	5f 91       	pop	r21
     cde:	52 df       	rcall	.-348    	; 0xb84 <__mulsf3>
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <exp>
     ce2:	19 f4       	brne	.+6      	; 0xcea <pow+0xa0>
     ce4:	0e f0       	brts	.+2      	; 0xce8 <pow+0x9e>
     ce6:	fd ce       	rjmp	.-518    	; 0xae2 <__fp_inf>
     ce8:	46 cf       	rjmp	.-372    	; 0xb76 <__fp_zero>
     cea:	01 cf       	rjmp	.-510    	; 0xaee <__fp_nan>

00000cec <exp>:
     cec:	2a df       	rcall	.-428    	; 0xb42 <__fp_splitA>
     cee:	c8 f3       	brcs	.-14     	; 0xce2 <pow+0x98>
     cf0:	96 38       	cpi	r25, 0x86	; 134
     cf2:	c0 f7       	brcc	.-16     	; 0xce4 <pow+0x9a>
     cf4:	07 f8       	bld	r0, 7
     cf6:	0f 92       	push	r0
     cf8:	e8 94       	clt
     cfa:	2b e3       	ldi	r18, 0x3B	; 59
     cfc:	3a ea       	ldi	r19, 0xAA	; 170
     cfe:	48 eb       	ldi	r20, 0xB8	; 184
     d00:	5f e7       	ldi	r21, 0x7F	; 127
     d02:	4e df       	rcall	.-356    	; 0xba0 <__mulsf3_pse>
     d04:	0f 92       	push	r0
     d06:	0f 92       	push	r0
     d08:	0f 92       	push	r0
     d0a:	4d b7       	in	r20, 0x3d	; 61
     d0c:	5e b7       	in	r21, 0x3e	; 62
     d0e:	0f 92       	push	r0
     d10:	c0 d0       	rcall	.+384    	; 0xe92 <modf>
     d12:	e4 ee       	ldi	r30, 0xE4	; 228
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	16 d0       	rcall	.+44     	; 0xd44 <__fp_powser>
     d18:	4f 91       	pop	r20
     d1a:	5f 91       	pop	r21
     d1c:	ef 91       	pop	r30
     d1e:	ff 91       	pop	r31
     d20:	e5 95       	asr	r30
     d22:	ee 1f       	adc	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	49 f0       	breq	.+18     	; 0xd3a <exp+0x4e>
     d28:	fe 57       	subi	r31, 0x7E	; 126
     d2a:	e0 68       	ori	r30, 0x80	; 128
     d2c:	44 27       	eor	r20, r20
     d2e:	ee 0f       	add	r30, r30
     d30:	44 1f       	adc	r20, r20
     d32:	fa 95       	dec	r31
     d34:	e1 f7       	brne	.-8      	; 0xd2e <exp+0x42>
     d36:	41 95       	neg	r20
     d38:	55 0b       	sbc	r21, r21
     d3a:	32 d0       	rcall	.+100    	; 0xda0 <ldexp>
     d3c:	0f 90       	pop	r0
     d3e:	07 fe       	sbrs	r0, 7
     d40:	26 c0       	rjmp	.+76     	; 0xd8e <inverse>
     d42:	08 95       	ret

00000d44 <__fp_powser>:
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	1f 93       	push	r17
     d4a:	0f 93       	push	r16
     d4c:	ff 92       	push	r15
     d4e:	ef 92       	push	r14
     d50:	df 92       	push	r13
     d52:	7b 01       	movw	r14, r22
     d54:	8c 01       	movw	r16, r24
     d56:	68 94       	set
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <__fp_powser+0x20>
     d5a:	da 2e       	mov	r13, r26
     d5c:	ef 01       	movw	r28, r30
     d5e:	1e df       	rcall	.-452    	; 0xb9c <__mulsf3x>
     d60:	fe 01       	movw	r30, r28
     d62:	e8 94       	clt
     d64:	a5 91       	lpm	r26, Z+
     d66:	25 91       	lpm	r18, Z+
     d68:	35 91       	lpm	r19, Z+
     d6a:	45 91       	lpm	r20, Z+
     d6c:	55 91       	lpm	r21, Z+
     d6e:	ae f3       	brts	.-22     	; 0xd5a <__fp_powser+0x16>
     d70:	ef 01       	movw	r28, r30
     d72:	d4 d0       	rcall	.+424    	; 0xf1c <__addsf3x>
     d74:	fe 01       	movw	r30, r28
     d76:	97 01       	movw	r18, r14
     d78:	a8 01       	movw	r20, r16
     d7a:	da 94       	dec	r13
     d7c:	79 f7       	brne	.-34     	; 0xd5c <__fp_powser+0x18>
     d7e:	df 90       	pop	r13
     d80:	ef 90       	pop	r14
     d82:	ff 90       	pop	r15
     d84:	0f 91       	pop	r16
     d86:	1f 91       	pop	r17
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <inverse>:
     d8e:	9b 01       	movw	r18, r22
     d90:	ac 01       	movw	r20, r24
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	80 e8       	ldi	r24, 0x80	; 128
     d98:	9f e3       	ldi	r25, 0x3F	; 63
     d9a:	cd cd       	rjmp	.-1126   	; 0x936 <__divsf3>
     d9c:	a2 ce       	rjmp	.-700    	; 0xae2 <__fp_inf>
     d9e:	11 c1       	rjmp	.+546    	; 0xfc2 <__fp_mpack>

00000da0 <ldexp>:
     da0:	d0 de       	rcall	.-608    	; 0xb42 <__fp_splitA>
     da2:	e8 f3       	brcs	.-6      	; 0xd9e <inverse+0x10>
     da4:	99 23       	and	r25, r25
     da6:	d9 f3       	breq	.-10     	; 0xd9e <inverse+0x10>
     da8:	94 0f       	add	r25, r20
     daa:	51 1d       	adc	r21, r1
     dac:	bb f3       	brvs	.-18     	; 0xd9c <inverse+0xe>
     dae:	91 50       	subi	r25, 0x01	; 1
     db0:	50 40       	sbci	r21, 0x00	; 0
     db2:	94 f0       	brlt	.+36     	; 0xdd8 <ldexp+0x38>
     db4:	59 f0       	breq	.+22     	; 0xdcc <ldexp+0x2c>
     db6:	88 23       	and	r24, r24
     db8:	32 f0       	brmi	.+12     	; 0xdc6 <ldexp+0x26>
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	88 1f       	adc	r24, r24
     dc0:	91 50       	subi	r25, 0x01	; 1
     dc2:	50 40       	sbci	r21, 0x00	; 0
     dc4:	c1 f7       	brne	.-16     	; 0xdb6 <ldexp+0x16>
     dc6:	9e 3f       	cpi	r25, 0xFE	; 254
     dc8:	51 05       	cpc	r21, r1
     dca:	44 f7       	brge	.-48     	; 0xd9c <inverse+0xe>
     dcc:	88 0f       	add	r24, r24
     dce:	91 1d       	adc	r25, r1
     dd0:	96 95       	lsr	r25
     dd2:	87 95       	ror	r24
     dd4:	97 f9       	bld	r25, 7
     dd6:	08 95       	ret
     dd8:	5f 3f       	cpi	r21, 0xFF	; 255
     dda:	ac f0       	brlt	.+42     	; 0xe06 <ldexp+0x66>
     ddc:	98 3e       	cpi	r25, 0xE8	; 232
     dde:	9c f0       	brlt	.+38     	; 0xe06 <ldexp+0x66>
     de0:	bb 27       	eor	r27, r27
     de2:	86 95       	lsr	r24
     de4:	77 95       	ror	r23
     de6:	67 95       	ror	r22
     de8:	b7 95       	ror	r27
     dea:	08 f4       	brcc	.+2      	; 0xdee <ldexp+0x4e>
     dec:	b1 60       	ori	r27, 0x01	; 1
     dee:	93 95       	inc	r25
     df0:	c1 f7       	brne	.-16     	; 0xde2 <ldexp+0x42>
     df2:	bb 0f       	add	r27, r27
     df4:	58 f7       	brcc	.-42     	; 0xdcc <ldexp+0x2c>
     df6:	11 f4       	brne	.+4      	; 0xdfc <ldexp+0x5c>
     df8:	60 ff       	sbrs	r22, 0
     dfa:	e8 cf       	rjmp	.-48     	; 0xdcc <ldexp+0x2c>
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	8f 4f       	sbci	r24, 0xFF	; 255
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	e3 cf       	rjmp	.-58     	; 0xdcc <ldexp+0x2c>
     e06:	b8 ce       	rjmp	.-656    	; 0xb78 <__fp_szero>
     e08:	0e f0       	brts	.+2      	; 0xe0c <ldexp+0x6c>
     e0a:	db c0       	rjmp	.+438    	; 0xfc2 <__fp_mpack>
     e0c:	70 ce       	rjmp	.-800    	; 0xaee <__fp_nan>
     e0e:	68 94       	set
     e10:	68 ce       	rjmp	.-816    	; 0xae2 <__fp_inf>

00000e12 <log>:
     e12:	97 de       	rcall	.-722    	; 0xb42 <__fp_splitA>
     e14:	c8 f3       	brcs	.-14     	; 0xe08 <ldexp+0x68>
     e16:	99 23       	and	r25, r25
     e18:	d1 f3       	breq	.-12     	; 0xe0e <ldexp+0x6e>
     e1a:	c6 f3       	brts	.-16     	; 0xe0c <ldexp+0x6c>
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	1f 93       	push	r17
     e22:	0f 93       	push	r16
     e24:	ff 92       	push	r15
     e26:	c9 2f       	mov	r28, r25
     e28:	dd 27       	eor	r29, r29
     e2a:	88 23       	and	r24, r24
     e2c:	2a f0       	brmi	.+10     	; 0xe38 <log+0x26>
     e2e:	21 97       	sbiw	r28, 0x01	; 1
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	88 1f       	adc	r24, r24
     e36:	da f7       	brpl	.-10     	; 0xe2e <log+0x1c>
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f eb       	ldi	r21, 0xBF	; 191
     e40:	9f e3       	ldi	r25, 0x3F	; 63
     e42:	88 39       	cpi	r24, 0x98	; 152
     e44:	20 f0       	brcs	.+8      	; 0xe4e <log+0x3c>
     e46:	80 3e       	cpi	r24, 0xE0	; 224
     e48:	30 f0       	brcs	.+12     	; 0xe56 <log+0x44>
     e4a:	21 96       	adiw	r28, 0x01	; 1
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	55 d0       	rcall	.+170    	; 0xefa <__addsf3>
     e50:	ec e0       	ldi	r30, 0x0C	; 12
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <log+0x4a>
     e56:	51 d0       	rcall	.+162    	; 0xefa <__addsf3>
     e58:	e9 e3       	ldi	r30, 0x39	; 57
     e5a:	f1 e0       	ldi	r31, 0x01	; 1
     e5c:	73 df       	rcall	.-282    	; 0xd44 <__fp_powser>
     e5e:	8b 01       	movw	r16, r22
     e60:	be 01       	movw	r22, r28
     e62:	ec 01       	movw	r28, r24
     e64:	fb 2e       	mov	r15, r27
     e66:	6f 57       	subi	r22, 0x7F	; 127
     e68:	71 09       	sbc	r23, r1
     e6a:	75 95       	asr	r23
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 0b       	sbc	r24, r24
     e70:	99 0b       	sbc	r25, r25
     e72:	fc dd       	rcall	.-1032   	; 0xa6c <__floatsisf>
     e74:	28 e1       	ldi	r18, 0x18	; 24
     e76:	32 e7       	ldi	r19, 0x72	; 114
     e78:	41 e3       	ldi	r20, 0x31	; 49
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	8f de       	rcall	.-738    	; 0xb9c <__mulsf3x>
     e7e:	af 2d       	mov	r26, r15
     e80:	98 01       	movw	r18, r16
     e82:	ae 01       	movw	r20, r28
     e84:	ff 90       	pop	r15
     e86:	0f 91       	pop	r16
     e88:	1f 91       	pop	r17
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	46 d0       	rcall	.+140    	; 0xf1c <__addsf3x>
     e90:	3f ce       	rjmp	.-898    	; 0xb10 <__fp_round>

00000e92 <modf>:
     e92:	fa 01       	movw	r30, r20
     e94:	dc 01       	movw	r26, r24
     e96:	aa 0f       	add	r26, r26
     e98:	bb 1f       	adc	r27, r27
     e9a:	9b 01       	movw	r18, r22
     e9c:	ac 01       	movw	r20, r24
     e9e:	bf 57       	subi	r27, 0x7F	; 127
     ea0:	28 f4       	brcc	.+10     	; 0xeac <modf+0x1a>
     ea2:	22 27       	eor	r18, r18
     ea4:	33 27       	eor	r19, r19
     ea6:	44 27       	eor	r20, r20
     ea8:	50 78       	andi	r21, 0x80	; 128
     eaa:	1f c0       	rjmp	.+62     	; 0xeea <modf+0x58>
     eac:	b7 51       	subi	r27, 0x17	; 23
     eae:	88 f4       	brcc	.+34     	; 0xed2 <modf+0x40>
     eb0:	ab 2f       	mov	r26, r27
     eb2:	00 24       	eor	r0, r0
     eb4:	46 95       	lsr	r20
     eb6:	37 95       	ror	r19
     eb8:	27 95       	ror	r18
     eba:	01 1c       	adc	r0, r1
     ebc:	a3 95       	inc	r26
     ebe:	d2 f3       	brmi	.-12     	; 0xeb4 <modf+0x22>
     ec0:	00 20       	and	r0, r0
     ec2:	69 f0       	breq	.+26     	; 0xede <modf+0x4c>
     ec4:	22 0f       	add	r18, r18
     ec6:	33 1f       	adc	r19, r19
     ec8:	44 1f       	adc	r20, r20
     eca:	b3 95       	inc	r27
     ecc:	da f3       	brmi	.-10     	; 0xec4 <modf+0x32>
     ece:	0d d0       	rcall	.+26     	; 0xeea <modf+0x58>
     ed0:	13 c0       	rjmp	.+38     	; 0xef8 <__subsf3>
     ed2:	61 30       	cpi	r22, 0x01	; 1
     ed4:	71 05       	cpc	r23, r1
     ed6:	a0 e8       	ldi	r26, 0x80	; 128
     ed8:	8a 07       	cpc	r24, r26
     eda:	b9 46       	sbci	r27, 0x69	; 105
     edc:	30 f4       	brcc	.+12     	; 0xeea <modf+0x58>
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	66 27       	eor	r22, r22
     ee4:	77 27       	eor	r23, r23
     ee6:	88 27       	eor	r24, r24
     ee8:	90 78       	andi	r25, 0x80	; 128
     eea:	30 96       	adiw	r30, 0x00	; 0
     eec:	21 f0       	breq	.+8      	; 0xef6 <modf+0x64>
     eee:	20 83       	st	Z, r18
     ef0:	31 83       	std	Z+1, r19	; 0x01
     ef2:	42 83       	std	Z+2, r20	; 0x02
     ef4:	53 83       	std	Z+3, r21	; 0x03
     ef6:	08 95       	ret

00000ef8 <__subsf3>:
     ef8:	50 58       	subi	r21, 0x80	; 128

00000efa <__addsf3>:
     efa:	bb 27       	eor	r27, r27
     efc:	aa 27       	eor	r26, r26
     efe:	0e d0       	rcall	.+28     	; 0xf1c <__addsf3x>
     f00:	07 ce       	rjmp	.-1010   	; 0xb10 <__fp_round>
     f02:	f8 dd       	rcall	.-1040   	; 0xaf4 <__fp_pscA>
     f04:	30 f0       	brcs	.+12     	; 0xf12 <__addsf3+0x18>
     f06:	fd dd       	rcall	.-1030   	; 0xb02 <__fp_pscB>
     f08:	20 f0       	brcs	.+8      	; 0xf12 <__addsf3+0x18>
     f0a:	31 f4       	brne	.+12     	; 0xf18 <__addsf3+0x1e>
     f0c:	9f 3f       	cpi	r25, 0xFF	; 255
     f0e:	11 f4       	brne	.+4      	; 0xf14 <__addsf3+0x1a>
     f10:	1e f4       	brtc	.+6      	; 0xf18 <__addsf3+0x1e>
     f12:	ed cd       	rjmp	.-1062   	; 0xaee <__fp_nan>
     f14:	0e f4       	brtc	.+2      	; 0xf18 <__addsf3+0x1e>
     f16:	e0 95       	com	r30
     f18:	e7 fb       	bst	r30, 7
     f1a:	e3 cd       	rjmp	.-1082   	; 0xae2 <__fp_inf>

00000f1c <__addsf3x>:
     f1c:	e9 2f       	mov	r30, r25
     f1e:	09 de       	rcall	.-1006   	; 0xb32 <__fp_split3>
     f20:	80 f3       	brcs	.-32     	; 0xf02 <__addsf3+0x8>
     f22:	ba 17       	cp	r27, r26
     f24:	62 07       	cpc	r22, r18
     f26:	73 07       	cpc	r23, r19
     f28:	84 07       	cpc	r24, r20
     f2a:	95 07       	cpc	r25, r21
     f2c:	18 f0       	brcs	.+6      	; 0xf34 <__addsf3x+0x18>
     f2e:	71 f4       	brne	.+28     	; 0xf4c <__addsf3x+0x30>
     f30:	9e f5       	brtc	.+102    	; 0xf98 <__addsf3x+0x7c>
     f32:	21 ce       	rjmp	.-958    	; 0xb76 <__fp_zero>
     f34:	0e f4       	brtc	.+2      	; 0xf38 <__addsf3x+0x1c>
     f36:	e0 95       	com	r30
     f38:	0b 2e       	mov	r0, r27
     f3a:	ba 2f       	mov	r27, r26
     f3c:	a0 2d       	mov	r26, r0
     f3e:	0b 01       	movw	r0, r22
     f40:	b9 01       	movw	r22, r18
     f42:	90 01       	movw	r18, r0
     f44:	0c 01       	movw	r0, r24
     f46:	ca 01       	movw	r24, r20
     f48:	a0 01       	movw	r20, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	ff 27       	eor	r31, r31
     f4e:	59 1b       	sub	r21, r25
     f50:	99 f0       	breq	.+38     	; 0xf78 <__addsf3x+0x5c>
     f52:	59 3f       	cpi	r21, 0xF9	; 249
     f54:	50 f4       	brcc	.+20     	; 0xf6a <__addsf3x+0x4e>
     f56:	50 3e       	cpi	r21, 0xE0	; 224
     f58:	68 f1       	brcs	.+90     	; 0xfb4 <__addsf3x+0x98>
     f5a:	1a 16       	cp	r1, r26
     f5c:	f0 40       	sbci	r31, 0x00	; 0
     f5e:	a2 2f       	mov	r26, r18
     f60:	23 2f       	mov	r18, r19
     f62:	34 2f       	mov	r19, r20
     f64:	44 27       	eor	r20, r20
     f66:	58 5f       	subi	r21, 0xF8	; 248
     f68:	f3 cf       	rjmp	.-26     	; 0xf50 <__addsf3x+0x34>
     f6a:	46 95       	lsr	r20
     f6c:	37 95       	ror	r19
     f6e:	27 95       	ror	r18
     f70:	a7 95       	ror	r26
     f72:	f0 40       	sbci	r31, 0x00	; 0
     f74:	53 95       	inc	r21
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__addsf3x+0x4e>
     f78:	7e f4       	brtc	.+30     	; 0xf98 <__addsf3x+0x7c>
     f7a:	1f 16       	cp	r1, r31
     f7c:	ba 0b       	sbc	r27, r26
     f7e:	62 0b       	sbc	r22, r18
     f80:	73 0b       	sbc	r23, r19
     f82:	84 0b       	sbc	r24, r20
     f84:	ba f0       	brmi	.+46     	; 0xfb4 <__addsf3x+0x98>
     f86:	91 50       	subi	r25, 0x01	; 1
     f88:	a1 f0       	breq	.+40     	; 0xfb2 <__addsf3x+0x96>
     f8a:	ff 0f       	add	r31, r31
     f8c:	bb 1f       	adc	r27, r27
     f8e:	66 1f       	adc	r22, r22
     f90:	77 1f       	adc	r23, r23
     f92:	88 1f       	adc	r24, r24
     f94:	c2 f7       	brpl	.-16     	; 0xf86 <__addsf3x+0x6a>
     f96:	0e c0       	rjmp	.+28     	; 0xfb4 <__addsf3x+0x98>
     f98:	ba 0f       	add	r27, r26
     f9a:	62 1f       	adc	r22, r18
     f9c:	73 1f       	adc	r23, r19
     f9e:	84 1f       	adc	r24, r20
     fa0:	48 f4       	brcc	.+18     	; 0xfb4 <__addsf3x+0x98>
     fa2:	87 95       	ror	r24
     fa4:	77 95       	ror	r23
     fa6:	67 95       	ror	r22
     fa8:	b7 95       	ror	r27
     faa:	f7 95       	ror	r31
     fac:	9e 3f       	cpi	r25, 0xFE	; 254
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <__addsf3x+0x96>
     fb0:	b3 cf       	rjmp	.-154    	; 0xf18 <__addsf3+0x1e>
     fb2:	93 95       	inc	r25
     fb4:	88 0f       	add	r24, r24
     fb6:	08 f0       	brcs	.+2      	; 0xfba <__addsf3x+0x9e>
     fb8:	99 27       	eor	r25, r25
     fba:	ee 0f       	add	r30, r30
     fbc:	97 95       	ror	r25
     fbe:	87 95       	ror	r24
     fc0:	08 95       	ret

00000fc2 <__fp_mpack>:
     fc2:	9f 3f       	cpi	r25, 0xFF	; 255
     fc4:	31 f0       	breq	.+12     	; 0xfd2 <__fp_mpack_finite+0xc>

00000fc6 <__fp_mpack_finite>:
     fc6:	91 50       	subi	r25, 0x01	; 1
     fc8:	20 f4       	brcc	.+8      	; 0xfd2 <__fp_mpack_finite+0xc>
     fca:	87 95       	ror	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b7 95       	ror	r27
     fd2:	88 0f       	add	r24, r24
     fd4:	91 1d       	adc	r25, r1
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <__udivmodhi4>:
     fde:	aa 1b       	sub	r26, r26
     fe0:	bb 1b       	sub	r27, r27
     fe2:	51 e1       	ldi	r21, 0x11	; 17
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <__udivmodhi4_ep>

00000fe6 <__udivmodhi4_loop>:
     fe6:	aa 1f       	adc	r26, r26
     fe8:	bb 1f       	adc	r27, r27
     fea:	a6 17       	cp	r26, r22
     fec:	b7 07       	cpc	r27, r23
     fee:	10 f0       	brcs	.+4      	; 0xff4 <__udivmodhi4_ep>
     ff0:	a6 1b       	sub	r26, r22
     ff2:	b7 0b       	sbc	r27, r23

00000ff4 <__udivmodhi4_ep>:
     ff4:	88 1f       	adc	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	5a 95       	dec	r21
     ffa:	a9 f7       	brne	.-22     	; 0xfe6 <__udivmodhi4_loop>
     ffc:	80 95       	com	r24
     ffe:	90 95       	com	r25
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	08 95       	ret

00001006 <_exit>:
    1006:	f8 94       	cli

00001008 <__stop_program>:
    1008:	ff cf       	rjmp	.-2      	; 0x1008 <__stop_program>
